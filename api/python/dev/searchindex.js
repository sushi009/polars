Search.setIndex({"alltitles": {"ABS": [[1349, "abs"]], "ACOS": [[1352, "acos"]], "ACOSD": [[1352, "acosd"]], "ARRAY_AGG": [[1345, "array-agg"]], "ARRAY_CONTAINS": [[1345, "array-contains"]], "ARRAY_GET": [[1345, "array-get"]], "ARRAY_LENGTH": [[1345, "array-length"]], "ARRAY_LOWER": [[1345, "array-lower"]], "ARRAY_MEAN": [[1345, "array-mean"]], "ARRAY_REVERSE": [[1345, "array-reverse"]], "ARRAY_SUM": [[1345, "array-sum"]], "ARRAY_TO_STRING": [[1345, "array-to-string"]], "ARRAY_UNIQUE": [[1345, "array-unique"]], "ARRAY_UPPER": [[1345, "array-upper"]], "ASIN": [[1352, "asin"]], "ASIND": [[1352, "asind"]], "ATAN": [[1352, "atan"]], "ATAN2": [[1352, "atan2"]], "ATAN2D": [[1352, "atan2d"]], "ATAND": [[1352, "atand"]], "AVG": [[1344, "avg"]], "Aggregate": [[1344, null]], "Aggregation": [[183, null], [335, null], [832, null], [939, null]], "Aliases": [[1344, null], [1344, null], [1349, null], [1349, null], [1350, null], [1350, null]], "Array": [[810, null], [1319, null], [1345, null]], "Asserts": [[1358, "asserts"]], "Attributes": [[323, null], [927, null], [1320, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[831, "avro"]], "BIT_AND": [[1346, "bit-and"]], "BIT_COUNT": [[1346, "bit-count"]], "BIT_LENGTH": [[1350, "bit-length"]], "BIT_OR": [[1346, "bit-or"]], "BIT_XOR": [[1346, "bit-xor"]], "Binary": [[811, null], [824, "binary"], [1321, null]], "Boolean": [[812, null], [1322, null]], "CAST": [[1353, "cast"]], "CBRT": [[1349, "cbrt"]], "CEIL": [[1349, "ceil"]], "COALESCE": [[1347, "coalesce"]], "CONCAT": [[1350, "concat"]], "CONCAT_WS": [[1350, "concat-ws"]], "COS": [[1352, "cos"]], "COSD": [[1352, "cosd"]], "COT": [[1352, "cot"]], "COTD": [[1352, "cotd"]], "COUNT": [[1344, "count"]], "CREATE TABLE": [[1357, "create-table"]], "CSV": [[831, "csv"]], "Catalog": [[181, null]], "Categories": [[813, null], [1323, null]], "Clipboard": [[831, "clipboard"]], "Cloud Credentials": [[831, "cloud-credentials"]], "Columns / names": [[815, null]], "Comparison": [[824, "comparison"], [1331, "comparison"]], "Computation": [[324, null], [816, null], [1324, null]], "Conditional": [[1347, null]], "Config": [[182, null]], "Config load, save, state": [[182, "config-load-save-state"]], "Config options": [[182, "config-options"]], "Conjunction": [[824, "conjunction"]], "Conversion": [[829, "conversion"]], "DATE": [[1350, "date"]], "DATE_PART": [[1351, "date-part"]], "DEGREES": [[1352, "degrees"]], "DISTINCT": [[1343, "distinct"]], "DIV": [[1349, "div"]], "DROP TABLES": [[1357, "drop-tables"]], "Data types": [[333, null]], "DataFrame": [[328, null]], "DataType": [[333, "datatype"]], "Database": [[831, "database"]], "Delta Lake": [[831, "delta-lake"]], "Descriptive": [[325, null], [928, null], [1325, null]], "Documentation": [[1355, null], [1355, null], [1355, null]], "ENDS_WITH": [[1350, "ends-with"]], "EXCEPT": [[1356, "except"]], "EXP": [[1349, "exp"]], "EXPLAIN": [[1357, "explain"]], "EXTRACT": [[1351, "extract"]], "Errors": [[334, "errors"]], "Examples": [[1, "examples"], [938, "examples"], [1358, "examples"]], "Excel / ODS": [[831, "excel-ods"]], "Exceptions": [[334, null]], "Export": [[326, null], [1326, null]], "Expression SQL": [[1355, "expression-sql"]], "Expressions": [[818, null]], "Extending the API": [[1, null]], "FIRST": [[1344, "first"]], "FLOOR": [[1349, "floor"]], "FROM": [[1343, "from"]], "Feather / IPC": [[831, "feather-ipc"]], "Frame SQL": [[1355, "frame-sql"]], "Functions": [[817, null], [829, null], [938, "functions"]], "GPUEngine": [[929, null]], "GREATEST": [[1347, "greatest"]], "GROUP BY": [[1343, "group-by"]], "Global SQL": [[1355, "global-sql"]], "GroupBy": [[327, null], [930, null]], "HAVING": [[1343, "having"]], "IF": [[1347, "if"]], "IFNULL": [[1347, "ifnull"]], "INITCAP": [[1350, "initcap"]], "INTERSECT": [[1356, "intersect"]], "Iceberg": [[831, "iceberg"]], "Importing": [[938, "importing"]], "InProcessQuery": [[931, null]], "Index": [[0, null]], "Input/output": [[831, null]], "Introduction": [[1355, "introduction"]], "JOIN": [[1343, "join"]], "JSON": [[831, "json"]], "LAST": [[1344, "last"]], "LEAST": [[1347, "least"]], "LEFT": [[1350, "left"]], "LENGTH": [[1350, "length"]], "LIMIT": [[1343, "limit"]], "LN": [[1349, "ln"]], "LOG": [[1349, "log"]], "LOG10": [[1349, "log10"]], "LOG1P": [[1349, "log1p"]], "LOG2": [[1349, "log2"]], "LOWER": [[1350, "lower"]], "LTRIM": [[1350, "ltrim"]], "LazyFrame": [[932, null]], "List": [[819, null], [1328, null]], "MAX": [[1344, "max"]], "MEDIAN": [[1344, "median"]], "MIN": [[1344, "min"]], "MOD": [[1349, "mod"]], "Manipulation/selection": [[330, null], [822, null], [934, null], [1330, null]], "Math": [[1349, null]], "Meta": [[820, null]], "Metadata": [[935, null]], "Methods": [[1355, "methods"]], "Miscellaneous": [[329, null], [821, null], [829, "miscellaneous"], [933, null], [1329, null]], "Multiple Config instances": [[182, "multiple-config-instances"]], "NORMALIZE": [[1350, "normalize"]], "NULLIF": [[1347, "nullif"]], "Name": [[823, null]], "Nested": [[333, "nested"]], "Numeric": [[333, "numeric"], [824, "numeric"], [1331, "numeric"]], "OCTET_LENGTH": [[1350, "octet-length"]], "OFFSET": [[1343, "offset"]], "ORDER BY": [[1343, "order-by"]], "Operators": [[824, null], [1331, null]], "Other": [[333, "other"]], "PI": [[1349, "pi"]], "POW": [[1349, "pow"]], "Panic": [[334, "panic"]], "Parallelization": [[829, "parallelization"]], "Parametric testing": [[1358, "parametric-testing"]], "Parquet": [[831, "parquet"]], "Plot": [[331, null], [1332, null]], "Plugins": [[936, null]], "Polars strategies": [[1358, "polars-strategies"]], "Profiles": [[1358, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[831, "pyarrow-datasets"]], "Python API": [[1355, null]], "Python API reference": [[830, null]], "QUANTILE_CONT": [[1344, "quantile-cont"]], "QUANTILE_DISC": [[1344, "quantile-disc"]], "Querying": [[1355, "querying"]], "RADIANS": [[1352, "radians"]], "REGEXP_LIKE": [[1350, "regexp-like"]], "REPLACE": [[1350, "replace"]], "REVERSE": [[1350, "reverse"]], "RIGHT": [[1350, "right"]], "ROUND": [[1349, "round"]], "RTRIM": [[1350, "rtrim"]], "Random": [[829, "random"]], "SELECT": [[1343, "select"]], "SHOW TABLES": [[1357, "show-tables"]], "SIGN": [[1349, "sign"]], "SIN": [[1352, "sin"]], "SIND": [[1352, "sind"]], "SQL Clauses": [[1343, null]], "SQL Functions": [[1348, null]], "SQL Interface": [[1354, null]], "SQLContext": [[1355, "sqlcontext"]], "SQRT": [[1349, "sqrt"]], "STARTS_WITH": [[1350, "starts-with"]], "STDDEV": [[1344, "stddev"]], "STRFTIME": [[1351, "strftime"]], "STRPOS": [[1350, "strpos"]], "STRPTIME": [[1350, "strptime"]], "SUBSTR": [[1350, "substr"]], "SUM": [[1344, "sum"]], "Schema": [[937, null]], "Selectors": [[938, null]], "Serialization": [[329, "serialization"], [933, "serialization"]], "Series": [[1327, null]], "Set Operations": [[1356, null]], "Set operations": [[938, "set-operations"]], "Strategy helpers": [[1358, "strategy-helpers"]], "String": [[333, "string"], [825, null], [1333, null], [1350, null]], "StringCache": [[829, "stringcache"]], "Struct": [[826, null], [1334, null]], "Style": [[332, null]], "TAN": [[1352, "tan"]], "TAND": [[1352, "tand"]], "TIMESTAMP": [[1350, "timestamp"]], "TRUNCATE": [[1357, "truncate"]], "TRY_CAST": [[1353, "try-cast"]], "Table Operations": [[1357, null]], "Temporal": [[333, "temporal"], [827, null], [1335, null], [1346, null], [1351, null]], "Testing": [[1358, null]], "Trigonometry": [[1352, null]], "Types": [[1353, null]], "UNION": [[1356, "union"]], "UNION ALL": [[1356, "union-all"]], "UNION BY NAME": [[1356, "union-by-name"]], "UNNEST": [[1345, "unnest"], [1357, "unnest"]], "UPPER": [[1350, "upper"]], "Unity Catalog": [[181, "unity-catalog"]], "Use as a context manager": [[182, "use-as-a-context-manager"]], "Use as a decorator": [[182, "use-as-a-decorator"]], "VARIANCE": [[1344, "variance"]], "WHERE": [[1343, "where"]], "Warnings": [[334, "warnings"]], "Window": [[828, null]], "polars.Catalog": [[2, null]], "polars.Catalog.get_table_info": [[3, null]], "polars.Catalog.list_catalogs": [[4, null]], "polars.Catalog.list_schemas": [[5, null]], "polars.Catalog.list_tables": [[6, null]], "polars.Catalog.scan_table": [[7, null]], "polars.Config.load": [[8, null]], "polars.Config.load_from_file": [[9, null]], "polars.Config.restore_defaults": [[10, null]], "polars.Config.save": [[11, null]], "polars.Config.save_to_file": [[12, null]], "polars.Config.set_ascii_tables": [[13, null]], "polars.Config.set_auto_structify": [[14, null]], "polars.Config.set_decimal_separator": [[15, null]], "polars.Config.set_float_precision": [[16, null]], "polars.Config.set_fmt_float": [[17, null]], "polars.Config.set_fmt_str_lengths": [[18, null]], "polars.Config.set_fmt_table_cell_list_len": [[19, null]], "polars.Config.set_streaming_chunk_size": [[20, null]], "polars.Config.set_tbl_cell_alignment": [[21, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[22, null]], "polars.Config.set_tbl_cols": [[23, null]], "polars.Config.set_tbl_column_data_type_inline": [[24, null]], "polars.Config.set_tbl_dataframe_shape_below": [[25, null]], "polars.Config.set_tbl_formatting": [[26, null]], "polars.Config.set_tbl_hide_column_data_types": [[27, null]], "polars.Config.set_tbl_hide_column_names": [[28, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[29, null]], "polars.Config.set_tbl_hide_dtype_separator": [[30, null]], "polars.Config.set_tbl_rows": [[31, null]], "polars.Config.set_tbl_width_chars": [[32, null]], "polars.Config.set_thousands_separator": [[33, null]], "polars.Config.set_trim_decimal_zeros": [[34, null]], "polars.Config.set_verbose": [[35, null]], "polars.Config.state": [[36, null]], "polars.CredentialProvider": [[37, null]], "polars.CredentialProviderAWS": [[38, null]], "polars.CredentialProviderAzure": [[39, null]], "polars.CredentialProviderGCP": [[40, null]], "polars.DataFrame.__array__": [[184, null]], "polars.DataFrame.__arrow_c_stream__": [[185, null]], "polars.DataFrame.__dataframe__": [[186, null]], "polars.DataFrame.__getitem__": [[187, null]], "polars.DataFrame.approx_n_unique": [[188, null]], "polars.DataFrame.bottom_k": [[189, null]], "polars.DataFrame.cast": [[190, null]], "polars.DataFrame.clear": [[191, null]], "polars.DataFrame.clone": [[192, null]], "polars.DataFrame.collect_schema": [[193, null]], "polars.DataFrame.columns": [[194, null]], "polars.DataFrame.corr": [[195, null]], "polars.DataFrame.count": [[196, null]], "polars.DataFrame.describe": [[197, null]], "polars.DataFrame.deserialize": [[198, null]], "polars.DataFrame.drop": [[199, null]], "polars.DataFrame.drop_in_place": [[200, null]], "polars.DataFrame.drop_nans": [[201, null]], "polars.DataFrame.drop_nulls": [[202, null]], "polars.DataFrame.dtypes": [[203, null]], "polars.DataFrame.equals": [[204, null]], "polars.DataFrame.estimated_size": [[205, null]], "polars.DataFrame.explode": [[206, null]], "polars.DataFrame.extend": [[207, null]], "polars.DataFrame.fill_nan": [[208, null]], "polars.DataFrame.fill_null": [[209, null]], "polars.DataFrame.filter": [[210, null]], "polars.DataFrame.flags": [[211, null]], "polars.DataFrame.fold": [[212, null]], "polars.DataFrame.gather_every": [[213, null]], "polars.DataFrame.get_column": [[214, null]], "polars.DataFrame.get_column_index": [[215, null]], "polars.DataFrame.get_columns": [[216, null]], "polars.DataFrame.glimpse": [[217, null]], "polars.DataFrame.group_by": [[218, null]], "polars.DataFrame.group_by_dynamic": [[219, null]], "polars.DataFrame.hash_rows": [[220, null]], "polars.DataFrame.head": [[221, null]], "polars.DataFrame.height": [[222, null]], "polars.DataFrame.hstack": [[223, null]], "polars.DataFrame.insert_column": [[224, null]], "polars.DataFrame.interpolate": [[225, null]], "polars.DataFrame.is_duplicated": [[226, null]], "polars.DataFrame.is_empty": [[227, null]], "polars.DataFrame.is_unique": [[228, null]], "polars.DataFrame.item": [[229, null]], "polars.DataFrame.iter_columns": [[230, null]], "polars.DataFrame.iter_rows": [[231, null]], "polars.DataFrame.iter_slices": [[232, null]], "polars.DataFrame.join": [[233, null]], "polars.DataFrame.join_asof": [[234, null]], "polars.DataFrame.join_where": [[235, null]], "polars.DataFrame.lazy": [[236, null]], "polars.DataFrame.limit": [[237, null]], "polars.DataFrame.map_rows": [[238, null]], "polars.DataFrame.max": [[239, null]], "polars.DataFrame.max_horizontal": [[240, null]], "polars.DataFrame.mean": [[241, null]], "polars.DataFrame.mean_horizontal": [[242, null]], "polars.DataFrame.median": [[243, null]], "polars.DataFrame.melt": [[244, null]], "polars.DataFrame.merge_sorted": [[245, null]], "polars.DataFrame.min": [[246, null]], "polars.DataFrame.min_horizontal": [[247, null]], "polars.DataFrame.n_chunks": [[248, null]], "polars.DataFrame.n_unique": [[249, null]], "polars.DataFrame.null_count": [[250, null]], "polars.DataFrame.partition_by": [[251, null]], "polars.DataFrame.pipe": [[252, null]], "polars.DataFrame.pivot": [[253, null]], "polars.DataFrame.product": [[254, null]], "polars.DataFrame.quantile": [[255, null]], "polars.DataFrame.rechunk": [[256, null]], "polars.DataFrame.rename": [[257, null]], "polars.DataFrame.replace_column": [[258, null]], "polars.DataFrame.reverse": [[259, null]], "polars.DataFrame.rolling": [[260, null]], "polars.DataFrame.row": [[261, null]], "polars.DataFrame.rows": [[262, null]], "polars.DataFrame.rows_by_key": [[263, null]], "polars.DataFrame.sample": [[264, null]], "polars.DataFrame.schema": [[265, null]], "polars.DataFrame.select": [[266, null]], "polars.DataFrame.select_seq": [[267, null]], "polars.DataFrame.serialize": [[268, null]], "polars.DataFrame.set_sorted": [[269, null]], "polars.DataFrame.shape": [[270, null]], "polars.DataFrame.shift": [[271, null]], "polars.DataFrame.shrink_to_fit": [[272, null]], "polars.DataFrame.slice": [[273, null]], "polars.DataFrame.sort": [[274, null]], "polars.DataFrame.sql": [[275, null]], "polars.DataFrame.std": [[276, null]], "polars.DataFrame.sum": [[277, null]], "polars.DataFrame.sum_horizontal": [[278, null]], "polars.DataFrame.tail": [[279, null]], "polars.DataFrame.to_arrow": [[280, null]], "polars.DataFrame.to_dict": [[281, null]], "polars.DataFrame.to_dicts": [[282, null]], "polars.DataFrame.to_dummies": [[283, null]], "polars.DataFrame.to_init_repr": [[284, null]], "polars.DataFrame.to_jax": [[285, null]], "polars.DataFrame.to_numpy": [[286, null]], "polars.DataFrame.to_pandas": [[287, null]], "polars.DataFrame.to_series": [[288, null]], "polars.DataFrame.to_struct": [[289, null]], "polars.DataFrame.to_torch": [[290, null]], "polars.DataFrame.top_k": [[291, null]], "polars.DataFrame.transpose": [[292, null]], "polars.DataFrame.unique": [[293, null]], "polars.DataFrame.unnest": [[294, null]], "polars.DataFrame.unpivot": [[295, null]], "polars.DataFrame.unstack": [[296, null]], "polars.DataFrame.update": [[297, null]], "polars.DataFrame.upsample": [[298, null]], "polars.DataFrame.var": [[299, null]], "polars.DataFrame.vstack": [[300, null]], "polars.DataFrame.width": [[301, null]], "polars.DataFrame.with_columns": [[302, null]], "polars.DataFrame.with_columns_seq": [[303, null]], "polars.DataFrame.with_row_count": [[304, null]], "polars.DataFrame.with_row_index": [[305, null]], "polars.DataFrame.write_avro": [[41, null]], "polars.DataFrame.write_clipboard": [[42, null]], "polars.DataFrame.write_csv": [[43, null]], "polars.DataFrame.write_database": [[44, null]], "polars.DataFrame.write_delta": [[45, null]], "polars.DataFrame.write_excel": [[46, null]], "polars.DataFrame.write_ipc": [[47, null]], "polars.DataFrame.write_ipc_stream": [[48, null]], "polars.DataFrame.write_json": [[49, null]], "polars.DataFrame.write_ndjson": [[50, null]], "polars.DataFrame.write_parquet": [[51, null]], "polars.Expr.abs": [[336, null]], "polars.Expr.add": [[337, null]], "polars.Expr.agg_groups": [[338, null]], "polars.Expr.alias": [[339, null]], "polars.Expr.all": [[340, null]], "polars.Expr.and_": [[341, null]], "polars.Expr.any": [[342, null]], "polars.Expr.append": [[343, null]], "polars.Expr.approx_n_unique": [[344, null]], "polars.Expr.arccos": [[345, null]], "polars.Expr.arccosh": [[346, null]], "polars.Expr.arcsin": [[347, null]], "polars.Expr.arcsinh": [[348, null]], "polars.Expr.arctan": [[349, null]], "polars.Expr.arctanh": [[350, null]], "polars.Expr.arg_max": [[351, null]], "polars.Expr.arg_min": [[352, null]], "polars.Expr.arg_sort": [[353, null]], "polars.Expr.arg_true": [[354, null]], "polars.Expr.arg_unique": [[355, null]], "polars.Expr.arr.all": [[356, null]], "polars.Expr.arr.any": [[357, null]], "polars.Expr.arr.arg_max": [[358, null]], "polars.Expr.arr.arg_min": [[359, null]], "polars.Expr.arr.contains": [[360, null]], "polars.Expr.arr.count_matches": [[361, null]], "polars.Expr.arr.explode": [[362, null]], "polars.Expr.arr.first": [[363, null]], "polars.Expr.arr.get": [[364, null]], "polars.Expr.arr.join": [[365, null]], "polars.Expr.arr.last": [[366, null]], "polars.Expr.arr.max": [[367, null]], "polars.Expr.arr.median": [[368, null]], "polars.Expr.arr.min": [[369, null]], "polars.Expr.arr.n_unique": [[370, null]], "polars.Expr.arr.reverse": [[371, null]], "polars.Expr.arr.shift": [[372, null]], "polars.Expr.arr.sort": [[373, null]], "polars.Expr.arr.std": [[374, null]], "polars.Expr.arr.sum": [[375, null]], "polars.Expr.arr.to_list": [[376, null]], "polars.Expr.arr.to_struct": [[377, null]], "polars.Expr.arr.unique": [[378, null]], "polars.Expr.arr.var": [[379, null]], "polars.Expr.backward_fill": [[380, null]], "polars.Expr.bin.contains": [[381, null]], "polars.Expr.bin.decode": [[382, null]], "polars.Expr.bin.encode": [[383, null]], "polars.Expr.bin.ends_with": [[384, null]], "polars.Expr.bin.reinterpret": [[385, null]], "polars.Expr.bin.size": [[386, null]], "polars.Expr.bin.starts_with": [[387, null]], "polars.Expr.bitwise_and": [[388, null]], "polars.Expr.bitwise_count_ones": [[389, null]], "polars.Expr.bitwise_count_zeros": [[390, null]], "polars.Expr.bitwise_leading_ones": [[391, null]], "polars.Expr.bitwise_leading_zeros": [[392, null]], "polars.Expr.bitwise_or": [[393, null]], "polars.Expr.bitwise_trailing_ones": [[394, null]], "polars.Expr.bitwise_trailing_zeros": [[395, null]], "polars.Expr.bitwise_xor": [[396, null]], "polars.Expr.bottom_k": [[397, null]], "polars.Expr.bottom_k_by": [[398, null]], "polars.Expr.cast": [[399, null]], "polars.Expr.cat.ends_with": [[400, null]], "polars.Expr.cat.get_categories": [[401, null]], "polars.Expr.cat.len_bytes": [[402, null]], "polars.Expr.cat.len_chars": [[403, null]], "polars.Expr.cat.starts_with": [[404, null]], "polars.Expr.cbrt": [[405, null]], "polars.Expr.ceil": [[406, null]], "polars.Expr.clip": [[407, null]], "polars.Expr.cos": [[408, null]], "polars.Expr.cosh": [[409, null]], "polars.Expr.cot": [[410, null]], "polars.Expr.count": [[411, null]], "polars.Expr.cum_count": [[412, null]], "polars.Expr.cum_max": [[413, null]], "polars.Expr.cum_min": [[414, null]], "polars.Expr.cum_prod": [[415, null]], "polars.Expr.cum_sum": [[416, null]], "polars.Expr.cumulative_eval": [[417, null]], "polars.Expr.cut": [[418, null]], "polars.Expr.degrees": [[419, null]], "polars.Expr.deserialize": [[420, null]], "polars.Expr.diff": [[421, null]], "polars.Expr.dot": [[422, null]], "polars.Expr.drop_nans": [[423, null]], "polars.Expr.drop_nulls": [[424, null]], "polars.Expr.dt.add_business_days": [[425, null]], "polars.Expr.dt.base_utc_offset": [[426, null]], "polars.Expr.dt.cast_time_unit": [[427, null]], "polars.Expr.dt.century": [[428, null]], "polars.Expr.dt.combine": [[429, null]], "polars.Expr.dt.convert_time_zone": [[430, null]], "polars.Expr.dt.date": [[431, null]], "polars.Expr.dt.datetime": [[432, null]], "polars.Expr.dt.day": [[433, null]], "polars.Expr.dt.dst_offset": [[434, null]], "polars.Expr.dt.epoch": [[435, null]], "polars.Expr.dt.hour": [[436, null]], "polars.Expr.dt.is_leap_year": [[437, null]], "polars.Expr.dt.iso_year": [[438, null]], "polars.Expr.dt.microsecond": [[439, null]], "polars.Expr.dt.millennium": [[440, null]], "polars.Expr.dt.millisecond": [[441, null]], "polars.Expr.dt.minute": [[442, null]], "polars.Expr.dt.month": [[443, null]], "polars.Expr.dt.month_end": [[444, null]], "polars.Expr.dt.month_start": [[445, null]], "polars.Expr.dt.nanosecond": [[446, null]], "polars.Expr.dt.offset_by": [[447, null]], "polars.Expr.dt.ordinal_day": [[448, null]], "polars.Expr.dt.quarter": [[449, null]], "polars.Expr.dt.replace": [[450, null]], "polars.Expr.dt.replace_time_zone": [[451, null]], "polars.Expr.dt.round": [[452, null]], "polars.Expr.dt.second": [[453, null]], "polars.Expr.dt.strftime": [[454, null]], "polars.Expr.dt.time": [[455, null]], "polars.Expr.dt.timestamp": [[456, null]], "polars.Expr.dt.to_string": [[457, null]], "polars.Expr.dt.total_days": [[458, null]], "polars.Expr.dt.total_hours": [[459, null]], "polars.Expr.dt.total_microseconds": [[460, null]], "polars.Expr.dt.total_milliseconds": [[461, null]], "polars.Expr.dt.total_minutes": [[462, null]], "polars.Expr.dt.total_nanoseconds": [[463, null]], "polars.Expr.dt.total_seconds": [[464, null]], "polars.Expr.dt.truncate": [[465, null]], "polars.Expr.dt.week": [[466, null]], "polars.Expr.dt.weekday": [[467, null]], "polars.Expr.dt.with_time_unit": [[468, null]], "polars.Expr.dt.year": [[469, null]], "polars.Expr.entropy": [[470, null]], "polars.Expr.eq": [[471, null]], "polars.Expr.eq_missing": [[472, null]], "polars.Expr.ewm_mean": [[473, null]], "polars.Expr.ewm_mean_by": [[474, null]], "polars.Expr.ewm_std": [[475, null]], "polars.Expr.ewm_var": [[476, null]], "polars.Expr.exclude": [[477, null]], "polars.Expr.exp": [[478, null]], "polars.Expr.explode": [[479, null]], "polars.Expr.extend_constant": [[480, null]], "polars.Expr.fill_nan": [[481, null]], "polars.Expr.fill_null": [[482, null]], "polars.Expr.filter": [[483, null]], "polars.Expr.first": [[484, null]], "polars.Expr.flatten": [[485, null]], "polars.Expr.floor": [[486, null]], "polars.Expr.floordiv": [[487, null]], "polars.Expr.forward_fill": [[488, null]], "polars.Expr.from_json": [[489, null]], "polars.Expr.gather": [[490, null]], "polars.Expr.gather_every": [[491, null]], "polars.Expr.ge": [[492, null]], "polars.Expr.get": [[493, null]], "polars.Expr.gt": [[494, null]], "polars.Expr.has_nulls": [[495, null]], "polars.Expr.hash": [[496, null]], "polars.Expr.head": [[497, null]], "polars.Expr.hist": [[498, null]], "polars.Expr.implode": [[499, null]], "polars.Expr.index_of": [[500, null]], "polars.Expr.inspect": [[501, null]], "polars.Expr.interpolate": [[502, null]], "polars.Expr.interpolate_by": [[503, null]], "polars.Expr.is_between": [[504, null]], "polars.Expr.is_duplicated": [[505, null]], "polars.Expr.is_finite": [[506, null]], "polars.Expr.is_first_distinct": [[507, null]], "polars.Expr.is_in": [[508, null]], "polars.Expr.is_infinite": [[509, null]], "polars.Expr.is_last_distinct": [[510, null]], "polars.Expr.is_nan": [[511, null]], "polars.Expr.is_not_nan": [[512, null]], "polars.Expr.is_not_null": [[513, null]], "polars.Expr.is_null": [[514, null]], "polars.Expr.is_unique": [[515, null]], "polars.Expr.kurtosis": [[516, null]], "polars.Expr.last": [[517, null]], "polars.Expr.le": [[518, null]], "polars.Expr.len": [[519, null]], "polars.Expr.limit": [[520, null]], "polars.Expr.list.all": [[521, null]], "polars.Expr.list.any": [[522, null]], "polars.Expr.list.arg_max": [[523, null]], "polars.Expr.list.arg_min": [[524, null]], "polars.Expr.list.concat": [[525, null]], "polars.Expr.list.contains": [[526, null]], "polars.Expr.list.count_matches": [[527, null]], "polars.Expr.list.diff": [[528, null]], "polars.Expr.list.drop_nulls": [[529, null]], "polars.Expr.list.eval": [[530, null]], "polars.Expr.list.explode": [[531, null]], "polars.Expr.list.first": [[532, null]], "polars.Expr.list.gather": [[533, null]], "polars.Expr.list.gather_every": [[534, null]], "polars.Expr.list.get": [[535, null]], "polars.Expr.list.head": [[536, null]], "polars.Expr.list.join": [[537, null]], "polars.Expr.list.last": [[538, null]], "polars.Expr.list.len": [[539, null]], "polars.Expr.list.max": [[540, null]], "polars.Expr.list.mean": [[541, null]], "polars.Expr.list.median": [[542, null]], "polars.Expr.list.min": [[543, null]], "polars.Expr.list.n_unique": [[544, null]], "polars.Expr.list.reverse": [[545, null]], "polars.Expr.list.sample": [[546, null]], "polars.Expr.list.set_difference": [[547, null]], "polars.Expr.list.set_intersection": [[548, null]], "polars.Expr.list.set_symmetric_difference": [[549, null]], "polars.Expr.list.set_union": [[550, null]], "polars.Expr.list.shift": [[551, null]], "polars.Expr.list.slice": [[552, null]], "polars.Expr.list.sort": [[553, null]], "polars.Expr.list.std": [[554, null]], "polars.Expr.list.sum": [[555, null]], "polars.Expr.list.tail": [[556, null]], "polars.Expr.list.to_array": [[557, null]], "polars.Expr.list.to_struct": [[558, null]], "polars.Expr.list.unique": [[559, null]], "polars.Expr.list.var": [[560, null]], "polars.Expr.log": [[561, null]], "polars.Expr.log10": [[562, null]], "polars.Expr.log1p": [[563, null]], "polars.Expr.lower_bound": [[564, null]], "polars.Expr.lt": [[565, null]], "polars.Expr.map_batches": [[566, null]], "polars.Expr.map_elements": [[567, null]], "polars.Expr.max": [[568, null]], "polars.Expr.mean": [[569, null]], "polars.Expr.median": [[570, null]], "polars.Expr.meta.eq": [[571, null]], "polars.Expr.meta.has_multiple_outputs": [[572, null]], "polars.Expr.meta.is_column": [[573, null]], "polars.Expr.meta.is_column_selection": [[574, null]], "polars.Expr.meta.is_literal": [[575, null]], "polars.Expr.meta.is_regex_projection": [[576, null]], "polars.Expr.meta.ne": [[577, null]], "polars.Expr.meta.output_name": [[578, null]], "polars.Expr.meta.pop": [[579, null]], "polars.Expr.meta.root_names": [[580, null]], "polars.Expr.meta.serialize": [[581, null]], "polars.Expr.meta.show_graph": [[582, null]], "polars.Expr.meta.tree_format": [[583, null]], "polars.Expr.meta.undo_aliases": [[584, null]], "polars.Expr.meta.write_json": [[585, null]], "polars.Expr.min": [[586, null]], "polars.Expr.mod": [[587, null]], "polars.Expr.mode": [[588, null]], "polars.Expr.mul": [[589, null]], "polars.Expr.n_unique": [[590, null]], "polars.Expr.name.keep": [[591, null]], "polars.Expr.name.map": [[592, null]], "polars.Expr.name.map_fields": [[593, null]], "polars.Expr.name.prefix": [[594, null]], "polars.Expr.name.prefix_fields": [[595, null]], "polars.Expr.name.suffix": [[596, null]], "polars.Expr.name.suffix_fields": [[597, null]], "polars.Expr.name.to_lowercase": [[598, null]], "polars.Expr.name.to_uppercase": [[599, null]], "polars.Expr.nan_max": [[600, null]], "polars.Expr.nan_min": [[601, null]], "polars.Expr.ne": [[602, null]], "polars.Expr.ne_missing": [[603, null]], "polars.Expr.neg": [[604, null]], "polars.Expr.not_": [[605, null]], "polars.Expr.null_count": [[606, null]], "polars.Expr.or_": [[607, null]], "polars.Expr.over": [[608, null]], "polars.Expr.pct_change": [[609, null]], "polars.Expr.peak_max": [[610, null]], "polars.Expr.peak_min": [[611, null]], "polars.Expr.pipe": [[612, null]], "polars.Expr.pow": [[613, null]], "polars.Expr.product": [[614, null]], "polars.Expr.qcut": [[615, null]], "polars.Expr.quantile": [[616, null]], "polars.Expr.radians": [[617, null]], "polars.Expr.rank": [[618, null]], "polars.Expr.rechunk": [[619, null]], "polars.Expr.reinterpret": [[620, null]], "polars.Expr.repeat_by": [[621, null]], "polars.Expr.replace": [[622, null]], "polars.Expr.replace_strict": [[623, null]], "polars.Expr.reshape": [[624, null]], "polars.Expr.reverse": [[625, null]], "polars.Expr.rle": [[626, null]], "polars.Expr.rle_id": [[627, null]], "polars.Expr.rolling": [[628, null]], "polars.Expr.rolling_map": [[629, null]], "polars.Expr.rolling_max": [[630, null]], "polars.Expr.rolling_max_by": [[631, null]], "polars.Expr.rolling_mean": [[632, null]], "polars.Expr.rolling_mean_by": [[633, null]], "polars.Expr.rolling_median": [[634, null]], "polars.Expr.rolling_median_by": [[635, null]], "polars.Expr.rolling_min": [[636, null]], "polars.Expr.rolling_min_by": [[637, null]], "polars.Expr.rolling_quantile": [[638, null]], "polars.Expr.rolling_quantile_by": [[639, null]], "polars.Expr.rolling_skew": [[640, null]], "polars.Expr.rolling_std": [[641, null]], "polars.Expr.rolling_std_by": [[642, null]], "polars.Expr.rolling_sum": [[643, null]], "polars.Expr.rolling_sum_by": [[644, null]], "polars.Expr.rolling_var": [[645, null]], "polars.Expr.rolling_var_by": [[646, null]], "polars.Expr.round": [[647, null]], "polars.Expr.round_sig_figs": [[648, null]], "polars.Expr.sample": [[649, null]], "polars.Expr.search_sorted": [[650, null]], "polars.Expr.set_sorted": [[651, null]], "polars.Expr.shift": [[652, null]], "polars.Expr.shrink_dtype": [[653, null]], "polars.Expr.shuffle": [[654, null]], "polars.Expr.sign": [[655, null]], "polars.Expr.sin": [[656, null]], "polars.Expr.sinh": [[657, null]], "polars.Expr.skew": [[658, null]], "polars.Expr.slice": [[659, null]], "polars.Expr.sort": [[660, null]], "polars.Expr.sort_by": [[661, null]], "polars.Expr.sqrt": [[662, null]], "polars.Expr.std": [[663, null]], "polars.Expr.str.concat": [[664, null]], "polars.Expr.str.contains": [[665, null]], "polars.Expr.str.contains_any": [[666, null]], "polars.Expr.str.count_matches": [[667, null]], "polars.Expr.str.decode": [[668, null]], "polars.Expr.str.encode": [[669, null]], "polars.Expr.str.ends_with": [[670, null]], "polars.Expr.str.escape_regex": [[671, null]], "polars.Expr.str.explode": [[672, null]], "polars.Expr.str.extract": [[673, null]], "polars.Expr.str.extract_all": [[674, null]], "polars.Expr.str.extract_groups": [[675, null]], "polars.Expr.str.extract_many": [[676, null]], "polars.Expr.str.find": [[677, null]], "polars.Expr.str.find_many": [[678, null]], "polars.Expr.str.head": [[679, null]], "polars.Expr.str.join": [[680, null]], "polars.Expr.str.json_decode": [[681, null]], "polars.Expr.str.json_path_match": [[682, null]], "polars.Expr.str.len_bytes": [[683, null]], "polars.Expr.str.len_chars": [[684, null]], "polars.Expr.str.normalize": [[685, null]], "polars.Expr.str.pad_end": [[686, null]], "polars.Expr.str.pad_start": [[687, null]], "polars.Expr.str.replace": [[688, null]], "polars.Expr.str.replace_all": [[689, null]], "polars.Expr.str.replace_many": [[690, null]], "polars.Expr.str.reverse": [[691, null]], "polars.Expr.str.slice": [[692, null]], "polars.Expr.str.split": [[693, null]], "polars.Expr.str.split_exact": [[694, null]], "polars.Expr.str.splitn": [[695, null]], "polars.Expr.str.starts_with": [[696, null]], "polars.Expr.str.strip_chars": [[697, null]], "polars.Expr.str.strip_chars_end": [[698, null]], "polars.Expr.str.strip_chars_start": [[699, null]], "polars.Expr.str.strip_prefix": [[700, null]], "polars.Expr.str.strip_suffix": [[701, null]], "polars.Expr.str.strptime": [[702, null]], "polars.Expr.str.tail": [[703, null]], "polars.Expr.str.to_date": [[704, null]], "polars.Expr.str.to_datetime": [[705, null]], "polars.Expr.str.to_decimal": [[706, null]], "polars.Expr.str.to_integer": [[707, null]], "polars.Expr.str.to_lowercase": [[708, null]], "polars.Expr.str.to_time": [[709, null]], "polars.Expr.str.to_titlecase": [[710, null]], "polars.Expr.str.to_uppercase": [[711, null]], "polars.Expr.str.zfill": [[712, null]], "polars.Expr.struct.field": [[713, null]], "polars.Expr.struct.json_encode": [[714, null]], "polars.Expr.struct.rename_fields": [[715, null]], "polars.Expr.struct.unnest": [[716, null]], "polars.Expr.struct.with_fields": [[717, null]], "polars.Expr.sub": [[718, null]], "polars.Expr.sum": [[719, null]], "polars.Expr.tail": [[720, null]], "polars.Expr.tan": [[721, null]], "polars.Expr.tanh": [[722, null]], "polars.Expr.to_physical": [[723, null]], "polars.Expr.top_k": [[724, null]], "polars.Expr.top_k_by": [[725, null]], "polars.Expr.truediv": [[726, null]], "polars.Expr.unique": [[727, null]], "polars.Expr.unique_counts": [[728, null]], "polars.Expr.upper_bound": [[729, null]], "polars.Expr.value_counts": [[730, null]], "polars.Expr.var": [[731, null]], "polars.Expr.where": [[732, null]], "polars.Expr.xor": [[733, null]], "polars.LazyFrame.approx_n_unique": [[833, null]], "polars.LazyFrame.bottom_k": [[834, null]], "polars.LazyFrame.cache": [[835, null]], "polars.LazyFrame.cast": [[836, null]], "polars.LazyFrame.clear": [[837, null]], "polars.LazyFrame.clone": [[838, null]], "polars.LazyFrame.collect": [[839, null]], "polars.LazyFrame.collect_async": [[840, null]], "polars.LazyFrame.collect_schema": [[841, null]], "polars.LazyFrame.columns": [[842, null]], "polars.LazyFrame.count": [[843, null]], "polars.LazyFrame.describe": [[844, null]], "polars.LazyFrame.deserialize": [[845, null]], "polars.LazyFrame.drop": [[846, null]], "polars.LazyFrame.drop_nans": [[847, null]], "polars.LazyFrame.drop_nulls": [[848, null]], "polars.LazyFrame.dtypes": [[849, null]], "polars.LazyFrame.explain": [[850, null]], "polars.LazyFrame.explode": [[851, null]], "polars.LazyFrame.fill_nan": [[852, null]], "polars.LazyFrame.fill_null": [[853, null]], "polars.LazyFrame.filter": [[854, null]], "polars.LazyFrame.first": [[855, null]], "polars.LazyFrame.gather_every": [[856, null]], "polars.LazyFrame.group_by": [[857, null]], "polars.LazyFrame.group_by_dynamic": [[858, null]], "polars.LazyFrame.head": [[859, null]], "polars.LazyFrame.inspect": [[860, null]], "polars.LazyFrame.interpolate": [[861, null]], "polars.LazyFrame.join": [[862, null]], "polars.LazyFrame.join_asof": [[863, null]], "polars.LazyFrame.join_where": [[864, null]], "polars.LazyFrame.last": [[865, null]], "polars.LazyFrame.lazy": [[866, null]], "polars.LazyFrame.limit": [[867, null]], "polars.LazyFrame.map_batches": [[868, null]], "polars.LazyFrame.max": [[869, null]], "polars.LazyFrame.mean": [[870, null]], "polars.LazyFrame.median": [[871, null]], "polars.LazyFrame.melt": [[872, null]], "polars.LazyFrame.merge_sorted": [[873, null]], "polars.LazyFrame.min": [[874, null]], "polars.LazyFrame.null_count": [[875, null]], "polars.LazyFrame.pipe": [[876, null]], "polars.LazyFrame.profile": [[877, null]], "polars.LazyFrame.quantile": [[878, null]], "polars.LazyFrame.rename": [[879, null]], "polars.LazyFrame.reverse": [[880, null]], "polars.LazyFrame.rolling": [[881, null]], "polars.LazyFrame.schema": [[882, null]], "polars.LazyFrame.select": [[883, null]], "polars.LazyFrame.select_seq": [[884, null]], "polars.LazyFrame.serialize": [[885, null]], "polars.LazyFrame.set_sorted": [[886, null]], "polars.LazyFrame.shift": [[887, null]], "polars.LazyFrame.show_graph": [[888, null]], "polars.LazyFrame.sink_csv": [[52, null]], "polars.LazyFrame.sink_ipc": [[53, null]], "polars.LazyFrame.sink_ndjson": [[54, null]], "polars.LazyFrame.sink_parquet": [[55, null]], "polars.LazyFrame.slice": [[889, null]], "polars.LazyFrame.sort": [[890, null]], "polars.LazyFrame.sql": [[891, null]], "polars.LazyFrame.std": [[892, null]], "polars.LazyFrame.sum": [[893, null]], "polars.LazyFrame.tail": [[894, null]], "polars.LazyFrame.top_k": [[895, null]], "polars.LazyFrame.unique": [[896, null]], "polars.LazyFrame.unnest": [[897, null]], "polars.LazyFrame.unpivot": [[898, null]], "polars.LazyFrame.update": [[899, null]], "polars.LazyFrame.var": [[900, null]], "polars.LazyFrame.width": [[901, null]], "polars.LazyFrame.with_columns": [[902, null]], "polars.LazyFrame.with_columns_seq": [[903, null]], "polars.LazyFrame.with_context": [[904, null]], "polars.LazyFrame.with_row_count": [[905, null]], "polars.LazyFrame.with_row_index": [[906, null]], "polars.SQLContext.execute": [[1336, null]], "polars.SQLContext.execute_global": [[1337, null]], "polars.SQLContext.register": [[1338, null]], "polars.SQLContext.register_globals": [[1339, null]], "polars.SQLContext.register_many": [[1340, null]], "polars.SQLContext.tables": [[1341, null]], "polars.SQLContext.unregister": [[1342, null]], "polars.Series.__array__": [[940, null]], "polars.Series.__arrow_c_stream__": [[941, null]], "polars.Series.__getitem__": [[942, null]], "polars.Series.abs": [[943, null]], "polars.Series.alias": [[944, null]], "polars.Series.all": [[945, null]], "polars.Series.any": [[946, null]], "polars.Series.append": [[947, null]], "polars.Series.approx_n_unique": [[948, null]], "polars.Series.arccos": [[949, null]], "polars.Series.arccosh": [[950, null]], "polars.Series.arcsin": [[951, null]], "polars.Series.arcsinh": [[952, null]], "polars.Series.arctan": [[953, null]], "polars.Series.arctanh": [[954, null]], "polars.Series.arg_max": [[955, null]], "polars.Series.arg_min": [[956, null]], "polars.Series.arg_sort": [[957, null]], "polars.Series.arg_true": [[958, null]], "polars.Series.arg_unique": [[959, null]], "polars.Series.arr.all": [[960, null]], "polars.Series.arr.any": [[961, null]], "polars.Series.arr.arg_max": [[962, null]], "polars.Series.arr.arg_min": [[963, null]], "polars.Series.arr.contains": [[964, null]], "polars.Series.arr.count_matches": [[965, null]], "polars.Series.arr.explode": [[966, null]], "polars.Series.arr.first": [[967, null]], "polars.Series.arr.get": [[968, null]], "polars.Series.arr.join": [[969, null]], "polars.Series.arr.last": [[970, null]], "polars.Series.arr.max": [[971, null]], "polars.Series.arr.median": [[972, null]], "polars.Series.arr.min": [[973, null]], "polars.Series.arr.n_unique": [[974, null]], "polars.Series.arr.reverse": [[975, null]], "polars.Series.arr.shift": [[976, null]], "polars.Series.arr.sort": [[977, null]], "polars.Series.arr.std": [[978, null]], "polars.Series.arr.sum": [[979, null]], "polars.Series.arr.to_list": [[980, null]], "polars.Series.arr.to_struct": [[981, null]], "polars.Series.arr.unique": [[982, null]], "polars.Series.arr.var": [[983, null]], "polars.Series.bin.contains": [[984, null]], "polars.Series.bin.decode": [[985, null]], "polars.Series.bin.encode": [[986, null]], "polars.Series.bin.ends_with": [[987, null]], "polars.Series.bin.reinterpret": [[988, null]], "polars.Series.bin.size": [[989, null]], "polars.Series.bin.starts_with": [[990, null]], "polars.Series.bitwise_and": [[991, null]], "polars.Series.bitwise_count_ones": [[992, null]], "polars.Series.bitwise_count_zeros": [[993, null]], "polars.Series.bitwise_leading_ones": [[994, null]], "polars.Series.bitwise_leading_zeros": [[995, null]], "polars.Series.bitwise_or": [[996, null]], "polars.Series.bitwise_trailing_ones": [[997, null]], "polars.Series.bitwise_trailing_zeros": [[998, null]], "polars.Series.bitwise_xor": [[999, null]], "polars.Series.bottom_k": [[1000, null]], "polars.Series.cast": [[1001, null]], "polars.Series.cat.ends_with": [[1002, null]], "polars.Series.cat.get_categories": [[1003, null]], "polars.Series.cat.is_local": [[1004, null]], "polars.Series.cat.len_bytes": [[1005, null]], "polars.Series.cat.len_chars": [[1006, null]], "polars.Series.cat.starts_with": [[1007, null]], "polars.Series.cat.to_local": [[1008, null]], "polars.Series.cat.uses_lexical_ordering": [[1009, null]], "polars.Series.cbrt": [[1010, null]], "polars.Series.ceil": [[1011, null]], "polars.Series.chunk_lengths": [[1012, null]], "polars.Series.clear": [[1013, null]], "polars.Series.clip": [[1014, null]], "polars.Series.clone": [[1015, null]], "polars.Series.cos": [[1016, null]], "polars.Series.cosh": [[1017, null]], "polars.Series.cot": [[1018, null]], "polars.Series.count": [[1019, null]], "polars.Series.cum_count": [[1020, null]], "polars.Series.cum_max": [[1021, null]], "polars.Series.cum_min": [[1022, null]], "polars.Series.cum_prod": [[1023, null]], "polars.Series.cum_sum": [[1024, null]], "polars.Series.cumulative_eval": [[1025, null]], "polars.Series.cut": [[1026, null]], "polars.Series.describe": [[1027, null]], "polars.Series.diff": [[1028, null]], "polars.Series.dot": [[1029, null]], "polars.Series.drop_nans": [[1030, null]], "polars.Series.drop_nulls": [[1031, null]], "polars.Series.dt.add_business_days": [[1032, null]], "polars.Series.dt.base_utc_offset": [[1033, null]], "polars.Series.dt.cast_time_unit": [[1034, null]], "polars.Series.dt.century": [[1035, null]], "polars.Series.dt.combine": [[1036, null]], "polars.Series.dt.convert_time_zone": [[1037, null]], "polars.Series.dt.date": [[1038, null]], "polars.Series.dt.datetime": [[1039, null]], "polars.Series.dt.day": [[1040, null]], "polars.Series.dt.dst_offset": [[1041, null]], "polars.Series.dt.epoch": [[1042, null]], "polars.Series.dt.hour": [[1043, null]], "polars.Series.dt.is_leap_year": [[1044, null]], "polars.Series.dt.iso_year": [[1045, null]], "polars.Series.dt.max": [[1046, null]], "polars.Series.dt.mean": [[1047, null]], "polars.Series.dt.median": [[1048, null]], "polars.Series.dt.microsecond": [[1049, null]], "polars.Series.dt.millennium": [[1050, null]], "polars.Series.dt.millisecond": [[1051, null]], "polars.Series.dt.min": [[1052, null]], "polars.Series.dt.minute": [[1053, null]], "polars.Series.dt.month": [[1054, null]], "polars.Series.dt.month_end": [[1055, null]], "polars.Series.dt.month_start": [[1056, null]], "polars.Series.dt.nanosecond": [[1057, null]], "polars.Series.dt.offset_by": [[1058, null]], "polars.Series.dt.ordinal_day": [[1059, null]], "polars.Series.dt.quarter": [[1060, null]], "polars.Series.dt.replace": [[1061, null]], "polars.Series.dt.replace_time_zone": [[1062, null]], "polars.Series.dt.round": [[1063, null]], "polars.Series.dt.second": [[1064, null]], "polars.Series.dt.strftime": [[1065, null]], "polars.Series.dt.time": [[1066, null]], "polars.Series.dt.timestamp": [[1067, null]], "polars.Series.dt.to_string": [[1068, null]], "polars.Series.dt.total_days": [[1069, null]], "polars.Series.dt.total_hours": [[1070, null]], "polars.Series.dt.total_microseconds": [[1071, null]], "polars.Series.dt.total_milliseconds": [[1072, null]], "polars.Series.dt.total_minutes": [[1073, null]], "polars.Series.dt.total_nanoseconds": [[1074, null]], "polars.Series.dt.total_seconds": [[1075, null]], "polars.Series.dt.truncate": [[1076, null]], "polars.Series.dt.week": [[1077, null]], "polars.Series.dt.weekday": [[1078, null]], "polars.Series.dt.with_time_unit": [[1079, null]], "polars.Series.dt.year": [[1080, null]], "polars.Series.dtype": [[1081, null]], "polars.Series.entropy": [[1082, null]], "polars.Series.eq": [[1083, null]], "polars.Series.eq_missing": [[1084, null]], "polars.Series.equals": [[1085, null]], "polars.Series.estimated_size": [[1086, null]], "polars.Series.ewm_mean": [[1087, null]], "polars.Series.ewm_mean_by": [[1088, null]], "polars.Series.ewm_std": [[1089, null]], "polars.Series.ewm_var": [[1090, null]], "polars.Series.exp": [[1091, null]], "polars.Series.explode": [[1092, null]], "polars.Series.extend": [[1093, null]], "polars.Series.extend_constant": [[1094, null]], "polars.Series.fill_nan": [[1095, null]], "polars.Series.fill_null": [[1096, null]], "polars.Series.filter": [[1097, null]], "polars.Series.first": [[1098, null]], "polars.Series.flags": [[1099, null]], "polars.Series.floor": [[1100, null]], "polars.Series.gather": [[1101, null]], "polars.Series.gather_every": [[1102, null]], "polars.Series.ge": [[1103, null]], "polars.Series.get_chunks": [[1104, null]], "polars.Series.gt": [[1105, null]], "polars.Series.has_nulls": [[1106, null]], "polars.Series.has_validity": [[1107, null]], "polars.Series.hash": [[1108, null]], "polars.Series.head": [[1109, null]], "polars.Series.hist": [[1110, null]], "polars.Series.implode": [[1111, null]], "polars.Series.index_of": [[1112, null]], "polars.Series.interpolate": [[1113, null]], "polars.Series.interpolate_by": [[1114, null]], "polars.Series.is_between": [[1115, null]], "polars.Series.is_duplicated": [[1116, null]], "polars.Series.is_empty": [[1117, null]], "polars.Series.is_finite": [[1118, null]], "polars.Series.is_first_distinct": [[1119, null]], "polars.Series.is_in": [[1120, null]], "polars.Series.is_infinite": [[1121, null]], "polars.Series.is_last_distinct": [[1122, null]], "polars.Series.is_nan": [[1123, null]], "polars.Series.is_not_nan": [[1124, null]], "polars.Series.is_not_null": [[1125, null]], "polars.Series.is_null": [[1126, null]], "polars.Series.is_sorted": [[1127, null]], "polars.Series.is_unique": [[1128, null]], "polars.Series.item": [[1129, null]], "polars.Series.kurtosis": [[1130, null]], "polars.Series.last": [[1131, null]], "polars.Series.le": [[1132, null]], "polars.Series.len": [[1133, null]], "polars.Series.limit": [[1134, null]], "polars.Series.list.all": [[1135, null]], "polars.Series.list.any": [[1136, null]], "polars.Series.list.arg_max": [[1137, null]], "polars.Series.list.arg_min": [[1138, null]], "polars.Series.list.concat": [[1139, null]], "polars.Series.list.contains": [[1140, null]], "polars.Series.list.count_matches": [[1141, null]], "polars.Series.list.diff": [[1142, null]], "polars.Series.list.drop_nulls": [[1143, null]], "polars.Series.list.eval": [[1144, null]], "polars.Series.list.explode": [[1145, null]], "polars.Series.list.first": [[1146, null]], "polars.Series.list.gather": [[1147, null]], "polars.Series.list.gather_every": [[1148, null]], "polars.Series.list.get": [[1149, null]], "polars.Series.list.head": [[1150, null]], "polars.Series.list.join": [[1151, null]], "polars.Series.list.last": [[1152, null]], "polars.Series.list.len": [[1153, null]], "polars.Series.list.max": [[1154, null]], "polars.Series.list.mean": [[1155, null]], "polars.Series.list.median": [[1156, null]], "polars.Series.list.min": [[1157, null]], "polars.Series.list.n_unique": [[1158, null]], "polars.Series.list.reverse": [[1159, null]], "polars.Series.list.sample": [[1160, null]], "polars.Series.list.set_difference": [[1161, null]], "polars.Series.list.set_intersection": [[1162, null]], "polars.Series.list.set_symmetric_difference": [[1163, null]], "polars.Series.list.set_union": [[1164, null]], "polars.Series.list.shift": [[1165, null]], "polars.Series.list.slice": [[1166, null]], "polars.Series.list.sort": [[1167, null]], "polars.Series.list.std": [[1168, null]], "polars.Series.list.sum": [[1169, null]], "polars.Series.list.tail": [[1170, null]], "polars.Series.list.to_array": [[1171, null]], "polars.Series.list.to_struct": [[1172, null]], "polars.Series.list.unique": [[1173, null]], "polars.Series.list.var": [[1174, null]], "polars.Series.log": [[1175, null]], "polars.Series.log10": [[1176, null]], "polars.Series.log1p": [[1177, null]], "polars.Series.lower_bound": [[1178, null]], "polars.Series.lt": [[1179, null]], "polars.Series.map_elements": [[1180, null]], "polars.Series.max": [[1181, null]], "polars.Series.mean": [[1182, null]], "polars.Series.median": [[1183, null]], "polars.Series.min": [[1184, null]], "polars.Series.mode": [[1185, null]], "polars.Series.n_chunks": [[1186, null]], "polars.Series.n_unique": [[1187, null]], "polars.Series.name": [[1188, null]], "polars.Series.nan_max": [[1189, null]], "polars.Series.nan_min": [[1190, null]], "polars.Series.ne": [[1191, null]], "polars.Series.ne_missing": [[1192, null]], "polars.Series.new_from_index": [[1193, null]], "polars.Series.not_": [[1194, null]], "polars.Series.null_count": [[1195, null]], "polars.Series.pct_change": [[1196, null]], "polars.Series.peak_max": [[1197, null]], "polars.Series.peak_min": [[1198, null]], "polars.Series.pow": [[1199, null]], "polars.Series.product": [[1200, null]], "polars.Series.qcut": [[1201, null]], "polars.Series.quantile": [[1202, null]], "polars.Series.rank": [[1203, null]], "polars.Series.rechunk": [[1204, null]], "polars.Series.reinterpret": [[1205, null]], "polars.Series.rename": [[1206, null]], "polars.Series.replace": [[1207, null]], "polars.Series.replace_strict": [[1208, null]], "polars.Series.reshape": [[1209, null]], "polars.Series.reverse": [[1210, null]], "polars.Series.rle": [[1211, null]], "polars.Series.rle_id": [[1212, null]], "polars.Series.rolling_map": [[1213, null]], "polars.Series.rolling_max": [[1214, null]], "polars.Series.rolling_mean": [[1215, null]], "polars.Series.rolling_median": [[1216, null]], "polars.Series.rolling_min": [[1217, null]], "polars.Series.rolling_quantile": [[1218, null]], "polars.Series.rolling_skew": [[1219, null]], "polars.Series.rolling_std": [[1220, null]], "polars.Series.rolling_sum": [[1221, null]], "polars.Series.rolling_var": [[1222, null]], "polars.Series.round": [[1223, null]], "polars.Series.round_sig_figs": [[1224, null]], "polars.Series.sample": [[1225, null]], "polars.Series.scatter": [[1226, null]], "polars.Series.search_sorted": [[1227, null]], "polars.Series.set": [[1228, null]], "polars.Series.set_sorted": [[1229, null]], "polars.Series.shape": [[1230, null]], "polars.Series.shift": [[1231, null]], "polars.Series.shrink_dtype": [[1232, null]], "polars.Series.shrink_to_fit": [[1233, null]], "polars.Series.shuffle": [[1234, null]], "polars.Series.sign": [[1235, null]], "polars.Series.sin": [[1236, null]], "polars.Series.sinh": [[1237, null]], "polars.Series.skew": [[1238, null]], "polars.Series.slice": [[1239, null]], "polars.Series.sort": [[1240, null]], "polars.Series.sqrt": [[1241, null]], "polars.Series.std": [[1242, null]], "polars.Series.str.concat": [[1243, null]], "polars.Series.str.contains": [[1244, null]], "polars.Series.str.contains_any": [[1245, null]], "polars.Series.str.count_matches": [[1246, null]], "polars.Series.str.decode": [[1247, null]], "polars.Series.str.encode": [[1248, null]], "polars.Series.str.ends_with": [[1249, null]], "polars.Series.str.escape_regex": [[1250, null]], "polars.Series.str.explode": [[1251, null]], "polars.Series.str.extract": [[1252, null]], "polars.Series.str.extract_all": [[1253, null]], "polars.Series.str.extract_groups": [[1254, null]], "polars.Series.str.extract_many": [[1255, null]], "polars.Series.str.find": [[1256, null]], "polars.Series.str.find_many": [[1257, null]], "polars.Series.str.head": [[1258, null]], "polars.Series.str.join": [[1259, null]], "polars.Series.str.json_decode": [[1260, null]], "polars.Series.str.json_path_match": [[1261, null]], "polars.Series.str.len_bytes": [[1262, null]], "polars.Series.str.len_chars": [[1263, null]], "polars.Series.str.normalize": [[1264, null]], "polars.Series.str.pad_end": [[1265, null]], "polars.Series.str.pad_start": [[1266, null]], "polars.Series.str.replace": [[1267, null]], "polars.Series.str.replace_all": [[1268, null]], "polars.Series.str.replace_many": [[1269, null]], "polars.Series.str.reverse": [[1270, null]], "polars.Series.str.slice": [[1271, null]], "polars.Series.str.split": [[1272, null]], "polars.Series.str.split_exact": [[1273, null]], "polars.Series.str.splitn": [[1274, null]], "polars.Series.str.starts_with": [[1275, null]], "polars.Series.str.strip_chars": [[1276, null]], "polars.Series.str.strip_chars_end": [[1277, null]], "polars.Series.str.strip_chars_start": [[1278, null]], "polars.Series.str.strip_prefix": [[1279, null]], "polars.Series.str.strip_suffix": [[1280, null]], "polars.Series.str.strptime": [[1281, null]], "polars.Series.str.tail": [[1282, null]], "polars.Series.str.to_date": [[1283, null]], "polars.Series.str.to_datetime": [[1284, null]], "polars.Series.str.to_decimal": [[1285, null]], "polars.Series.str.to_integer": [[1286, null]], "polars.Series.str.to_lowercase": [[1287, null]], "polars.Series.str.to_time": [[1288, null]], "polars.Series.str.to_titlecase": [[1289, null]], "polars.Series.str.to_uppercase": [[1290, null]], "polars.Series.str.zfill": [[1291, null]], "polars.Series.struct.field": [[1292, null]], "polars.Series.struct.fields": [[1293, null]], "polars.Series.struct.json_encode": [[1294, null]], "polars.Series.struct.rename_fields": [[1295, null]], "polars.Series.struct.schema": [[1296, null]], "polars.Series.struct.unnest": [[1297, null]], "polars.Series.sum": [[1298, null]], "polars.Series.tail": [[1299, null]], "polars.Series.tan": [[1300, null]], "polars.Series.tanh": [[1301, null]], "polars.Series.to_arrow": [[1302, null]], "polars.Series.to_dummies": [[1303, null]], "polars.Series.to_frame": [[1304, null]], "polars.Series.to_init_repr": [[1305, null]], "polars.Series.to_jax": [[1306, null]], "polars.Series.to_list": [[1307, null]], "polars.Series.to_numpy": [[1308, null]], "polars.Series.to_pandas": [[1309, null]], "polars.Series.to_physical": [[1310, null]], "polars.Series.to_torch": [[1311, null]], "polars.Series.top_k": [[1312, null]], "polars.Series.unique": [[1313, null]], "polars.Series.unique_counts": [[1314, null]], "polars.Series.upper_bound": [[1315, null]], "polars.Series.value_counts": [[1316, null]], "polars.Series.var": [[1317, null]], "polars.Series.zip_with": [[1318, null]], "polars.StringCache": [[56, null]], "polars.align_frames": [[57, null]], "polars.all": [[734, null]], "polars.all_horizontal": [[735, null]], "polars.any": [[736, null]], "polars.any_horizontal": [[737, null]], "polars.api.register_dataframe_namespace": [[58, null]], "polars.api.register_expr_namespace": [[59, null]], "polars.api.register_lazyframe_namespace": [[60, null]], "polars.api.register_series_namespace": [[61, null]], "polars.approx_n_unique": [[738, null]], "polars.arange": [[739, null]], "polars.arctan2": [[740, null]], "polars.arctan2d": [[741, null]], "polars.arg_sort_by": [[742, null]], "polars.arg_where": [[743, null]], "polars.build_info": [[62, null]], "polars.business_day_count": [[744, null]], "polars.coalesce": [[745, null]], "polars.col": [[814, null]], "polars.collect_all": [[63, null]], "polars.collect_all_async": [[64, null]], "polars.concat": [[65, null]], "polars.concat_arr": [[746, null]], "polars.concat_list": [[747, null]], "polars.concat_str": [[748, null]], "polars.corr": [[749, null]], "polars.count": [[750, null]], "polars.cov": [[751, null]], "polars.cum_count": [[752, null]], "polars.cum_fold": [[753, null]], "polars.cum_reduce": [[754, null]], "polars.cum_sum": [[755, null]], "polars.cum_sum_horizontal": [[756, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[306, null]], "polars.dataframe.group_by.GroupBy.agg": [[307, null]], "polars.dataframe.group_by.GroupBy.all": [[308, null]], "polars.dataframe.group_by.GroupBy.count": [[309, null]], "polars.dataframe.group_by.GroupBy.first": [[310, null]], "polars.dataframe.group_by.GroupBy.head": [[311, null]], "polars.dataframe.group_by.GroupBy.last": [[312, null]], "polars.dataframe.group_by.GroupBy.len": [[313, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[314, null]], "polars.dataframe.group_by.GroupBy.max": [[315, null]], "polars.dataframe.group_by.GroupBy.mean": [[316, null]], "polars.dataframe.group_by.GroupBy.median": [[317, null]], "polars.dataframe.group_by.GroupBy.min": [[318, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[319, null]], "polars.dataframe.group_by.GroupBy.quantile": [[320, null]], "polars.dataframe.group_by.GroupBy.sum": [[321, null]], "polars.dataframe.group_by.GroupBy.tail": [[322, null]], "polars.datatypes.Array": [[66, null]], "polars.datatypes.Binary": [[67, null]], "polars.datatypes.Boolean": [[68, null]], "polars.datatypes.Categorical": [[69, null]], "polars.datatypes.DataType": [[70, null]], "polars.datatypes.Date": [[71, null]], "polars.datatypes.Datetime": [[72, null]], "polars.datatypes.Decimal": [[73, null]], "polars.datatypes.Duration": [[74, null]], "polars.datatypes.Enum": [[75, null]], "polars.datatypes.Field": [[76, null]], "polars.datatypes.Float32": [[77, null]], "polars.datatypes.Float64": [[78, null]], "polars.datatypes.Int128": [[79, null]], "polars.datatypes.Int16": [[80, null]], "polars.datatypes.Int32": [[81, null]], "polars.datatypes.Int64": [[82, null]], "polars.datatypes.Int8": [[83, null]], "polars.datatypes.List": [[84, null]], "polars.datatypes.Null": [[85, null]], "polars.datatypes.Object": [[86, null]], "polars.datatypes.String": [[87, null]], "polars.datatypes.Struct": [[88, null]], "polars.datatypes.Time": [[89, null]], "polars.datatypes.UInt16": [[90, null]], "polars.datatypes.UInt32": [[91, null]], "polars.datatypes.UInt64": [[92, null]], "polars.datatypes.UInt8": [[93, null]], "polars.datatypes.Unknown": [[94, null]], "polars.datatypes.Utf8": [[95, null]], "polars.date": [[757, null]], "polars.date_range": [[758, null]], "polars.date_ranges": [[759, null]], "polars.datetime": [[760, null]], "polars.datetime_range": [[761, null]], "polars.datetime_ranges": [[762, null]], "polars.disable_string_cache": [[96, null]], "polars.duration": [[763, null]], "polars.element": [[764, null]], "polars.enable_string_cache": [[97, null]], "polars.escape_regex": [[98, null]], "polars.exceptions.CategoricalRemappingWarning": [[99, null]], "polars.exceptions.ChronoFormatWarning": [[100, null]], "polars.exceptions.ColumnNotFoundError": [[101, null]], "polars.exceptions.ComputeError": [[102, null]], "polars.exceptions.CustomUFuncWarning": [[103, null]], "polars.exceptions.DataOrientationWarning": [[104, null]], "polars.exceptions.DuplicateError": [[105, null]], "polars.exceptions.InvalidOperationError": [[106, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[107, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[108, null]], "polars.exceptions.NoDataError": [[109, null]], "polars.exceptions.NoRowsReturnedError": [[110, null]], "polars.exceptions.OutOfBoundsError": [[111, null]], "polars.exceptions.PanicException": [[112, null]], "polars.exceptions.ParameterCollisionError": [[113, null]], "polars.exceptions.PerformanceWarning": [[114, null]], "polars.exceptions.PolarsError": [[115, null]], "polars.exceptions.PolarsInefficientMapWarning": [[116, null]], "polars.exceptions.PolarsWarning": [[117, null]], "polars.exceptions.RowsError": [[118, null]], "polars.exceptions.SQLInterfaceError": [[119, null]], "polars.exceptions.SQLSyntaxError": [[120, null]], "polars.exceptions.SchemaError": [[121, null]], "polars.exceptions.SchemaFieldNotFoundError": [[122, null]], "polars.exceptions.ShapeError": [[123, null]], "polars.exceptions.StringCacheMismatchError": [[124, null]], "polars.exceptions.StructFieldNotFoundError": [[125, null]], "polars.exceptions.TooManyRowsReturnedError": [[126, null]], "polars.exceptions.UnstableWarning": [[127, null]], "polars.exceptions.UnsuitableSQLError": [[128, null]], "polars.exclude": [[765, null]], "polars.first": [[766, null]], "polars.fold": [[767, null]], "polars.format": [[768, null]], "polars.from_arrow": [[129, null]], "polars.from_dataframe": [[130, null]], "polars.from_dict": [[131, null]], "polars.from_dicts": [[132, null]], "polars.from_epoch": [[769, null]], "polars.from_numpy": [[133, null]], "polars.from_pandas": [[134, null]], "polars.from_records": [[135, null]], "polars.from_repr": [[136, null]], "polars.get_index_type": [[137, null]], "polars.groups": [[770, null]], "polars.head": [[771, null]], "polars.implode": [[772, null]], "polars.int_range": [[773, null]], "polars.int_ranges": [[774, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[138, null]], "polars.json_normalize": [[139, null]], "polars.last": [[775, null]], "polars.lazyframe.engine_config.GPUEngine": [[907, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[908, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[909, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[910, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[911, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[912, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[913, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[914, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[915, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[916, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[917, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[918, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[919, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[920, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[921, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[922, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[923, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[924, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[925, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[926, null]], "polars.len": [[776, null]], "polars.linear_space": [[777, null]], "polars.lit": [[778, null]], "polars.map_batches": [[779, null]], "polars.map_groups": [[780, null]], "polars.max": [[781, null]], "polars.max_horizontal": [[782, null]], "polars.mean": [[783, null]], "polars.mean_horizontal": [[784, null]], "polars.median": [[785, null]], "polars.min": [[786, null]], "polars.min_horizontal": [[787, null]], "polars.n_unique": [[788, null]], "polars.nth": [[789, null]], "polars.ones": [[790, null]], "polars.quantile": [[791, null]], "polars.read_avro": [[140, null]], "polars.read_clipboard": [[141, null]], "polars.read_csv": [[142, null]], "polars.read_csv_batched": [[143, null]], "polars.read_database": [[144, null]], "polars.read_database_uri": [[145, null]], "polars.read_delta": [[146, null]], "polars.read_excel": [[147, null]], "polars.read_ipc": [[148, null]], "polars.read_ipc_schema": [[149, null]], "polars.read_ipc_stream": [[150, null]], "polars.read_json": [[151, null]], "polars.read_ndjson": [[152, null]], "polars.read_ods": [[153, null]], "polars.read_parquet": [[154, null]], "polars.read_parquet_schema": [[155, null]], "polars.reduce": [[792, null]], "polars.repeat": [[793, null]], "polars.rolling_corr": [[794, null]], "polars.rolling_cov": [[795, null]], "polars.scan_csv": [[156, null]], "polars.scan_delta": [[157, null]], "polars.scan_iceberg": [[158, null]], "polars.scan_ipc": [[159, null]], "polars.scan_ndjson": [[160, null]], "polars.scan_parquet": [[161, null]], "polars.scan_pyarrow_dataset": [[162, null]], "polars.select": [[796, null]], "polars.set_random_seed": [[163, null]], "polars.show_versions": [[164, null]], "polars.sql": [[797, null]], "polars.sql_expr": [[798, null]], "polars.std": [[799, null]], "polars.struct": [[800, null]], "polars.sum": [[801, null]], "polars.sum_horizontal": [[802, null]], "polars.tail": [[803, null]], "polars.testing.assert_frame_equal": [[165, null]], "polars.testing.assert_frame_not_equal": [[166, null]], "polars.testing.assert_series_equal": [[167, null]], "polars.testing.assert_series_not_equal": [[168, null]], "polars.testing.parametric.column": [[169, null]], "polars.testing.parametric.columns": [[170, null]], "polars.testing.parametric.create_list_strategy": [[171, null]], "polars.testing.parametric.dataframes": [[172, null]], "polars.testing.parametric.dtypes": [[173, null]], "polars.testing.parametric.lists": [[174, null]], "polars.testing.parametric.load_profile": [[175, null]], "polars.testing.parametric.series": [[176, null]], "polars.testing.parametric.set_profile": [[177, null]], "polars.thread_pool_size": [[178, null]], "polars.threadpool_size": [[179, null]], "polars.time": [[804, null]], "polars.time_range": [[805, null]], "polars.time_ranges": [[806, null]], "polars.using_string_cache": [[180, null]], "polars.var": [[807, null]], "polars.when": [[808, null]], "polars.zeros": [[809, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Catalog", "reference/api/polars.Catalog.get_table_info", "reference/api/polars.Catalog.list_catalogs", "reference/api/polars.Catalog.list_schemas", "reference/api/polars.Catalog.list_tables", "reference/api/polars.Catalog.scan_table", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Catalog.rst", "reference/api/polars.Catalog.get_table_info.rst", "reference/api/polars.Catalog.list_catalogs.rst", "reference/api/polars.Catalog.list_schemas.rst", "reference/api/polars.Catalog.list_tables.rst", "reference/api/polars.Catalog.scan_table.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[184, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[940, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[185, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[941, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[186, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1355, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1355, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[187, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[942, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[2, "polars.Catalog.__init__", false]], "__init__() (polars.credentialprovider method)": [[37, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[38, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[39, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[40, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[66, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[67, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[68, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[69, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[70, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[71, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[72, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[73, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[74, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[75, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[76, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[77, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[78, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[79, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[80, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[81, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[82, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[83, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[84, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[85, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[86, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[87, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[88, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[89, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[90, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[91, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[92, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[93, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[94, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[907, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1355, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[169, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[336, "polars.Expr.abs", false]], "abs() (polars.series method)": [[943, "polars.Series.abs", false]], "add() (polars.expr method)": [[337, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[425, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1032, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[338, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[339, "polars.Expr.alias", false]], "alias() (polars.series method)": [[944, "polars.Series.alias", false]], "align_frames() (in module polars)": [[57, "polars.align_frames", false]], "all() (in module polars)": [[734, "polars.all", false]], "all() (in module polars.selectors)": [[938, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[340, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[356, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[521, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[945, "polars.Series.all", false]], "all() (polars.series.arr method)": [[960, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1135, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[735, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[938, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[938, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[341, "polars.Expr.and_", false]], "any() (in module polars)": [[736, "polars.any", false]], "any() (polars.expr method)": [[342, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[357, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[522, "polars.Expr.list.any", false]], "any() (polars.series method)": [[946, "polars.Series.any", false]], "any() (polars.series.arr method)": [[961, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1136, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[737, "polars.any_horizontal", false]], "append() (polars.expr method)": [[343, "polars.Expr.append", false]], "append() (polars.series method)": [[947, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[738, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[188, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[344, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[833, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[948, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[739, "polars.arange", false]], "arccos() (polars.expr method)": [[345, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[949, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[346, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[950, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[347, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[951, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[348, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[952, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[349, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[953, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[740, "polars.arctan2", false]], "arctan2d() (in module polars)": [[741, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[350, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[954, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[351, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[358, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[523, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[955, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[962, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1137, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[352, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[359, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[524, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[956, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[963, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1138, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[353, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[957, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[742, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[354, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[958, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[355, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[959, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[743, "polars.arg_where", false]], "array (class in polars.datatypes)": [[66, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[165, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[166, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[167, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[168, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[380, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[426, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1033, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[67, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[938, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[388, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[991, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[389, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[992, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[390, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[993, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[391, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[994, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[392, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[995, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[393, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[996, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[394, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[997, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[395, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[998, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[396, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[999, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[68, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[938, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[189, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[397, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[834, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1000, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[398, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[62, "polars.build_info", false]], "business_day_count() (in module polars)": [[744, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[938, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[938, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[938, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[835, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[924, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[190, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[399, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[836, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1001, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[427, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1034, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[2, "polars.Catalog", false]], "categorical (class in polars.datatypes)": [[69, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[938, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[99, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[405, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1010, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[406, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1011, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[428, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1035, "polars.Series.dt.century", false]], "chronoformatwarning": [[100, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1012, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[191, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[837, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1013, "polars.Series.clear", false]], "clip() (polars.expr method)": [[407, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1014, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[192, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[838, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1015, "polars.Series.clone", false]], "coalesce() (in module polars)": [[745, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[839, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[63, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[64, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[840, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[193, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[841, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[169, "polars.testing.parametric.column", false]], "columnnotfounderror": [[101, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[194, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[842, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[429, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1036, "polars.Series.dt.combine", false]], "computeerror": [[102, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[65, "polars.concat", false]], "concat() (polars.expr.list method)": [[525, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[664, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1139, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1243, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[746, "polars.concat_arr", false]], "concat_list() (in module polars)": [[747, "polars.concat_list", false]], "concat_str() (in module polars)": [[748, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[938, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[360, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[381, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[526, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[665, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[964, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[984, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1140, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1244, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[666, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1245, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[430, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1037, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[749, "polars.corr", false]], "corr() (polars.dataframe method)": [[195, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[408, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1016, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[409, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1017, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[410, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1018, "polars.Series.cot", false]], "count() (in module polars)": [[750, "polars.count", false]], "count() (polars.dataframe method)": [[196, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[411, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[843, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1019, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[361, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[527, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[667, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[965, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1141, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1246, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[751, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[171, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[37, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[38, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[39, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[40, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[752, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[412, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1020, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[753, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[413, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1021, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[414, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1022, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[415, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1023, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[754, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[755, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[416, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1024, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[756, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[417, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1025, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[103, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[418, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1026, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[172, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[104, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[70, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[71, "polars.datatypes.Date", false]], "date() (in module polars)": [[757, "polars.date", false]], "date() (in module polars.selectors)": [[938, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[431, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1038, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[758, "polars.date_range", false]], "date_ranges() (in module polars)": [[759, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[72, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[760, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[938, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[432, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1039, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[761, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[762, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[433, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1040, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[73, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[938, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[382, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[668, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[985, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1247, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[419, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[197, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[844, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1027, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[198, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[420, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[845, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[421, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[528, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1028, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1142, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[938, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[96, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[422, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1029, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[199, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[846, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[200, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[201, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[423, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[847, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1030, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[202, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[424, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[529, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[848, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1031, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1143, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[434, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1041, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1081, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[203, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[849, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[173, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[105, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[74, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[763, "polars.duration", false]], "duration() (in module polars.selectors)": [[938, "polars.selectors.duration", false]], "element() (in module polars)": [[764, "polars.element", false]], "enable_string_cache() (in module polars)": [[97, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[383, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[669, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[986, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1248, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[938, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[384, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[400, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[670, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[987, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1002, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1249, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[470, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1082, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[75, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[435, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1042, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[471, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[571, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1083, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[472, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1084, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[204, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1085, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[98, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[671, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1250, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[205, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1086, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[530, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1144, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[473, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1087, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[474, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1088, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[475, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1089, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[476, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1090, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[765, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[938, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[477, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1336, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1337, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[478, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1091, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[938, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[850, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[206, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[479, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[362, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[531, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[672, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[851, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1092, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[966, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1145, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1251, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[207, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1093, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[480, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1094, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[673, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1252, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[674, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1253, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[675, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1254, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[676, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1255, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[925, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[926, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[76, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[713, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1292, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1293, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[208, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[481, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[852, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1095, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[209, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[482, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[853, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1096, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[210, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[483, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[854, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1097, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[677, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1256, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[678, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1257, "polars.Series.str.find_many", false]], "first() (in module polars)": [[766, "polars.first", false]], "first() (in module polars.selectors)": [[938, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[484, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[363, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[532, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[855, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1098, "polars.Series.first", false]], "first() (polars.series.arr method)": [[967, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1146, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[211, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1099, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[485, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[938, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[77, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[78, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[486, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1100, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[487, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[767, "polars.fold", false]], "fold() (polars.dataframe method)": [[212, "polars.DataFrame.fold", false]], "format() (in module polars)": [[768, "polars.format", false]], "forward_fill() (polars.expr method)": [[488, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[129, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[130, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[131, "polars.from_dict", false]], "from_dicts() (in module polars)": [[132, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[769, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[489, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[133, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[134, "polars.from_pandas", false]], "from_records() (in module polars)": [[135, "polars.from_records", false]], "from_repr() (in module polars)": [[136, "polars.from_repr", false]], "gather() (polars.expr method)": [[490, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[533, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1101, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1147, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[213, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[491, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[534, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[856, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1102, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1148, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[492, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1103, "polars.Series.ge", false]], "get() (polars.expr method)": [[493, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[364, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[535, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[968, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1149, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[401, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1003, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1104, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[214, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[215, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[216, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[137, "polars.get_index_type", false]], "get_table_info() (polars.catalog method)": [[3, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[217, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[907, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[218, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[857, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[219, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[858, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[770, "polars.groups", false]], "gt() (polars.expr method)": [[494, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1105, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[572, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[495, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1106, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1107, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[496, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1108, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[220, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[771, "polars.head", false]], "head() (polars.dataframe method)": [[221, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[497, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[536, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[679, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[859, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1109, "polars.Series.head", false]], "head() (polars.series.list method)": [[1150, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1258, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[222, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[498, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1110, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[436, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1043, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[223, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[772, "polars.implode", false]], "implode() (polars.expr method)": [[499, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1111, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[500, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1112, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[224, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[501, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[860, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[79, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[80, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[81, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[82, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[83, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[773, "polars.int_range", false]], "int_ranges() (in module polars)": [[774, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[938, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[225, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[502, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[861, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1113, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[503, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1114, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[106, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[504, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1115, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[573, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[574, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[226, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[505, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1116, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[227, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1117, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[506, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1118, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[507, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1119, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[508, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1120, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[509, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1121, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[510, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1122, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[437, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1044, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[575, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1004, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[511, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1123, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[512, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1124, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[513, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1125, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[514, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1126, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[576, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[938, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1127, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[228, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[515, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1128, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[438, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1045, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[229, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1129, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[230, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[231, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[232, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[233, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[365, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[537, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[680, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[862, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[969, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1151, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1259, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[234, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[863, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[235, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[864, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[681, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1260, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[714, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1294, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[139, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[682, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1261, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[591, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[516, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1130, "polars.Series.kurtosis", false]], "last() (in module polars)": [[775, "polars.last", false]], "last() (in module polars.selectors)": [[938, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[517, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[366, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[538, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[865, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1131, "polars.Series.last", false]], "last() (polars.series.arr method)": [[970, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1152, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[236, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[866, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[518, "polars.Expr.le", false]], "le() (polars.series method)": [[1132, "polars.Series.le", false]], "len() (in module polars)": [[776, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[313, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[519, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[539, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1133, "polars.Series.len", false]], "len() (polars.series.list method)": [[1153, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[402, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[683, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1005, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1262, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[403, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[684, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1006, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1263, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[237, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[520, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[867, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1134, "polars.Series.limit", false]], "linear_space() (in module polars)": [[777, "polars.linear_space", false]], "list (class in polars.datatypes)": [[84, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[4, "polars.Catalog.list_catalogs", false]], "list_schemas() (polars.catalog method)": [[5, "polars.Catalog.list_schemas", false]], "list_tables() (polars.catalog method)": [[6, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[174, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[778, "polars.lit", false]], "load() (polars.config class method)": [[8, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[9, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[175, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[561, "polars.Expr.log", false]], "log() (polars.series method)": [[1175, "polars.Series.log", false]], "log10() (polars.expr method)": [[562, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1176, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[563, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1177, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[564, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1178, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[565, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1179, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[592, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[779, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[566, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[868, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[567, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1180, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[593, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[780, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[314, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[238, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[107, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[938, "polars.selectors.matches", false]], "max() (in module polars)": [[781, "polars.max", false]], "max() (polars.dataframe method)": [[239, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[315, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[568, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[367, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[540, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[869, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[916, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1181, "polars.Series.max", false]], "max() (polars.series.arr method)": [[971, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1046, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1154, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[782, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[240, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[783, "polars.mean", false]], "mean() (polars.dataframe method)": [[241, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[316, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[569, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[541, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[870, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[917, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1182, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1047, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1155, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[784, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[242, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[785, "polars.median", false]], "median() (polars.dataframe method)": [[243, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[317, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[570, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[368, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[542, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[871, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1183, "polars.Series.median", false]], "median() (polars.series.arr method)": [[972, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1048, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1156, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[244, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[872, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[245, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[873, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[439, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1049, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[440, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1050, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[441, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1051, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[786, "polars.min", false]], "min() (polars.dataframe method)": [[246, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[318, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[586, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[369, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[543, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[874, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1184, "polars.Series.min", false]], "min() (polars.series.arr method)": [[973, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1052, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1157, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[787, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[247, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[442, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1053, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[587, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[588, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1185, "polars.Series.mode", false]], "module": [[936, "module-polars.plugins", false], [938, "module-polars.selectors", false]], "moduleupgraderequirederror": [[108, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[443, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1054, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[444, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1055, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[445, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1056, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[589, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[248, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1186, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[788, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[249, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[319, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[590, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[370, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[544, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1187, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[974, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1158, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1188, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[600, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1189, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[601, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1190, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[446, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1057, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[602, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[577, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1191, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[603, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1192, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[604, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1193, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[138, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[109, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[685, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1264, "polars.Series.str.normalize", false]], "norowsreturnederror": [[110, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[605, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1194, "polars.Series.not_", false]], "nth() (in module polars)": [[789, "polars.nth", false]], "null (class in polars.datatypes)": [[85, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[250, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[606, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[875, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1195, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[938, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[86, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[447, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1058, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[790, "polars.ones", false]], "or_() (polars.expr method)": [[607, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[448, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1059, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[111, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[578, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[608, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[686, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1265, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[687, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1266, "polars.Series.str.pad_start", false]], "panicexception": [[112, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[113, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[251, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[609, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1196, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[610, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1197, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[611, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1198, "polars.Series.peak_min", false]], "performancewarning": [[114, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[252, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[612, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[876, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[253, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[331, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1332, "polars.Series.plot", false]], "polars.plugins": [[936, "module-polars.plugins", false]], "polars.selectors": [[938, "module-polars.selectors", false]], "polarserror": [[115, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[116, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[117, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[579, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[613, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1199, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[594, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[595, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[254, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[614, "polars.Expr.product", false]], "product() (polars.series method)": [[1200, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[877, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[615, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1201, "polars.Series.qcut", false]], "quantile() (in module polars)": [[791, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[255, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[320, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[616, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[878, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1202, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[449, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1060, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[617, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[618, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1203, "polars.Series.rank", false]], "read_avro() (in module polars)": [[140, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[141, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[142, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[143, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[144, "polars.read_database", false]], "read_database_uri() (in module polars)": [[145, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[146, "polars.read_delta", false]], "read_excel() (in module polars)": [[147, "polars.read_excel", false]], "read_ipc() (in module polars)": [[148, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[149, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[150, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[151, "polars.read_json", false]], "read_ndjson() (in module polars)": [[152, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[153, "polars.read_ods", false]], "read_parquet() (in module polars)": [[154, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[155, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[256, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[619, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1204, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[792, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1338, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[58, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[59, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1339, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[60, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1340, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[936, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[61, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[620, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[385, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1205, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[988, "polars.Series.bin.reinterpret", false]], "rename() (polars.dataframe method)": [[257, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[879, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1206, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[715, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1295, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[793, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[621, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[622, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[450, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[688, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1207, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1061, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1267, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[689, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1268, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[258, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[690, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1269, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[623, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1208, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[451, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1062, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[624, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1209, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[10, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[259, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[625, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[371, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[545, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[691, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[880, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1210, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[975, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1159, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1270, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[626, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1211, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[627, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1212, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[260, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[628, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[881, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[794, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[795, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[629, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1213, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[630, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1214, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[631, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[632, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1215, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[633, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[634, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1216, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[635, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[636, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1217, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[637, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[638, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1218, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[639, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[640, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1219, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[641, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1220, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[642, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[643, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1221, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[644, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[645, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1222, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[646, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[580, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[647, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[452, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1223, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1063, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[648, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1224, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[261, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[262, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[263, "polars.DataFrame.rows_by_key", false]], "rowserror": [[118, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[264, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[649, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[546, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1225, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1160, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[11, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[12, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[156, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[157, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[158, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[159, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[160, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[161, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[162, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[7, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1226, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[265, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[882, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1296, "polars.Series.struct.schema", false]], "schemaerror": [[121, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[122, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[650, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1227, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[453, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1064, "polars.Series.dt.second", false]], "select() (in module polars)": [[796, "polars.select", false]], "select() (polars.dataframe method)": [[266, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[883, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[267, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[884, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[268, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[581, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[885, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[176, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1228, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[13, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[14, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[15, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[547, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1161, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[16, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[17, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[18, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[19, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[548, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1162, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[177, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[163, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[269, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[651, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[886, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1229, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[20, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[549, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1163, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[22, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[23, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[24, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[25, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[26, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[30, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[31, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[32, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[33, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[34, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[550, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1164, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[35, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[270, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1230, "polars.Series.shape", false]], "shapeerror": [[123, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[271, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[652, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[372, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[551, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[887, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1231, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[976, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1165, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[582, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[888, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[164, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[653, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1232, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[272, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1233, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[654, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1234, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[655, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1235, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[938, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[656, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1236, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[657, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1237, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[53, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[54, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[55, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[386, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[989, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[658, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1238, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[273, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[659, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[552, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[692, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[889, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1239, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1166, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1271, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[274, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[660, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[373, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[553, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[890, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1240, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[977, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1167, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[661, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[693, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1272, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[694, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1273, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[695, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1274, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[797, "polars.sql", false]], "sql() (polars.dataframe method)": [[275, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[891, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[798, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1355, "polars.SQLContext", false]], "sqlinterfaceerror": [[119, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[120, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[662, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1241, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[938, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[387, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[404, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[696, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[990, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1007, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1275, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[36, "polars.Config.state", false]], "std() (in module polars)": [[799, "polars.std", false]], "std() (polars.dataframe method)": [[276, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[663, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[374, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[554, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[892, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1242, "polars.Series.std", false]], "std() (polars.series.arr method)": [[978, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1168, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[454, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1065, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[87, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[938, "polars.selectors.string", false]], "stringcache (class in polars)": [[56, "polars.StringCache", false]], "stringcachemismatcherror": [[124, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[697, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1276, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[698, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1277, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[699, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1278, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[700, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1279, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[701, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1280, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[702, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1281, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[88, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[800, "polars.struct", false]], "structfieldnotfounderror": [[125, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[332, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[718, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[596, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[597, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[801, "polars.sum", false]], "sum() (polars.dataframe method)": [[277, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[321, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[719, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[375, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[555, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[893, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1298, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[979, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1169, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[802, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[278, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1341, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[803, "polars.tail", false]], "tail() (polars.dataframe method)": [[279, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[322, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[720, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[556, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[703, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[894, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1299, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1170, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1282, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[721, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1300, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[722, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1301, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[938, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[178, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[179, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[89, "polars.datatypes.Time", false]], "time() (in module polars)": [[804, "polars.time", false]], "time() (in module polars.selectors)": [[938, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[455, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1066, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[805, "polars.time_range", false]], "time_ranges() (in module polars)": [[806, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[456, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1067, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[557, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1171, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[280, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1302, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[704, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1283, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[705, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1284, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[706, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1285, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[281, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[282, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[283, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1303, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1304, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[284, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1305, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[707, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1286, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[285, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1306, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[376, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1307, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[980, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1008, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[598, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[708, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1287, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[286, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1308, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[287, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1309, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[723, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1310, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[288, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[457, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1068, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[289, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[377, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[558, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[981, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1172, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[709, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1288, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[710, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1289, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[290, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1311, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[599, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[711, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1290, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[126, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[291, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[724, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[895, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1312, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[725, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[458, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1069, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[459, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1070, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[460, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1071, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[461, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1072, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[462, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1073, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[463, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1074, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[464, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1075, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[292, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[583, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[726, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[465, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1076, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[90, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[91, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[92, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[93, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[584, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[293, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[727, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[378, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[559, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[896, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1313, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[982, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1173, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[728, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1314, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[94, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[294, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[716, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[897, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1297, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[295, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[898, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1342, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[938, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[127, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[296, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[128, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[297, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[899, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[729, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1315, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[298, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1009, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[180, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[95, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[730, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1316, "polars.Series.value_counts", false]], "var() (in module polars)": [[807, "polars.var", false]], "var() (polars.dataframe method)": [[299, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[731, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[379, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[560, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[900, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1317, "polars.Series.var", false]], "var() (polars.series.arr method)": [[983, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1174, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[300, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[466, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1077, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[467, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1078, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[808, "polars.when", false]], "where() (polars.expr method)": [[732, "polars.Expr.where", false]], "width (polars.dataframe property)": [[301, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[901, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[302, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[902, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[303, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[903, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[904, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[717, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[304, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[905, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[305, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[906, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[468, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1079, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[41, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[42, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[43, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[44, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[45, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[46, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[47, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[48, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[49, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[585, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[50, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[51, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[733, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[469, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1080, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[809, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[712, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1291, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1318, "polars.Series.zip_with", false]]}, "objects": {"polars": [[2, 0, 1, "", "Catalog"], [37, 0, 1, "", "CredentialProvider"], [38, 0, 1, "", "CredentialProviderAWS"], [39, 0, 1, "", "CredentialProviderAzure"], [40, 0, 1, "", "CredentialProviderGCP"], [1355, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 4, 1, "", "align_frames"], [734, 4, 1, "", "all"], [735, 4, 1, "", "all_horizontal"], [736, 4, 1, "", "any"], [737, 4, 1, "", "any_horizontal"], [738, 4, 1, "", "approx_n_unique"], [739, 4, 1, "", "arange"], [740, 4, 1, "", "arctan2"], [741, 4, 1, "", "arctan2d"], [742, 4, 1, "", "arg_sort_by"], [743, 4, 1, "", "arg_where"], [62, 4, 1, "", "build_info"], [744, 4, 1, "", "business_day_count"], [745, 4, 1, "", "coalesce"], [63, 4, 1, "", "collect_all"], [64, 4, 1, "", "collect_all_async"], [65, 4, 1, "", "concat"], [746, 4, 1, "", "concat_arr"], [747, 4, 1, "", "concat_list"], [748, 4, 1, "", "concat_str"], [749, 4, 1, "", "corr"], [750, 4, 1, "", "count"], [751, 4, 1, "", "cov"], [752, 4, 1, "", "cum_count"], [753, 4, 1, "", "cum_fold"], [754, 4, 1, "", "cum_reduce"], [755, 4, 1, "", "cum_sum"], [756, 4, 1, "", "cum_sum_horizontal"], [757, 4, 1, "", "date"], [758, 4, 1, "", "date_range"], [759, 4, 1, "", "date_ranges"], [760, 4, 1, "", "datetime"], [761, 4, 1, "", "datetime_range"], [762, 4, 1, "", "datetime_ranges"], [96, 4, 1, "", "disable_string_cache"], [763, 4, 1, "", "duration"], [764, 4, 1, "", "element"], [97, 4, 1, "", "enable_string_cache"], [98, 4, 1, "", "escape_regex"], [765, 4, 1, "", "exclude"], [766, 4, 1, "", "first"], [767, 4, 1, "", "fold"], [768, 4, 1, "", "format"], [129, 4, 1, "", "from_arrow"], [130, 4, 1, "", "from_dataframe"], [131, 4, 1, "", "from_dict"], [132, 4, 1, "", "from_dicts"], [769, 4, 1, "", "from_epoch"], [133, 4, 1, "", "from_numpy"], [134, 4, 1, "", "from_pandas"], [135, 4, 1, "", "from_records"], [136, 4, 1, "", "from_repr"], [137, 4, 1, "", "get_index_type"], [770, 4, 1, "", "groups"], [771, 4, 1, "", "head"], [772, 4, 1, "", "implode"], [773, 4, 1, "", "int_range"], [774, 4, 1, "", "int_ranges"], [139, 4, 1, "", "json_normalize"], [775, 4, 1, "", "last"], [776, 4, 1, "", "len"], [777, 4, 1, "", "linear_space"], [778, 4, 1, "", "lit"], [779, 4, 1, "", "map_batches"], [780, 4, 1, "", "map_groups"], [781, 4, 1, "", "max"], [782, 4, 1, "", "max_horizontal"], [783, 4, 1, "", "mean"], [784, 4, 1, "", "mean_horizontal"], [785, 4, 1, "", "median"], [786, 4, 1, "", "min"], [787, 4, 1, "", "min_horizontal"], [788, 4, 1, "", "n_unique"], [789, 4, 1, "", "nth"], [790, 4, 1, "", "ones"], [936, 6, 0, "-", "plugins"], [791, 4, 1, "", "quantile"], [140, 4, 1, "", "read_avro"], [141, 4, 1, "", "read_clipboard"], [142, 4, 1, "", "read_csv"], [143, 4, 1, "", "read_csv_batched"], [144, 4, 1, "", "read_database"], [145, 4, 1, "", "read_database_uri"], [146, 4, 1, "", "read_delta"], [147, 4, 1, "", "read_excel"], [148, 4, 1, "", "read_ipc"], [149, 4, 1, "", "read_ipc_schema"], [150, 4, 1, "", "read_ipc_stream"], [151, 4, 1, "", "read_json"], [152, 4, 1, "", "read_ndjson"], [153, 4, 1, "", "read_ods"], [154, 4, 1, "", "read_parquet"], [155, 4, 1, "", "read_parquet_schema"], [792, 4, 1, "", "reduce"], [793, 4, 1, "", "repeat"], [794, 4, 1, "", "rolling_corr"], [795, 4, 1, "", "rolling_cov"], [156, 4, 1, "", "scan_csv"], [157, 4, 1, "", "scan_delta"], [158, 4, 1, "", "scan_iceberg"], [159, 4, 1, "", "scan_ipc"], [160, 4, 1, "", "scan_ndjson"], [161, 4, 1, "", "scan_parquet"], [162, 4, 1, "", "scan_pyarrow_dataset"], [796, 4, 1, "", "select"], [938, 6, 0, "-", "selectors"], [163, 4, 1, "", "set_random_seed"], [164, 4, 1, "", "show_versions"], [797, 4, 1, "", "sql"], [798, 4, 1, "", "sql_expr"], [799, 4, 1, "", "std"], [800, 4, 1, "", "struct"], [801, 4, 1, "", "sum"], [802, 4, 1, "", "sum_horizontal"], [803, 4, 1, "", "tail"], [178, 4, 1, "", "thread_pool_size"], [179, 4, 1, "", "threadpool_size"], [804, 4, 1, "", "time"], [805, 4, 1, "", "time_range"], [806, 4, 1, "", "time_ranges"], [180, 4, 1, "", "using_string_cache"], [807, 4, 1, "", "var"], [808, 4, 1, "", "when"], [809, 4, 1, "", "zeros"]], "polars.Catalog": [[2, 1, 1, "", "__init__"], [3, 1, 1, "", "get_table_info"], [4, 1, 1, "", "list_catalogs"], [5, 1, 1, "", "list_schemas"], [6, 1, 1, "", "list_tables"], [7, 1, 1, "", "scan_table"]], "polars.Config": [[8, 1, 1, "", "load"], [9, 1, 1, "", "load_from_file"], [10, 1, 1, "", "restore_defaults"], [11, 1, 1, "", "save"], [12, 1, 1, "", "save_to_file"], [13, 1, 1, "", "set_ascii_tables"], [14, 1, 1, "", "set_auto_structify"], [15, 1, 1, "", "set_decimal_separator"], [16, 1, 1, "", "set_float_precision"], [17, 1, 1, "", "set_fmt_float"], [18, 1, 1, "", "set_fmt_str_lengths"], [19, 1, 1, "", "set_fmt_table_cell_list_len"], [20, 1, 1, "", "set_streaming_chunk_size"], [21, 1, 1, "", "set_tbl_cell_alignment"], [22, 1, 1, "", "set_tbl_cell_numeric_alignment"], [23, 1, 1, "", "set_tbl_cols"], [24, 1, 1, "", "set_tbl_column_data_type_inline"], [25, 1, 1, "", "set_tbl_dataframe_shape_below"], [26, 1, 1, "", "set_tbl_formatting"], [27, 1, 1, "", "set_tbl_hide_column_data_types"], [28, 1, 1, "", "set_tbl_hide_column_names"], [29, 1, 1, "", "set_tbl_hide_dataframe_shape"], [30, 1, 1, "", "set_tbl_hide_dtype_separator"], [31, 1, 1, "", "set_tbl_rows"], [32, 1, 1, "", "set_tbl_width_chars"], [33, 1, 1, "", "set_thousands_separator"], [34, 1, 1, "", "set_trim_decimal_zeros"], [35, 1, 1, "", "set_verbose"], [36, 1, 1, "", "state"]], "polars.CredentialProvider": [[37, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[38, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[39, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[40, 1, 1, "", "__init__"]], "polars.DataFrame": [[184, 1, 1, "", "__array__"], [185, 1, 1, "", "__arrow_c_stream__"], [186, 1, 1, "", "__dataframe__"], [187, 1, 1, "", "__getitem__"], [188, 1, 1, "", "approx_n_unique"], [189, 1, 1, "", "bottom_k"], [190, 1, 1, "", "cast"], [191, 1, 1, "", "clear"], [192, 1, 1, "", "clone"], [193, 1, 1, "", "collect_schema"], [194, 2, 1, "", "columns"], [195, 1, 1, "", "corr"], [196, 1, 1, "", "count"], [197, 1, 1, "", "describe"], [198, 1, 1, "", "deserialize"], [199, 1, 1, "", "drop"], [200, 1, 1, "", "drop_in_place"], [201, 1, 1, "", "drop_nans"], [202, 1, 1, "", "drop_nulls"], [203, 2, 1, "", "dtypes"], [204, 1, 1, "", "equals"], [205, 1, 1, "", "estimated_size"], [206, 1, 1, "", "explode"], [207, 1, 1, "", "extend"], [208, 1, 1, "", "fill_nan"], [209, 1, 1, "", "fill_null"], [210, 1, 1, "", "filter"], [211, 2, 1, "", "flags"], [212, 1, 1, "", "fold"], [213, 1, 1, "", "gather_every"], [214, 1, 1, "", "get_column"], [215, 1, 1, "", "get_column_index"], [216, 1, 1, "", "get_columns"], [217, 1, 1, "", "glimpse"], [218, 1, 1, "", "group_by"], [219, 1, 1, "", "group_by_dynamic"], [220, 1, 1, "", "hash_rows"], [221, 1, 1, "", "head"], [222, 2, 1, "", "height"], [223, 1, 1, "", "hstack"], [224, 1, 1, "", "insert_column"], [225, 1, 1, "", "interpolate"], [226, 1, 1, "", "is_duplicated"], [227, 1, 1, "", "is_empty"], [228, 1, 1, "", "is_unique"], [229, 1, 1, "", "item"], [230, 1, 1, "", "iter_columns"], [231, 1, 1, "", "iter_rows"], [232, 1, 1, "", "iter_slices"], [233, 1, 1, "", "join"], [234, 1, 1, "", "join_asof"], [235, 1, 1, "", "join_where"], [236, 1, 1, "", "lazy"], [237, 1, 1, "", "limit"], [238, 1, 1, "", "map_rows"], [239, 1, 1, "", "max"], [240, 1, 1, "", "max_horizontal"], [241, 1, 1, "", "mean"], [242, 1, 1, "", "mean_horizontal"], [243, 1, 1, "", "median"], [244, 1, 1, "", "melt"], [245, 1, 1, "", "merge_sorted"], [246, 1, 1, "", "min"], [247, 1, 1, "", "min_horizontal"], [248, 1, 1, "", "n_chunks"], [249, 1, 1, "", "n_unique"], [250, 1, 1, "", "null_count"], [251, 1, 1, "", "partition_by"], [252, 1, 1, "", "pipe"], [253, 1, 1, "", "pivot"], [331, 2, 1, "", "plot"], [254, 1, 1, "", "product"], [255, 1, 1, "", "quantile"], [256, 1, 1, "", "rechunk"], [257, 1, 1, "", "rename"], [258, 1, 1, "", "replace_column"], [259, 1, 1, "", "reverse"], [260, 1, 1, "", "rolling"], [261, 1, 1, "", "row"], [262, 1, 1, "", "rows"], [263, 1, 1, "", "rows_by_key"], [264, 1, 1, "", "sample"], [265, 2, 1, "", "schema"], [266, 1, 1, "", "select"], [267, 1, 1, "", "select_seq"], [268, 1, 1, "", "serialize"], [269, 1, 1, "", "set_sorted"], [270, 2, 1, "", "shape"], [271, 1, 1, "", "shift"], [272, 1, 1, "", "shrink_to_fit"], [273, 1, 1, "", "slice"], [274, 1, 1, "", "sort"], [275, 1, 1, "", "sql"], [276, 1, 1, "", "std"], [332, 2, 1, "", "style"], [277, 1, 1, "", "sum"], [278, 1, 1, "", "sum_horizontal"], [279, 1, 1, "", "tail"], [280, 1, 1, "", "to_arrow"], [281, 1, 1, "", "to_dict"], [282, 1, 1, "", "to_dicts"], [283, 1, 1, "", "to_dummies"], [284, 1, 1, "", "to_init_repr"], [285, 1, 1, "", "to_jax"], [286, 1, 1, "", "to_numpy"], [287, 1, 1, "", "to_pandas"], [288, 1, 1, "", "to_series"], [289, 1, 1, "", "to_struct"], [290, 1, 1, "", "to_torch"], [291, 1, 1, "", "top_k"], [292, 1, 1, "", "transpose"], [293, 1, 1, "", "unique"], [294, 1, 1, "", "unnest"], [295, 1, 1, "", "unpivot"], [296, 1, 1, "", "unstack"], [297, 1, 1, "", "update"], [298, 1, 1, "", "upsample"], [299, 1, 1, "", "var"], [300, 1, 1, "", "vstack"], [301, 2, 1, "", "width"], [302, 1, 1, "", "with_columns"], [303, 1, 1, "", "with_columns_seq"], [304, 1, 1, "", "with_row_count"], [305, 1, 1, "", "with_row_index"], [41, 1, 1, "", "write_avro"], [42, 1, 1, "", "write_clipboard"], [43, 1, 1, "", "write_csv"], [44, 1, 1, "", "write_database"], [45, 1, 1, "", "write_delta"], [46, 1, 1, "", "write_excel"], [47, 1, 1, "", "write_ipc"], [48, 1, 1, "", "write_ipc_stream"], [49, 1, 1, "", "write_json"], [50, 1, 1, "", "write_ndjson"], [51, 1, 1, "", "write_parquet"]], "polars.Expr": [[336, 1, 1, "", "abs"], [337, 1, 1, "", "add"], [338, 1, 1, "", "agg_groups"], [339, 1, 1, "", "alias"], [340, 1, 1, "", "all"], [341, 1, 1, "", "and_"], [342, 1, 1, "", "any"], [343, 1, 1, "", "append"], [344, 1, 1, "", "approx_n_unique"], [345, 1, 1, "", "arccos"], [346, 1, 1, "", "arccosh"], [347, 1, 1, "", "arcsin"], [348, 1, 1, "", "arcsinh"], [349, 1, 1, "", "arctan"], [350, 1, 1, "", "arctanh"], [351, 1, 1, "", "arg_max"], [352, 1, 1, "", "arg_min"], [353, 1, 1, "", "arg_sort"], [354, 1, 1, "", "arg_true"], [355, 1, 1, "", "arg_unique"], [380, 1, 1, "", "backward_fill"], [388, 1, 1, "", "bitwise_and"], [389, 1, 1, "", "bitwise_count_ones"], [390, 1, 1, "", "bitwise_count_zeros"], [391, 1, 1, "", "bitwise_leading_ones"], [392, 1, 1, "", "bitwise_leading_zeros"], [393, 1, 1, "", "bitwise_or"], [394, 1, 1, "", "bitwise_trailing_ones"], [395, 1, 1, "", "bitwise_trailing_zeros"], [396, 1, 1, "", "bitwise_xor"], [397, 1, 1, "", "bottom_k"], [398, 1, 1, "", "bottom_k_by"], [399, 1, 1, "", "cast"], [405, 1, 1, "", "cbrt"], [406, 1, 1, "", "ceil"], [407, 1, 1, "", "clip"], [408, 1, 1, "", "cos"], [409, 1, 1, "", "cosh"], [410, 1, 1, "", "cot"], [411, 1, 1, "", "count"], [412, 1, 1, "", "cum_count"], [413, 1, 1, "", "cum_max"], [414, 1, 1, "", "cum_min"], [415, 1, 1, "", "cum_prod"], [416, 1, 1, "", "cum_sum"], [417, 1, 1, "", "cumulative_eval"], [418, 1, 1, "", "cut"], [419, 1, 1, "", "degrees"], [420, 1, 1, "", "deserialize"], [421, 1, 1, "", "diff"], [422, 1, 1, "", "dot"], [423, 1, 1, "", "drop_nans"], [424, 1, 1, "", "drop_nulls"], [470, 1, 1, "", "entropy"], [471, 1, 1, "", "eq"], [472, 1, 1, "", "eq_missing"], [473, 1, 1, "", "ewm_mean"], [474, 1, 1, "", "ewm_mean_by"], [475, 1, 1, "", "ewm_std"], [476, 1, 1, "", "ewm_var"], [477, 1, 1, "", "exclude"], [478, 1, 1, "", "exp"], [479, 1, 1, "", "explode"], [480, 1, 1, "", "extend_constant"], [481, 1, 1, "", "fill_nan"], [482, 1, 1, "", "fill_null"], [483, 1, 1, "", "filter"], [484, 1, 1, "", "first"], [485, 1, 1, "", "flatten"], [486, 1, 1, "", "floor"], [487, 1, 1, "", "floordiv"], [488, 1, 1, "", "forward_fill"], [489, 1, 1, "", "from_json"], [490, 1, 1, "", "gather"], [491, 1, 1, "", "gather_every"], [492, 1, 1, "", "ge"], [493, 1, 1, "", "get"], [494, 1, 1, "", "gt"], [495, 1, 1, "", "has_nulls"], [496, 1, 1, "", "hash"], [497, 1, 1, "", "head"], [498, 1, 1, "", "hist"], [499, 1, 1, "", "implode"], [500, 1, 1, "", "index_of"], [501, 1, 1, "", "inspect"], [502, 1, 1, "", "interpolate"], [503, 1, 1, "", "interpolate_by"], [504, 1, 1, "", "is_between"], [505, 1, 1, "", "is_duplicated"], [506, 1, 1, "", "is_finite"], [507, 1, 1, "", "is_first_distinct"], [508, 1, 1, "", "is_in"], [509, 1, 1, "", "is_infinite"], [510, 1, 1, "", "is_last_distinct"], [511, 1, 1, "", "is_nan"], [512, 1, 1, "", "is_not_nan"], [513, 1, 1, "", "is_not_null"], [514, 1, 1, "", "is_null"], [515, 1, 1, "", "is_unique"], [516, 1, 1, "", "kurtosis"], [517, 1, 1, "", "last"], [518, 1, 1, "", "le"], [519, 1, 1, "", "len"], [520, 1, 1, "", "limit"], [561, 1, 1, "", "log"], [562, 1, 1, "", "log10"], [563, 1, 1, "", "log1p"], [564, 1, 1, "", "lower_bound"], [565, 1, 1, "", "lt"], [566, 1, 1, "", "map_batches"], [567, 1, 1, "", "map_elements"], [568, 1, 1, "", "max"], [569, 1, 1, "", "mean"], [570, 1, 1, "", "median"], [586, 1, 1, "", "min"], [587, 1, 1, "", "mod"], [588, 1, 1, "", "mode"], [589, 1, 1, "", "mul"], [590, 1, 1, "", "n_unique"], [600, 1, 1, "", "nan_max"], [601, 1, 1, "", "nan_min"], [602, 1, 1, "", "ne"], [603, 1, 1, "", "ne_missing"], [604, 1, 1, "", "neg"], [605, 1, 1, "", "not_"], [606, 1, 1, "", "null_count"], [607, 1, 1, "", "or_"], [608, 1, 1, "", "over"], [609, 1, 1, "", "pct_change"], [610, 1, 1, "", "peak_max"], [611, 1, 1, "", "peak_min"], [612, 1, 1, "", "pipe"], [613, 1, 1, "", "pow"], [614, 1, 1, "", "product"], [615, 1, 1, "", "qcut"], [616, 1, 1, "", "quantile"], [617, 1, 1, "", "radians"], [618, 1, 1, "", "rank"], [619, 1, 1, "", "rechunk"], [620, 1, 1, "", "reinterpret"], [621, 1, 1, "", "repeat_by"], [622, 1, 1, "", "replace"], [623, 1, 1, "", "replace_strict"], [624, 1, 1, "", "reshape"], [625, 1, 1, "", "reverse"], [626, 1, 1, "", "rle"], [627, 1, 1, "", "rle_id"], [628, 1, 1, "", "rolling"], [629, 1, 1, "", "rolling_map"], [630, 1, 1, "", "rolling_max"], [631, 1, 1, "", "rolling_max_by"], [632, 1, 1, "", "rolling_mean"], [633, 1, 1, "", "rolling_mean_by"], [634, 1, 1, "", "rolling_median"], [635, 1, 1, "", "rolling_median_by"], [636, 1, 1, "", "rolling_min"], [637, 1, 1, "", "rolling_min_by"], [638, 1, 1, "", "rolling_quantile"], [639, 1, 1, "", "rolling_quantile_by"], [640, 1, 1, "", "rolling_skew"], [641, 1, 1, "", "rolling_std"], [642, 1, 1, "", "rolling_std_by"], [643, 1, 1, "", "rolling_sum"], [644, 1, 1, "", "rolling_sum_by"], [645, 1, 1, "", "rolling_var"], [646, 1, 1, "", "rolling_var_by"], [647, 1, 1, "", "round"], [648, 1, 1, "", "round_sig_figs"], [649, 1, 1, "", "sample"], [650, 1, 1, "", "search_sorted"], [651, 1, 1, "", "set_sorted"], [652, 1, 1, "", "shift"], [653, 1, 1, "", "shrink_dtype"], [654, 1, 1, "", "shuffle"], [655, 1, 1, "", "sign"], [656, 1, 1, "", "sin"], [657, 1, 1, "", "sinh"], [658, 1, 1, "", "skew"], [659, 1, 1, "", "slice"], [660, 1, 1, "", "sort"], [661, 1, 1, "", "sort_by"], [662, 1, 1, "", "sqrt"], [663, 1, 1, "", "std"], [718, 1, 1, "", "sub"], [719, 1, 1, "", "sum"], [720, 1, 1, "", "tail"], [721, 1, 1, "", "tan"], [722, 1, 1, "", "tanh"], [723, 1, 1, "", "to_physical"], [724, 1, 1, "", "top_k"], [725, 1, 1, "", "top_k_by"], [726, 1, 1, "", "truediv"], [727, 1, 1, "", "unique"], [728, 1, 1, "", "unique_counts"], [729, 1, 1, "", "upper_bound"], [730, 1, 1, "", "value_counts"], [731, 1, 1, "", "var"], [732, 1, 1, "", "where"], [733, 1, 1, "", "xor"]], "polars.Expr.arr": [[356, 1, 1, "", "all"], [357, 1, 1, "", "any"], [358, 1, 1, "", "arg_max"], [359, 1, 1, "", "arg_min"], [360, 1, 1, "", "contains"], [361, 1, 1, "", "count_matches"], [362, 1, 1, "", "explode"], [363, 1, 1, "", "first"], [364, 1, 1, "", "get"], [365, 1, 1, "", "join"], [366, 1, 1, "", "last"], [367, 1, 1, "", "max"], [368, 1, 1, "", "median"], [369, 1, 1, "", "min"], [370, 1, 1, "", "n_unique"], [371, 1, 1, "", "reverse"], [372, 1, 1, "", "shift"], [373, 1, 1, "", "sort"], [374, 1, 1, "", "std"], [375, 1, 1, "", "sum"], [376, 1, 1, "", "to_list"], [377, 1, 1, "", "to_struct"], [378, 1, 1, "", "unique"], [379, 1, 1, "", "var"]], "polars.Expr.bin": [[381, 1, 1, "", "contains"], [382, 1, 1, "", "decode"], [383, 1, 1, "", "encode"], [384, 1, 1, "", "ends_with"], [385, 1, 1, "", "reinterpret"], [386, 1, 1, "", "size"], [387, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[400, 1, 1, "", "ends_with"], [401, 1, 1, "", "get_categories"], [402, 1, 1, "", "len_bytes"], [403, 1, 1, "", "len_chars"], [404, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[425, 1, 1, "", "add_business_days"], [426, 1, 1, "", "base_utc_offset"], [427, 1, 1, "", "cast_time_unit"], [428, 1, 1, "", "century"], [429, 1, 1, "", "combine"], [430, 1, 1, "", "convert_time_zone"], [431, 1, 1, "", "date"], [432, 1, 1, "", "datetime"], [433, 1, 1, "", "day"], [434, 1, 1, "", "dst_offset"], [435, 1, 1, "", "epoch"], [436, 1, 1, "", "hour"], [437, 1, 1, "", "is_leap_year"], [438, 1, 1, "", "iso_year"], [439, 1, 1, "", "microsecond"], [440, 1, 1, "", "millennium"], [441, 1, 1, "", "millisecond"], [442, 1, 1, "", "minute"], [443, 1, 1, "", "month"], [444, 1, 1, "", "month_end"], [445, 1, 1, "", "month_start"], [446, 1, 1, "", "nanosecond"], [447, 1, 1, "", "offset_by"], [448, 1, 1, "", "ordinal_day"], [449, 1, 1, "", "quarter"], [450, 1, 1, "", "replace"], [451, 1, 1, "", "replace_time_zone"], [452, 1, 1, "", "round"], [453, 1, 1, "", "second"], [454, 1, 1, "", "strftime"], [455, 1, 1, "", "time"], [456, 1, 1, "", "timestamp"], [457, 1, 1, "", "to_string"], [458, 1, 1, "", "total_days"], [459, 1, 1, "", "total_hours"], [460, 1, 1, "", "total_microseconds"], [461, 1, 1, "", "total_milliseconds"], [462, 1, 1, "", "total_minutes"], [463, 1, 1, "", "total_nanoseconds"], [464, 1, 1, "", "total_seconds"], [465, 1, 1, "", "truncate"], [466, 1, 1, "", "week"], [467, 1, 1, "", "weekday"], [468, 1, 1, "", "with_time_unit"], [469, 1, 1, "", "year"]], "polars.Expr.list": [[521, 1, 1, "", "all"], [522, 1, 1, "", "any"], [523, 1, 1, "", "arg_max"], [524, 1, 1, "", "arg_min"], [525, 1, 1, "", "concat"], [526, 1, 1, "", "contains"], [527, 1, 1, "", "count_matches"], [528, 1, 1, "", "diff"], [529, 1, 1, "", "drop_nulls"], [530, 1, 1, "", "eval"], [531, 1, 1, "", "explode"], [532, 1, 1, "", "first"], [533, 1, 1, "", "gather"], [534, 1, 1, "", "gather_every"], [535, 1, 1, "", "get"], [536, 1, 1, "", "head"], [537, 1, 1, "", "join"], [538, 1, 1, "", "last"], [539, 1, 1, "", "len"], [540, 1, 1, "", "max"], [541, 1, 1, "", "mean"], [542, 1, 1, "", "median"], [543, 1, 1, "", "min"], [544, 1, 1, "", "n_unique"], [545, 1, 1, "", "reverse"], [546, 1, 1, "", "sample"], [547, 1, 1, "", "set_difference"], [548, 1, 1, "", "set_intersection"], [549, 1, 1, "", "set_symmetric_difference"], [550, 1, 1, "", "set_union"], [551, 1, 1, "", "shift"], [552, 1, 1, "", "slice"], [553, 1, 1, "", "sort"], [554, 1, 1, "", "std"], [555, 1, 1, "", "sum"], [556, 1, 1, "", "tail"], [557, 1, 1, "", "to_array"], [558, 1, 1, "", "to_struct"], [559, 1, 1, "", "unique"], [560, 1, 1, "", "var"]], "polars.Expr.meta": [[571, 1, 1, "", "eq"], [572, 1, 1, "", "has_multiple_outputs"], [573, 1, 1, "", "is_column"], [574, 1, 1, "", "is_column_selection"], [575, 1, 1, "", "is_literal"], [576, 1, 1, "", "is_regex_projection"], [577, 1, 1, "", "ne"], [578, 1, 1, "", "output_name"], [579, 1, 1, "", "pop"], [580, 1, 1, "", "root_names"], [581, 1, 1, "", "serialize"], [582, 1, 1, "", "show_graph"], [583, 1, 1, "", "tree_format"], [584, 1, 1, "", "undo_aliases"], [585, 1, 1, "", "write_json"]], "polars.Expr.name": [[591, 1, 1, "", "keep"], [592, 1, 1, "", "map"], [593, 1, 1, "", "map_fields"], [594, 1, 1, "", "prefix"], [595, 1, 1, "", "prefix_fields"], [596, 1, 1, "", "suffix"], [597, 1, 1, "", "suffix_fields"], [598, 1, 1, "", "to_lowercase"], [599, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[664, 1, 1, "", "concat"], [665, 1, 1, "", "contains"], [666, 1, 1, "", "contains_any"], [667, 1, 1, "", "count_matches"], [668, 1, 1, "", "decode"], [669, 1, 1, "", "encode"], [670, 1, 1, "", "ends_with"], [671, 1, 1, "", "escape_regex"], [672, 1, 1, "", "explode"], [673, 1, 1, "", "extract"], [674, 1, 1, "", "extract_all"], [675, 1, 1, "", "extract_groups"], [676, 1, 1, "", "extract_many"], [677, 1, 1, "", "find"], [678, 1, 1, "", "find_many"], [679, 1, 1, "", "head"], [680, 1, 1, "", "join"], [681, 1, 1, "", "json_decode"], [682, 1, 1, "", "json_path_match"], [683, 1, 1, "", "len_bytes"], [684, 1, 1, "", "len_chars"], [685, 1, 1, "", "normalize"], [686, 1, 1, "", "pad_end"], [687, 1, 1, "", "pad_start"], [688, 1, 1, "", "replace"], [689, 1, 1, "", "replace_all"], [690, 1, 1, "", "replace_many"], [691, 1, 1, "", "reverse"], [692, 1, 1, "", "slice"], [693, 1, 1, "", "split"], [694, 1, 1, "", "split_exact"], [695, 1, 1, "", "splitn"], [696, 1, 1, "", "starts_with"], [697, 1, 1, "", "strip_chars"], [698, 1, 1, "", "strip_chars_end"], [699, 1, 1, "", "strip_chars_start"], [700, 1, 1, "", "strip_prefix"], [701, 1, 1, "", "strip_suffix"], [702, 1, 1, "", "strptime"], [703, 1, 1, "", "tail"], [704, 1, 1, "", "to_date"], [705, 1, 1, "", "to_datetime"], [706, 1, 1, "", "to_decimal"], [707, 1, 1, "", "to_integer"], [708, 1, 1, "", "to_lowercase"], [709, 1, 1, "", "to_time"], [710, 1, 1, "", "to_titlecase"], [711, 1, 1, "", "to_uppercase"], [712, 1, 1, "", "zfill"]], "polars.Expr.struct": [[713, 1, 1, "", "field"], [714, 1, 1, "", "json_encode"], [715, 1, 1, "", "rename_fields"], [716, 1, 1, "", "unnest"], [717, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[833, 1, 1, "", "approx_n_unique"], [834, 1, 1, "", "bottom_k"], [835, 1, 1, "", "cache"], [836, 1, 1, "", "cast"], [837, 1, 1, "", "clear"], [838, 1, 1, "", "clone"], [839, 1, 1, "", "collect"], [840, 1, 1, "", "collect_async"], [841, 1, 1, "", "collect_schema"], [842, 2, 1, "", "columns"], [843, 1, 1, "", "count"], [844, 1, 1, "", "describe"], [845, 1, 1, "", "deserialize"], [846, 1, 1, "", "drop"], [847, 1, 1, "", "drop_nans"], [848, 1, 1, "", "drop_nulls"], [849, 2, 1, "", "dtypes"], [850, 1, 1, "", "explain"], [851, 1, 1, "", "explode"], [852, 1, 1, "", "fill_nan"], [853, 1, 1, "", "fill_null"], [854, 1, 1, "", "filter"], [855, 1, 1, "", "first"], [856, 1, 1, "", "gather_every"], [857, 1, 1, "", "group_by"], [858, 1, 1, "", "group_by_dynamic"], [859, 1, 1, "", "head"], [860, 1, 1, "", "inspect"], [861, 1, 1, "", "interpolate"], [862, 1, 1, "", "join"], [863, 1, 1, "", "join_asof"], [864, 1, 1, "", "join_where"], [865, 1, 1, "", "last"], [866, 1, 1, "", "lazy"], [867, 1, 1, "", "limit"], [868, 1, 1, "", "map_batches"], [869, 1, 1, "", "max"], [870, 1, 1, "", "mean"], [871, 1, 1, "", "median"], [872, 1, 1, "", "melt"], [873, 1, 1, "", "merge_sorted"], [874, 1, 1, "", "min"], [875, 1, 1, "", "null_count"], [876, 1, 1, "", "pipe"], [877, 1, 1, "", "profile"], [878, 1, 1, "", "quantile"], [879, 1, 1, "", "rename"], [880, 1, 1, "", "reverse"], [881, 1, 1, "", "rolling"], [882, 2, 1, "", "schema"], [883, 1, 1, "", "select"], [884, 1, 1, "", "select_seq"], [885, 1, 1, "", "serialize"], [886, 1, 1, "", "set_sorted"], [887, 1, 1, "", "shift"], [888, 1, 1, "", "show_graph"], [52, 1, 1, "", "sink_csv"], [53, 1, 1, "", "sink_ipc"], [54, 1, 1, "", "sink_ndjson"], [55, 1, 1, "", "sink_parquet"], [889, 1, 1, "", "slice"], [890, 1, 1, "", "sort"], [891, 1, 1, "", "sql"], [892, 1, 1, "", "std"], [893, 1, 1, "", "sum"], [894, 1, 1, "", "tail"], [895, 1, 1, "", "top_k"], [896, 1, 1, "", "unique"], [897, 1, 1, "", "unnest"], [898, 1, 1, "", "unpivot"], [899, 1, 1, "", "update"], [900, 1, 1, "", "var"], [901, 2, 1, "", "width"], [902, 1, 1, "", "with_columns"], [903, 1, 1, "", "with_columns_seq"], [904, 1, 1, "", "with_context"], [905, 1, 1, "", "with_row_count"], [906, 1, 1, "", "with_row_index"]], "polars.SQLContext": [[1355, 1, 1, "", "__enter__"], [1355, 1, 1, "", "__exit__"], [1355, 1, 1, "", "__init__"], [1336, 1, 1, "", "execute"], [1337, 1, 1, "", "execute_global"], [1338, 1, 1, "", "register"], [1339, 1, 1, "", "register_globals"], [1340, 1, 1, "", "register_many"], [1341, 1, 1, "", "tables"], [1342, 1, 1, "", "unregister"]], "polars.Series": [[940, 1, 1, "", "__array__"], [941, 1, 1, "", "__arrow_c_stream__"], [942, 1, 1, "", "__getitem__"], [943, 1, 1, "", "abs"], [944, 1, 1, "", "alias"], [945, 1, 1, "", "all"], [946, 1, 1, "", "any"], [947, 1, 1, "", "append"], [948, 1, 1, "", "approx_n_unique"], [949, 1, 1, "", "arccos"], [950, 1, 1, "", "arccosh"], [951, 1, 1, "", "arcsin"], [952, 1, 1, "", "arcsinh"], [953, 1, 1, "", "arctan"], [954, 1, 1, "", "arctanh"], [955, 1, 1, "", "arg_max"], [956, 1, 1, "", "arg_min"], [957, 1, 1, "", "arg_sort"], [958, 1, 1, "", "arg_true"], [959, 1, 1, "", "arg_unique"], [991, 1, 1, "", "bitwise_and"], [992, 1, 1, "", "bitwise_count_ones"], [993, 1, 1, "", "bitwise_count_zeros"], [994, 1, 1, "", "bitwise_leading_ones"], [995, 1, 1, "", "bitwise_leading_zeros"], [996, 1, 1, "", "bitwise_or"], [997, 1, 1, "", "bitwise_trailing_ones"], [998, 1, 1, "", "bitwise_trailing_zeros"], [999, 1, 1, "", "bitwise_xor"], [1000, 1, 1, "", "bottom_k"], [1001, 1, 1, "", "cast"], [1010, 1, 1, "", "cbrt"], [1011, 1, 1, "", "ceil"], [1012, 1, 1, "", "chunk_lengths"], [1013, 1, 1, "", "clear"], [1014, 1, 1, "", "clip"], [1015, 1, 1, "", "clone"], [1016, 1, 1, "", "cos"], [1017, 1, 1, "", "cosh"], [1018, 1, 1, "", "cot"], [1019, 1, 1, "", "count"], [1020, 1, 1, "", "cum_count"], [1021, 1, 1, "", "cum_max"], [1022, 1, 1, "", "cum_min"], [1023, 1, 1, "", "cum_prod"], [1024, 1, 1, "", "cum_sum"], [1025, 1, 1, "", "cumulative_eval"], [1026, 1, 1, "", "cut"], [1027, 1, 1, "", "describe"], [1028, 1, 1, "", "diff"], [1029, 1, 1, "", "dot"], [1030, 1, 1, "", "drop_nans"], [1031, 1, 1, "", "drop_nulls"], [1081, 2, 1, "", "dtype"], [1082, 1, 1, "", "entropy"], [1083, 1, 1, "", "eq"], [1084, 1, 1, "", "eq_missing"], [1085, 1, 1, "", "equals"], [1086, 1, 1, "", "estimated_size"], [1087, 1, 1, "", "ewm_mean"], [1088, 1, 1, "", "ewm_mean_by"], [1089, 1, 1, "", "ewm_std"], [1090, 1, 1, "", "ewm_var"], [1091, 1, 1, "", "exp"], [1092, 1, 1, "", "explode"], [1093, 1, 1, "", "extend"], [1094, 1, 1, "", "extend_constant"], [1095, 1, 1, "", "fill_nan"], [1096, 1, 1, "", "fill_null"], [1097, 1, 1, "", "filter"], [1098, 1, 1, "", "first"], [1099, 2, 1, "", "flags"], [1100, 1, 1, "", "floor"], [1101, 1, 1, "", "gather"], [1102, 1, 1, "", "gather_every"], [1103, 1, 1, "", "ge"], [1104, 1, 1, "", "get_chunks"], [1105, 1, 1, "", "gt"], [1106, 1, 1, "", "has_nulls"], [1107, 1, 1, "", "has_validity"], [1108, 1, 1, "", "hash"], [1109, 1, 1, "", "head"], [1110, 1, 1, "", "hist"], [1111, 1, 1, "", "implode"], [1112, 1, 1, "", "index_of"], [1113, 1, 1, "", "interpolate"], [1114, 1, 1, "", "interpolate_by"], [1115, 1, 1, "", "is_between"], [1116, 1, 1, "", "is_duplicated"], [1117, 1, 1, "", "is_empty"], [1118, 1, 1, "", "is_finite"], [1119, 1, 1, "", "is_first_distinct"], [1120, 1, 1, "", "is_in"], [1121, 1, 1, "", "is_infinite"], [1122, 1, 1, "", "is_last_distinct"], [1123, 1, 1, "", "is_nan"], [1124, 1, 1, "", "is_not_nan"], [1125, 1, 1, "", "is_not_null"], [1126, 1, 1, "", "is_null"], [1127, 1, 1, "", "is_sorted"], [1128, 1, 1, "", "is_unique"], [1129, 1, 1, "", "item"], [1130, 1, 1, "", "kurtosis"], [1131, 1, 1, "", "last"], [1132, 1, 1, "", "le"], [1133, 1, 1, "", "len"], [1134, 1, 1, "", "limit"], [1175, 1, 1, "", "log"], [1176, 1, 1, "", "log10"], [1177, 1, 1, "", "log1p"], [1178, 1, 1, "", "lower_bound"], [1179, 1, 1, "", "lt"], [1180, 1, 1, "", "map_elements"], [1181, 1, 1, "", "max"], [1182, 1, 1, "", "mean"], [1183, 1, 1, "", "median"], [1184, 1, 1, "", "min"], [1185, 1, 1, "", "mode"], [1186, 1, 1, "", "n_chunks"], [1187, 1, 1, "", "n_unique"], [1188, 2, 1, "", "name"], [1189, 1, 1, "", "nan_max"], [1190, 1, 1, "", "nan_min"], [1191, 1, 1, "", "ne"], [1192, 1, 1, "", "ne_missing"], [1193, 1, 1, "", "new_from_index"], [1194, 1, 1, "", "not_"], [1195, 1, 1, "", "null_count"], [1196, 1, 1, "", "pct_change"], [1197, 1, 1, "", "peak_max"], [1198, 1, 1, "", "peak_min"], [1332, 2, 1, "", "plot"], [1199, 1, 1, "", "pow"], [1200, 1, 1, "", "product"], [1201, 1, 1, "", "qcut"], [1202, 1, 1, "", "quantile"], [1203, 1, 1, "", "rank"], [1204, 1, 1, "", "rechunk"], [1205, 1, 1, "", "reinterpret"], [1206, 1, 1, "", "rename"], [1207, 1, 1, "", "replace"], [1208, 1, 1, "", "replace_strict"], [1209, 1, 1, "", "reshape"], [1210, 1, 1, "", "reverse"], [1211, 1, 1, "", "rle"], [1212, 1, 1, "", "rle_id"], [1213, 1, 1, "", "rolling_map"], [1214, 1, 1, "", "rolling_max"], [1215, 1, 1, "", "rolling_mean"], [1216, 1, 1, "", "rolling_median"], [1217, 1, 1, "", "rolling_min"], [1218, 1, 1, "", "rolling_quantile"], [1219, 1, 1, "", "rolling_skew"], [1220, 1, 1, "", "rolling_std"], [1221, 1, 1, "", "rolling_sum"], [1222, 1, 1, "", "rolling_var"], [1223, 1, 1, "", "round"], [1224, 1, 1, "", "round_sig_figs"], [1225, 1, 1, "", "sample"], [1226, 1, 1, "", "scatter"], [1227, 1, 1, "", "search_sorted"], [1228, 1, 1, "", "set"], [1229, 1, 1, "", "set_sorted"], [1230, 2, 1, "", "shape"], [1231, 1, 1, "", "shift"], [1232, 1, 1, "", "shrink_dtype"], [1233, 1, 1, "", "shrink_to_fit"], [1234, 1, 1, "", "shuffle"], [1235, 1, 1, "", "sign"], [1236, 1, 1, "", "sin"], [1237, 1, 1, "", "sinh"], [1238, 1, 1, "", "skew"], [1239, 1, 1, "", "slice"], [1240, 1, 1, "", "sort"], [1241, 1, 1, "", "sqrt"], [1242, 1, 1, "", "std"], [1298, 1, 1, "", "sum"], [1299, 1, 1, "", "tail"], [1300, 1, 1, "", "tan"], [1301, 1, 1, "", "tanh"], [1302, 1, 1, "", "to_arrow"], [1303, 1, 1, "", "to_dummies"], [1304, 1, 1, "", "to_frame"], [1305, 1, 1, "", "to_init_repr"], [1306, 1, 1, "", "to_jax"], [1307, 1, 1, "", "to_list"], [1308, 1, 1, "", "to_numpy"], [1309, 1, 1, "", "to_pandas"], [1310, 1, 1, "", "to_physical"], [1311, 1, 1, "", "to_torch"], [1312, 1, 1, "", "top_k"], [1313, 1, 1, "", "unique"], [1314, 1, 1, "", "unique_counts"], [1315, 1, 1, "", "upper_bound"], [1316, 1, 1, "", "value_counts"], [1317, 1, 1, "", "var"], [1318, 1, 1, "", "zip_with"]], "polars.Series.arr": [[960, 1, 1, "", "all"], [961, 1, 1, "", "any"], [962, 1, 1, "", "arg_max"], [963, 1, 1, "", "arg_min"], [964, 1, 1, "", "contains"], [965, 1, 1, "", "count_matches"], [966, 1, 1, "", "explode"], [967, 1, 1, "", "first"], [968, 1, 1, "", "get"], [969, 1, 1, "", "join"], [970, 1, 1, "", "last"], [971, 1, 1, "", "max"], [972, 1, 1, "", "median"], [973, 1, 1, "", "min"], [974, 1, 1, "", "n_unique"], [975, 1, 1, "", "reverse"], [976, 1, 1, "", "shift"], [977, 1, 1, "", "sort"], [978, 1, 1, "", "std"], [979, 1, 1, "", "sum"], [980, 1, 1, "", "to_list"], [981, 1, 1, "", "to_struct"], [982, 1, 1, "", "unique"], [983, 1, 1, "", "var"]], "polars.Series.bin": [[984, 1, 1, "", "contains"], [985, 1, 1, "", "decode"], [986, 1, 1, "", "encode"], [987, 1, 1, "", "ends_with"], [988, 1, 1, "", "reinterpret"], [989, 1, 1, "", "size"], [990, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1002, 1, 1, "", "ends_with"], [1003, 1, 1, "", "get_categories"], [1004, 1, 1, "", "is_local"], [1005, 1, 1, "", "len_bytes"], [1006, 1, 1, "", "len_chars"], [1007, 1, 1, "", "starts_with"], [1008, 1, 1, "", "to_local"], [1009, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1032, 1, 1, "", "add_business_days"], [1033, 1, 1, "", "base_utc_offset"], [1034, 1, 1, "", "cast_time_unit"], [1035, 1, 1, "", "century"], [1036, 1, 1, "", "combine"], [1037, 1, 1, "", "convert_time_zone"], [1038, 1, 1, "", "date"], [1039, 1, 1, "", "datetime"], [1040, 1, 1, "", "day"], [1041, 1, 1, "", "dst_offset"], [1042, 1, 1, "", "epoch"], [1043, 1, 1, "", "hour"], [1044, 1, 1, "", "is_leap_year"], [1045, 1, 1, "", "iso_year"], [1046, 1, 1, "", "max"], [1047, 1, 1, "", "mean"], [1048, 1, 1, "", "median"], [1049, 1, 1, "", "microsecond"], [1050, 1, 1, "", "millennium"], [1051, 1, 1, "", "millisecond"], [1052, 1, 1, "", "min"], [1053, 1, 1, "", "minute"], [1054, 1, 1, "", "month"], [1055, 1, 1, "", "month_end"], [1056, 1, 1, "", "month_start"], [1057, 1, 1, "", "nanosecond"], [1058, 1, 1, "", "offset_by"], [1059, 1, 1, "", "ordinal_day"], [1060, 1, 1, "", "quarter"], [1061, 1, 1, "", "replace"], [1062, 1, 1, "", "replace_time_zone"], [1063, 1, 1, "", "round"], [1064, 1, 1, "", "second"], [1065, 1, 1, "", "strftime"], [1066, 1, 1, "", "time"], [1067, 1, 1, "", "timestamp"], [1068, 1, 1, "", "to_string"], [1069, 1, 1, "", "total_days"], [1070, 1, 1, "", "total_hours"], [1071, 1, 1, "", "total_microseconds"], [1072, 1, 1, "", "total_milliseconds"], [1073, 1, 1, "", "total_minutes"], [1074, 1, 1, "", "total_nanoseconds"], [1075, 1, 1, "", "total_seconds"], [1076, 1, 1, "", "truncate"], [1077, 1, 1, "", "week"], [1078, 1, 1, "", "weekday"], [1079, 1, 1, "", "with_time_unit"], [1080, 1, 1, "", "year"]], "polars.Series.list": [[1135, 1, 1, "", "all"], [1136, 1, 1, "", "any"], [1137, 1, 1, "", "arg_max"], [1138, 1, 1, "", "arg_min"], [1139, 1, 1, "", "concat"], [1140, 1, 1, "", "contains"], [1141, 1, 1, "", "count_matches"], [1142, 1, 1, "", "diff"], [1143, 1, 1, "", "drop_nulls"], [1144, 1, 1, "", "eval"], [1145, 1, 1, "", "explode"], [1146, 1, 1, "", "first"], [1147, 1, 1, "", "gather"], [1148, 1, 1, "", "gather_every"], [1149, 1, 1, "", "get"], [1150, 1, 1, "", "head"], [1151, 1, 1, "", "join"], [1152, 1, 1, "", "last"], [1153, 1, 1, "", "len"], [1154, 1, 1, "", "max"], [1155, 1, 1, "", "mean"], [1156, 1, 1, "", "median"], [1157, 1, 1, "", "min"], [1158, 1, 1, "", "n_unique"], [1159, 1, 1, "", "reverse"], [1160, 1, 1, "", "sample"], [1161, 1, 1, "", "set_difference"], [1162, 1, 1, "", "set_intersection"], [1163, 1, 1, "", "set_symmetric_difference"], [1164, 1, 1, "", "set_union"], [1165, 1, 1, "", "shift"], [1166, 1, 1, "", "slice"], [1167, 1, 1, "", "sort"], [1168, 1, 1, "", "std"], [1169, 1, 1, "", "sum"], [1170, 1, 1, "", "tail"], [1171, 1, 1, "", "to_array"], [1172, 1, 1, "", "to_struct"], [1173, 1, 1, "", "unique"], [1174, 1, 1, "", "var"]], "polars.Series.str": [[1243, 1, 1, "", "concat"], [1244, 1, 1, "", "contains"], [1245, 1, 1, "", "contains_any"], [1246, 1, 1, "", "count_matches"], [1247, 1, 1, "", "decode"], [1248, 1, 1, "", "encode"], [1249, 1, 1, "", "ends_with"], [1250, 1, 1, "", "escape_regex"], [1251, 1, 1, "", "explode"], [1252, 1, 1, "", "extract"], [1253, 1, 1, "", "extract_all"], [1254, 1, 1, "", "extract_groups"], [1255, 1, 1, "", "extract_many"], [1256, 1, 1, "", "find"], [1257, 1, 1, "", "find_many"], [1258, 1, 1, "", "head"], [1259, 1, 1, "", "join"], [1260, 1, 1, "", "json_decode"], [1261, 1, 1, "", "json_path_match"], [1262, 1, 1, "", "len_bytes"], [1263, 1, 1, "", "len_chars"], [1264, 1, 1, "", "normalize"], [1265, 1, 1, "", "pad_end"], [1266, 1, 1, "", "pad_start"], [1267, 1, 1, "", "replace"], [1268, 1, 1, "", "replace_all"], [1269, 1, 1, "", "replace_many"], [1270, 1, 1, "", "reverse"], [1271, 1, 1, "", "slice"], [1272, 1, 1, "", "split"], [1273, 1, 1, "", "split_exact"], [1274, 1, 1, "", "splitn"], [1275, 1, 1, "", "starts_with"], [1276, 1, 1, "", "strip_chars"], [1277, 1, 1, "", "strip_chars_end"], [1278, 1, 1, "", "strip_chars_start"], [1279, 1, 1, "", "strip_prefix"], [1280, 1, 1, "", "strip_suffix"], [1281, 1, 1, "", "strptime"], [1282, 1, 1, "", "tail"], [1283, 1, 1, "", "to_date"], [1284, 1, 1, "", "to_datetime"], [1285, 1, 1, "", "to_decimal"], [1286, 1, 1, "", "to_integer"], [1287, 1, 1, "", "to_lowercase"], [1288, 1, 1, "", "to_time"], [1289, 1, 1, "", "to_titlecase"], [1290, 1, 1, "", "to_uppercase"], [1291, 1, 1, "", "zfill"]], "polars.Series.struct": [[1292, 1, 1, "", "field"], [1293, 3, 1, "", "fields"], [1294, 1, 1, "", "json_encode"], [1295, 1, 1, "", "rename_fields"], [1296, 3, 1, "", "schema"], [1297, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.api": [[58, 4, 1, "", "register_dataframe_namespace"], [59, 4, 1, "", "register_expr_namespace"], [60, 4, 1, "", "register_lazyframe_namespace"], [61, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[306, 1, 1, "", "__iter__"], [307, 1, 1, "", "agg"], [308, 1, 1, "", "all"], [309, 1, 1, "", "count"], [310, 1, 1, "", "first"], [311, 1, 1, "", "head"], [312, 1, 1, "", "last"], [313, 1, 1, "", "len"], [314, 1, 1, "", "map_groups"], [315, 1, 1, "", "max"], [316, 1, 1, "", "mean"], [317, 1, 1, "", "median"], [318, 1, 1, "", "min"], [319, 1, 1, "", "n_unique"], [320, 1, 1, "", "quantile"], [321, 1, 1, "", "sum"], [322, 1, 1, "", "tail"]], "polars.datatypes": [[66, 0, 1, "", "Array"], [67, 0, 1, "", "Binary"], [68, 0, 1, "", "Boolean"], [69, 0, 1, "", "Categorical"], [70, 0, 1, "", "DataType"], [71, 0, 1, "", "Date"], [72, 0, 1, "", "Datetime"], [73, 0, 1, "", "Decimal"], [74, 0, 1, "", "Duration"], [75, 0, 1, "", "Enum"], [76, 0, 1, "", "Field"], [77, 0, 1, "", "Float32"], [78, 0, 1, "", "Float64"], [79, 0, 1, "", "Int128"], [80, 0, 1, "", "Int16"], [81, 0, 1, "", "Int32"], [82, 0, 1, "", "Int64"], [83, 0, 1, "", "Int8"], [84, 0, 1, "", "List"], [85, 0, 1, "", "Null"], [86, 0, 1, "", "Object"], [87, 0, 1, "", "String"], [88, 0, 1, "", "Struct"], [89, 0, 1, "", "Time"], [90, 0, 1, "", "UInt16"], [91, 0, 1, "", "UInt32"], [92, 0, 1, "", "UInt64"], [93, 0, 1, "", "UInt8"], [94, 0, 1, "", "Unknown"], [95, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[69, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[83, 1, 1, "", "__init__"]], "polars.datatypes.List": [[84, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[86, 1, 1, "", "__init__"]], "polars.datatypes.String": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[89, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[93, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[94, 1, 1, "", "__init__"]], "polars.exceptions": [[99, 5, 1, "", "CategoricalRemappingWarning"], [100, 5, 1, "", "ChronoFormatWarning"], [101, 5, 1, "", "ColumnNotFoundError"], [102, 5, 1, "", "ComputeError"], [103, 5, 1, "", "CustomUFuncWarning"], [104, 5, 1, "", "DataOrientationWarning"], [105, 5, 1, "", "DuplicateError"], [106, 5, 1, "", "InvalidOperationError"], [107, 5, 1, "", "MapWithoutReturnDtypeWarning"], [108, 5, 1, "", "ModuleUpgradeRequiredError"], [109, 5, 1, "", "NoDataError"], [110, 5, 1, "", "NoRowsReturnedError"], [111, 5, 1, "", "OutOfBoundsError"], [112, 5, 1, "", "PanicException"], [113, 5, 1, "", "ParameterCollisionError"], [114, 5, 1, "", "PerformanceWarning"], [115, 5, 1, "", "PolarsError"], [116, 5, 1, "", "PolarsInefficientMapWarning"], [117, 5, 1, "", "PolarsWarning"], [118, 5, 1, "", "RowsError"], [119, 5, 1, "", "SQLInterfaceError"], [120, 5, 1, "", "SQLSyntaxError"], [121, 5, 1, "", "SchemaError"], [122, 5, 1, "", "SchemaFieldNotFoundError"], [123, 5, 1, "", "ShapeError"], [124, 5, 1, "", "StringCacheMismatchError"], [125, 5, 1, "", "StructFieldNotFoundError"], [126, 5, 1, "", "TooManyRowsReturnedError"], [127, 5, 1, "", "UnstableWarning"], [128, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[138, 1, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[907, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[907, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[908, 1, 1, "", "agg"], [909, 1, 1, "", "all"], [910, 1, 1, "", "count"], [911, 1, 1, "", "first"], [912, 1, 1, "", "head"], [913, 1, 1, "", "last"], [914, 1, 1, "", "len"], [915, 1, 1, "", "map_groups"], [916, 1, 1, "", "max"], [917, 1, 1, "", "mean"], [918, 1, 1, "", "median"], [919, 1, 1, "", "min"], [920, 1, 1, "", "n_unique"], [921, 1, 1, "", "quantile"], [922, 1, 1, "", "sum"], [923, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[924, 1, 1, "", "cancel"], [925, 1, 1, "", "fetch"], [926, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[936, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[938, 4, 1, "", "all"], [938, 4, 1, "", "alpha"], [938, 4, 1, "", "alphanumeric"], [938, 4, 1, "", "binary"], [938, 4, 1, "", "boolean"], [938, 4, 1, "", "by_dtype"], [938, 4, 1, "", "by_index"], [938, 4, 1, "", "by_name"], [938, 4, 1, "", "categorical"], [938, 4, 1, "", "contains"], [938, 4, 1, "", "date"], [938, 4, 1, "", "datetime"], [938, 4, 1, "", "decimal"], [938, 4, 1, "", "digit"], [938, 4, 1, "", "duration"], [938, 4, 1, "", "ends_with"], [938, 4, 1, "", "exclude"], [938, 4, 1, "", "expand_selector"], [938, 4, 1, "", "first"], [938, 4, 1, "", "float"], [938, 4, 1, "", "integer"], [938, 4, 1, "", "is_selector"], [938, 4, 1, "", "last"], [938, 4, 1, "", "matches"], [938, 4, 1, "", "numeric"], [938, 4, 1, "", "signed_integer"], [938, 4, 1, "", "starts_with"], [938, 4, 1, "", "string"], [938, 4, 1, "", "temporal"], [938, 4, 1, "", "time"], [938, 4, 1, "", "unsigned_integer"]], "polars.testing": [[165, 4, 1, "", "assert_frame_equal"], [166, 4, 1, "", "assert_frame_not_equal"], [167, 4, 1, "", "assert_series_equal"], [168, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[169, 0, 1, "", "column"], [170, 4, 1, "", "columns"], [171, 4, 1, "", "create_list_strategy"], [172, 4, 1, "", "dataframes"], [173, 4, 1, "", "dtypes"], [174, 4, 1, "", "lists"], [175, 4, 1, "", "load_profile"], [176, 4, 1, "", "series"], [177, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[169, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 17, 43, 44, 45, 46, 51, 52, 61, 66, 76, 88, 98, 100, 106, 129, 136, 142, 143, 144, 145, 147, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 176, 189, 190, 201, 202, 205, 210, 213, 218, 219, 224, 230, 233, 234, 244, 251, 253, 258, 260, 263, 266, 267, 274, 283, 286, 291, 293, 294, 295, 296, 297, 302, 303, 328, 365, 398, 430, 435, 454, 457, 477, 483, 487, 500, 516, 537, 566, 567, 579, 588, 593, 600, 601, 608, 609, 620, 627, 661, 665, 673, 674, 675, 677, 679, 688, 689, 692, 693, 695, 702, 703, 704, 705, 709, 713, 715, 717, 725, 734, 735, 736, 737, 742, 749, 752, 755, 756, 765, 766, 768, 769, 775, 779, 780, 781, 782, 784, 786, 787, 789, 796, 798, 800, 801, 802, 808, 814, 818, 834, 836, 847, 848, 857, 858, 862, 863, 872, 883, 884, 890, 895, 896, 897, 898, 899, 902, 903, 915, 932, 937, 938, 942, 943, 944, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1040, 1041, 1042, 1044, 1046, 1047, 1048, 1050, 1051, 1052, 1055, 1056, 1059, 1061, 1063, 1064, 1065, 1068, 1076, 1078, 1079, 1080, 1081, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1327, 1332, 1336, 1340, 1343, 1350, 1351], "0": [1, 13, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 44, 45, 46, 51, 55, 57, 58, 59, 61, 65, 73, 84, 130, 139, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 164, 169, 170, 171, 172, 173, 174, 176, 179, 186, 187, 188, 190, 191, 192, 193, 195, 196, 197, 198, 199, 201, 203, 204, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 224, 225, 229, 231, 232, 233, 236, 238, 240, 241, 242, 243, 244, 247, 248, 249, 250, 253, 254, 255, 258, 260, 262, 263, 264, 265, 266, 273, 274, 275, 276, 278, 283, 284, 285, 286, 287, 288, 290, 292, 296, 298, 299, 302, 304, 305, 307, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 328, 331, 332, 336, 338, 339, 341, 345, 346, 347, 348, 349, 350, 353, 354, 355, 358, 359, 361, 364, 374, 377, 379, 386, 388, 393, 396, 399, 405, 406, 407, 408, 409, 410, 417, 418, 419, 423, 424, 425, 431, 432, 436, 439, 441, 442, 446, 450, 453, 455, 457, 460, 461, 463, 464, 468, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483, 486, 487, 489, 491, 492, 494, 496, 498, 502, 503, 506, 509, 511, 512, 513, 514, 516, 518, 523, 524, 527, 530, 533, 534, 535, 541, 542, 554, 558, 560, 561, 562, 563, 565, 566, 568, 569, 570, 574, 579, 582, 585, 586, 587, 589, 591, 600, 601, 602, 603, 604, 606, 607, 609, 612, 613, 615, 616, 617, 618, 622, 623, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 653, 655, 656, 657, 658, 662, 663, 664, 667, 672, 673, 674, 677, 678, 717, 718, 719, 721, 722, 723, 726, 731, 732, 734, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 753, 760, 764, 767, 773, 774, 776, 777, 780, 783, 784, 785, 789, 791, 792, 796, 797, 804, 805, 806, 807, 808, 809, 814, 818, 833, 836, 837, 838, 841, 843, 844, 846, 847, 849, 850, 852, 853, 854, 856, 857, 858, 861, 862, 866, 868, 871, 872, 875, 877, 878, 882, 883, 888, 890, 891, 892, 900, 902, 904, 905, 906, 908, 910, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 932, 937, 938, 942, 949, 950, 951, 952, 953, 954, 955, 957, 959, 962, 968, 978, 981, 983, 989, 1001, 1008, 1010, 1011, 1013, 1016, 1017, 1018, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1039, 1043, 1047, 1048, 1049, 1051, 1053, 1057, 1061, 1064, 1068, 1071, 1072, 1074, 1075, 1079, 1082, 1087, 1088, 1089, 1090, 1095, 1100, 1102, 1107, 1108, 1110, 1113, 1114, 1118, 1121, 1123, 1124, 1125, 1126, 1129, 1130, 1137, 1138, 1141, 1144, 1147, 1148, 1149, 1155, 1156, 1168, 1172, 1174, 1175, 1176, 1177, 1178, 1182, 1183, 1189, 1190, 1196, 1199, 1201, 1202, 1203, 1207, 1208, 1212, 1213, 1215, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1227, 1235, 1236, 1237, 1238, 1241, 1242, 1243, 1246, 1251, 1252, 1253, 1256, 1257, 1261, 1267, 1300, 1301, 1303, 1306, 1308, 1309, 1310, 1311, 1315, 1317, 1327, 1332, 1336, 1342, 1344, 1345, 1346, 1349, 1352, 1353, 1355, 1357, 1358], "00": [33, 46, 72, 190, 197, 219, 298, 328, 426, 427, 430, 434, 444, 445, 447, 451, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 631, 633, 635, 637, 639, 642, 644, 646, 702, 705, 709, 760, 761, 762, 763, 777, 804, 805, 806, 818, 836, 844, 858, 932, 938, 1033, 1034, 1037, 1038, 1039, 1041, 1042, 1043, 1048, 1049, 1053, 1055, 1056, 1057, 1058, 1062, 1063, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1267, 1281, 1284, 1288, 1350], "000": [15, 16, 33, 46, 328, 1267, 1358], "0000": [290, 328, 1311, 1327, 1358], "000000": [382, 383, 457, 668, 985, 986, 1247], "00000001": [17, 733, 818], "00000010": [733, 818], "00000011": [733, 818], "00000100": [733, 818], "00001000": [733, 818], "00001010": [733, 818], "00001011": [733, 818], "0000e": 17, "0000ff": [382, 383, 668, 985, 986, 1247], "0001": 457, "000100": 457, "000101": 457, "0005": 938, "00050": 938, "000800": 1068, "001": [59, 712, 763, 1071, 1072, 1074, 1291], "002": [763, 1071, 1072, 1074], "005": [1082, 1327], "00prefix": 938, "00z": [702, 705, 1281, 1284], "01": [34, 57, 71, 72, 172, 190, 197, 217, 219, 234, 260, 298, 328, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 702, 704, 705, 709, 744, 757, 758, 759, 760, 761, 762, 763, 777, 818, 836, 844, 858, 863, 881, 932, 938, 1032, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1048, 1049, 1053, 1055, 1056, 1057, 1058, 1061, 1062, 1063, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1281, 1283, 1284, 1288, 1350, 1353], "010": [15, 707, 1286], "01000": 34, "01000010": [733, 818], "01000110": [733, 818], "012": [648, 685, 818, 1224, 1264, 1327], "0123": [712, 1291], "01234": [648, 818, 1224, 1327], "012345": 1068, "015625": [1199, 1327], "01\u00b2": [685, 1264], "02": [57, 190, 197, 217, 219, 260, 298, 328, 425, 427, 429, 435, 444, 445, 447, 451, 456, 457, 459, 462, 464, 468, 628, 631, 633, 635, 637, 639, 642, 644, 646, 647, 702, 704, 705, 709, 744, 757, 758, 759, 760, 761, 762, 763, 777, 818, 836, 844, 858, 881, 932, 938, 981, 1034, 1036, 1038, 1039, 1042, 1043, 1048, 1049, 1053, 1055, 1056, 1057, 1061, 1062, 1063, 1066, 1067, 1070, 1073, 1075, 1076, 1172, 1281, 1283, 1284, 1288, 1350, 1351], "03": [57, 136, 142, 190, 219, 234, 260, 298, 328, 427, 429, 430, 435, 444, 445, 447, 450, 451, 452, 454, 456, 457, 458, 459, 462, 464, 465, 468, 474, 487, 628, 631, 633, 635, 637, 639, 642, 644, 646, 704, 709, 757, 758, 759, 760, 761, 762, 763, 818, 836, 858, 863, 881, 932, 938, 1034, 1036, 1037, 1042, 1043, 1048, 1049, 1055, 1056, 1057, 1062, 1063, 1065, 1067, 1069, 1070, 1073, 1075, 1283, 1288], "037037": [1199, 1327], "04": [162, 190, 197, 219, 298, 328, 429, 430, 444, 445, 450, 451, 452, 454, 458, 459, 462, 464, 468, 631, 633, 635, 637, 639, 642, 644, 646, 702, 744, 757, 760, 761, 763, 818, 836, 844, 858, 932, 938, 1037, 1049, 1053, 1055, 1056, 1057, 1062, 1065, 1069, 1070, 1073, 1075, 1079, 1281, 1350], "047198": 1352, "05": [22, 162, 165, 166, 167, 168, 172, 190, 197, 298, 328, 425, 428, 429, 430, 431, 432, 436, 439, 440, 441, 442, 444, 445, 446, 451, 453, 454, 455, 457, 458, 744, 757, 758, 760, 761, 836, 844, 932, 938, 1036, 1037, 1038, 1039, 1062, 1063, 1065, 1066, 1068, 1069, 1076, 1350, 1351, 1353], "050545": 136, "0522623626787952": [1130, 1327], "0545": [1038, 1039, 1066], "05t10": 1068, "06": [172, 190, 298, 328, 425, 429, 443, 449, 451, 452, 453, 465, 466, 757, 760, 777, 836, 932, 938, 1032, 1062, 1063, 1068, 1076], "060": [431, 432, 436, 439, 441, 442, 446, 453, 455], "0601749420166": [205, 328], "06293300616044681": [1082, 1327], "07": [22, 142, 172, 197, 328, 425, 428, 429, 440, 451, 452, 457, 465, 702, 757, 758, 760, 761, 769, 844, 932, 938, 1032, 1036, 1062, 1068, 1281, 1350, 1353], "071068": [197, 328, 844, 932], "08": [142, 165, 166, 167, 168, 197, 234, 260, 275, 328, 425, 429, 444, 445, 452, 457, 628, 702, 761, 763, 777, 818, 844, 863, 881, 932, 938, 1032, 1063, 1076, 1281, 1350, 1351], "085537": [1091, 1327], "09": [57, 142, 197, 260, 328, 425, 429, 444, 445, 457, 608, 628, 706, 757, 758, 760, 806, 818, 844, 881, 932, 938, 1032, 1285], "090909": [609, 818], "094395": 1352, "098612": [563, 818, 1175, 1177, 1327, 1349], "0999": [428, 440], "0_": [46, 328], "0m": [434, 1041], "0x11bc0ad80": 937, "0\u00b5": 457, "1": [1, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 61, 65, 66, 84, 88, 101, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 143, 146, 147, 148, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 172, 176, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 386, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 670, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 688, 689, 690, 694, 695, 696, 697, 698, 699, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 814, 818, 833, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 869, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 938, 942, 943, 944, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 989, 1000, 1001, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1085, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1252, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1267, 1268, 1269, 1273, 1274, 1291, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327, 1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358], "10": [19, 22, 23, 33, 41, 43, 45, 46, 47, 48, 51, 55, 57, 65, 136, 142, 143, 145, 156, 164, 192, 197, 201, 207, 216, 217, 219, 221, 223, 224, 225, 230, 234, 237, 248, 252, 254, 258, 260, 266, 275, 279, 302, 307, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 339, 343, 351, 352, 353, 355, 407, 413, 416, 421, 425, 426, 428, 429, 431, 432, 434, 436, 439, 440, 441, 442, 444, 445, 446, 450, 451, 452, 453, 455, 457, 465, 468, 474, 495, 496, 497, 502, 508, 520, 528, 534, 536, 542, 552, 554, 556, 560, 562, 578, 580, 591, 606, 608, 609, 612, 622, 623, 628, 659, 707, 717, 720, 733, 744, 745, 753, 758, 760, 761, 764, 767, 769, 771, 778, 779, 803, 806, 818, 839, 840, 844, 847, 858, 859, 861, 863, 867, 876, 877, 881, 883, 893, 894, 902, 908, 911, 913, 916, 917, 918, 919, 920, 921, 922, 932, 938, 1014, 1028, 1032, 1033, 1035, 1036, 1041, 1050, 1062, 1068, 1076, 1079, 1082, 1088, 1109, 1120, 1134, 1142, 1150, 1156, 1166, 1168, 1170, 1174, 1176, 1180, 1196, 1208, 1226, 1228, 1286, 1299, 1306, 1308, 1311, 1327, 1336, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1353, 1358], "100": [16, 23, 33, 46, 132, 135, 139, 142, 143, 144, 147, 151, 152, 153, 156, 160, 235, 253, 271, 328, 457, 622, 623, 652, 666, 676, 678, 681, 690, 706, 762, 818, 864, 887, 932, 938, 1084, 1176, 1192, 1207, 1208, 1214, 1215, 1217, 1231, 1245, 1257, 1260, 1269, 1285, 1327, 1347, 1358], "1000": [144, 205, 284, 305, 328, 344, 818, 906, 932, 1071, 1176, 1305, 1327, 1358], "10000": [142, 232, 328], "100000": [16, 33], "1000000": [17, 1074], "1001": [305, 328, 906, 932], "1002": [305, 328, 906, 932], "10047419486152048166": [220, 328], "1005": [344, 818], "100_000": [796, 868, 932], "100\u00b5": 457, "101": [15, 33, 235, 328, 429, 457, 707, 864, 932, 938, 1286, 1358], "101000": 429, "10101": [33, 1353], "1010101": 15, "101514": [197, 328, 844, 932], "102": [235, 328, 864, 932], "1024": [43, 51, 52, 55, 142, 143, 144, 152, 160, 328, 386, 932, 989], "1040361802642726": [1130, 1327], "107149": 1352, "10734580197236529959": [1108, 1327], "1073741824": [653, 818], "10783150408545073287": [220, 328], "107_930_000": 1336, "10_000": [46, 328], "10i": [219, 328, 858, 932], "10m": [452, 465, 1063, 1076], "10t00": 457, "11": [16, 22, 51, 55, 164, 172, 188, 197, 234, 260, 328, 339, 444, 445, 447, 452, 465, 489, 502, 534, 585, 609, 618, 628, 629, 643, 659, 733, 777, 801, 806, 814, 818, 833, 839, 840, 844, 859, 863, 867, 877, 881, 894, 932, 938, 1058, 1063, 1076, 1180, 1213, 1327, 1345], "110": [201, 328, 690, 707, 847, 932, 1286], "1101441246220388612": [496, 818], "111": [16, 1347], "11111": 1064, "111110": 1064, "11111001": [733, 818], "11111010": [733, 818], "11111111": 16, "112": [653, 818, 1358], "11330": 171, "1152921504606846976": [1205, 1327], "116": 171, "11638928888656214026": [496, 818], "118034": [892, 932], "11aa": 1350, "11aabb": 1350, "11h": [426, 1033], "12": [32, 46, 57, 136, 142, 164, 172, 197, 219, 230, 234, 235, 260, 275, 298, 328, 339, 415, 426, 428, 429, 433, 440, 443, 444, 445, 447, 448, 449, 450, 452, 457, 465, 466, 467, 474, 502, 534, 566, 582, 609, 617, 628, 643, 653, 667, 688, 706, 754, 757, 760, 761, 762, 777, 779, 804, 805, 806, 818, 844, 858, 859, 863, 864, 867, 881, 888, 894, 932, 938, 1033, 1035, 1036, 1047, 1048, 1050, 1054, 1061, 1063, 1068, 1076, 1088, 1180, 1223, 1246, 1268, 1285, 1327, 1349, 1350, 1351, 1353, 1355, 1358], "120": [235, 328, 763, 864, 932, 1352], "1200": [648, 818], "120134": [706, 1285], "121": 1358, "123": [15, 575, 667, 674, 689, 712, 808, 938, 1246, 1253, 1291, 1304, 1327], "123000": 938, "1232e": [1016, 1018, 1327], "1234": [33, 648, 818], "12345": [769, 1011, 1068, 1100, 1223, 1327], "1234500": 938, "123456": [15, 938], "1234567": 33, "123456780": 136, "12346": 769, "123465": 938, "123a123": 689, "123abc": [688, 1267, 1268], "125": [1, 46, 61, 328, 337, 613, 797, 818, 891, 932, 1196, 1199, 1327], "127": [1315, 1327, 1346], "128": [59, 73, 79, 1196, 1327], "129": [653, 818], "13": [191, 192, 197, 208, 209, 216, 224, 235, 236, 248, 260, 302, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 339, 425, 431, 432, 436, 439, 441, 442, 446, 453, 455, 578, 580, 628, 706, 747, 753, 756, 760, 767, 802, 804, 807, 818, 837, 838, 844, 852, 853, 864, 866, 881, 902, 911, 913, 916, 917, 918, 919, 920, 921, 922, 932, 1032, 1063, 1076, 1077, 1180, 1285, 1327, 1346], "130": [139, 235, 328, 864, 932], "13382926553367784577": [496, 818], "134821952": 1336, "134_821_952": 1336, "135": [741, 1352], "13614470193936745724": [496, 818], "13756996518000038261": [1108, 1327], "13d": 457, "13h": [426, 1033], "14": [45, 164, 197, 235, 238, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 426, 431, 432, 436, 439, 441, 442, 446, 453, 455, 457, 502, 575, 618, 760, 804, 805, 818, 844, 864, 911, 913, 916, 917, 918, 919, 920, 921, 922, 932, 938, 1033, 1063, 1068], "140": [235, 328, 864, 932], "141592653589793": 16, "141593": [617, 818, 949, 1327, 1349, 1352], "142857": [1196, 1327], "143": [706, 1285, 1358], "1433": [44, 328], "1436e16": 172, "1438741209321515184": [220, 328], "1440": [462, 1073], "1443e235": 1358, "149": 1358, "14d": 938, "14h": 457, "15": [16, 46, 164, 197, 219, 224, 235, 238, 260, 328, 417, 421, 445, 450, 452, 457, 465, 474, 612, 628, 643, 685, 754, 760, 804, 805, 818, 844, 858, 864, 881, 932, 938, 1025, 1028, 1063, 1068, 1076, 1088, 1264, 1327, 1346, 1350], "150": [235, 328, 864, 932, 1215, 1327], "1500": [164, 175], "15000": [232, 328], "153061": [516, 818], "15836": 172, "15_000": [232, 328], "16": [1, 46, 59, 80, 90, 164, 178, 197, 219, 235, 260, 302, 328, 413, 416, 450, 457, 502, 582, 589, 608, 613, 628, 707, 717, 753, 763, 764, 767, 777, 818, 844, 858, 864, 881, 888, 902, 932, 938, 1063, 1076, 1196, 1236, 1286, 1300, 1327, 1346, 1349, 1350, 1355], "160": [235, 328, 864, 932], "165": [1063, 1076], "1656e15": [1018, 1327], "166667": [1196, 1327], "1666683077": 769, "1666683099": 769, "167": 57, "16996": 1358, "16h": 938, "17": [164, 172, 205, 234, 307, 328, 474, 500, 608, 629, 647, 749, 769, 805, 818, 863, 908, 932, 1016, 1018, 1063, 1088, 1112, 1213, 1327, 1358], "170": [235, 328, 864, 932], "17293822569102704640": [1205, 1327], "174": 1358, "175201": [657, 818, 1237, 1327], "1755e": [169, 172], "1764": 61, "17888890": [205, 328], "179": 1358, "17_500": [232, 328], "18": [44, 136, 147, 197, 245, 260, 328, 416, 452, 465, 468, 502, 591, 608, 628, 717, 818, 844, 873, 877, 881, 932, 938, 1068, 1079, 1344, 1355], "180": [419, 617, 818, 1352], "1800": [450, 1061], "1844": 172, "18446744073709551614": [1205, 1327], "185_000_000": 1336, "186": 1358, "1875": [645, 818, 900, 932], "1897": [428, 440, 1035, 1050], "18d": 938, "19": [172, 234, 260, 328, 428, 452, 628, 633, 635, 637, 639, 706, 818, 863, 881, 932, 1035, 1063, 1076, 1285], "1920": 1350, "196": 1351, "1964": [877, 932], "1969": [1350, 1351], "1970": [71, 72, 162, 1336], "1972": 1336, "1976": [438, 469], "1977": [438, 469], "1978": [431, 432, 436, 438, 439, 441, 442, 446, 453, 455, 469, 1351], "1979": [438, 469], "1980": 457, "1985": [758, 761], "1990": [142, 1336], "1993": 1336, "1994": 1336, "1995": 142, "1998": [447, 1058], "1999": [275, 328, 447, 457, 938, 1058, 1068, 1353], "199992": [868, 932], "199994": [868, 932], "199996": [868, 932], "199998": [868, 932], "1_000_000": [205, 328, 1086, 1327], "1_234_500": 938, "1d": [219, 234, 260, 298, 328, 427, 447, 452, 457, 459, 462, 465, 468, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 763, 778, 805, 806, 818, 858, 863, 881, 932, 938, 1034, 1042, 1048, 1058, 1063, 1067, 1070, 1073, 1076, 1088, 1327], "1e": [17, 165, 166, 167, 168], "1e6": 17, "1h": [219, 234, 260, 298, 328, 434, 447, 452, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1041, 1043, 1058, 1063, 1076, 1088, 1327], "1i": [219, 260, 298, 328, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 818, 858, 881, 932, 1088, 1327], "1m": [219, 234, 260, 298, 328, 447, 452, 464, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1071, 1072, 1074, 1075, 1076, 1088, 1327], "1mo": [219, 234, 260, 298, 328, 430, 444, 445, 447, 451, 452, 458, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1037, 1054, 1055, 1056, 1058, 1059, 1060, 1062, 1063, 1069, 1076, 1077, 1088, 1327], "1n": [219, 234, 260, 298, 328, 447, 452, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076, 1088, 1327], "1q": [219, 234, 260, 298, 328, 447, 452, 465, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076], "1st_col": 938, "1u": [219, 234, 260, 298, 328, 447, 452, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076, 1088, 1327], "1w": [219, 234, 260, 298, 328, 447, 452, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076, 1088, 1327], "1w2d": [758, 759], "1y": [219, 234, 260, 298, 328, 447, 452, 465, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076], "1y2mo": [447, 1058], "1zy3": [667, 1246], "2": [1, 7, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 65, 66, 84, 88, 101, 104, 106, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 145, 151, 152, 154, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 174, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 341, 343, 344, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 388, 393, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 428, 429, 430, 431, 432, 433, 434, 437, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 582, 583, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 659, 660, 661, 662, 664, 666, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 788, 789, 792, 796, 797, 798, 799, 800, 801, 803, 806, 807, 808, 814, 818, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 937, 938, 942, 943, 944, 947, 950, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 988, 989, 1000, 1006, 1008, 1010, 1011, 1012, 1013, 1015, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1033, 1036, 1038, 1039, 1041, 1043, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1055, 1056, 1060, 1061, 1062, 1063, 1066, 1076, 1078, 1079, 1080, 1081, 1082, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1252, 1254, 1256, 1257, 1258, 1260, 1261, 1263, 1264, 1267, 1268, 1273, 1274, 1276, 1277, 1278, 1281, 1282, 1284, 1285, 1286, 1287, 1290, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327, 1332, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358], "20": [44, 45, 46, 142, 147, 164, 169, 170, 171, 172, 176, 179, 188, 197, 201, 207, 223, 224, 245, 252, 254, 258, 275, 285, 286, 290, 304, 309, 328, 351, 352, 353, 407, 421, 428, 431, 432, 436, 439, 440, 441, 442, 446, 452, 453, 455, 457, 465, 468, 489, 496, 502, 566, 574, 585, 612, 631, 633, 635, 637, 639, 642, 644, 646, 672, 717, 732, 760, 769, 778, 797, 805, 818, 833, 844, 847, 850, 873, 876, 891, 905, 910, 932, 938, 1028, 1035, 1039, 1050, 1063, 1068, 1076, 1079, 1091, 1107, 1207, 1251, 1306, 1308, 1311, 1327, 1343, 1344, 1347, 1353], "200": [460, 461, 463, 622, 623, 818, 938, 1084, 1192, 1207, 1208, 1214, 1215, 1217, 1327, 1347], "2000": [428, 437, 440, 444, 445, 447, 938, 1035, 1044, 1050, 1055, 1056, 1058, 1064, 1336, 1350], "200000": [460, 868, 932], "200000000": 463, "2001": [22, 427, 428, 433, 435, 437, 440, 443, 447, 448, 449, 452, 456, 465, 466, 467, 468, 631, 633, 635, 637, 639, 642, 644, 646, 702, 818, 938, 1034, 1035, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057, 1058, 1059, 1060, 1063, 1067, 1076, 1077, 1078, 1079, 1080, 1281], "2002": [142, 437, 447, 1044, 1058, 1080], "2003": [447, 769, 1058], "2004": [447, 1058], "2005": [447, 1058], "2006": [447, 1058], "2008": 1336, "200m": [460, 461, 463], "2010": [275, 328, 457, 938], "2011": [426, 1033], "2012": [426, 1033, 1353], "2013": 1061, "2016": [234, 328, 863, 932], "2017": [234, 328, 863, 932], "2018": [234, 328, 451, 863, 932, 1062], "2019": [234, 328, 863, 932], "202": 1351, "2020": [146, 157, 190, 197, 217, 234, 260, 328, 331, 425, 430, 434, 451, 454, 457, 458, 459, 460, 461, 462, 463, 464, 474, 628, 702, 704, 705, 744, 818, 836, 844, 863, 881, 932, 938, 1032, 1037, 1041, 1062, 1065, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1088, 1281, 1283, 1284, 1327, 1351], "2021": [190, 197, 217, 219, 298, 328, 702, 778, 836, 844, 858, 932, 938, 1038, 1039, 1045, 1066, 1281, 1350], "2022": [57, 190, 197, 217, 328, 429, 452, 465, 702, 758, 759, 761, 762, 763, 769, 836, 844, 932, 938, 1036, 1045, 1063, 1076, 1281], "2023": [22, 46, 136, 164, 232, 328, 429, 763, 778, 938, 1036], "2024": [164, 425, 431, 432, 436, 439, 441, 442, 446, 450, 453, 455, 608, 744, 757, 758, 760, 761, 763, 818, 938, 1032, 1061, 1350, 1353], "2025": [425, 450, 744, 777, 938, 1032], "2026": 1351, "2030": 1350, "2031": 938, "2040": 457, "2047317070637311557": [220, 328], "2055938745": 136, "2065": [431, 432, 436, 439, 441, 442, 446, 453, 455], "2068": 172, "207": 1351, "2077": [275, 328, 457, 938, 1068, 1350, 1351], "2095": 172, "20_000": [46, 328], "20t08": 457, "20t18": 1068, "20word": 145, "21": [164, 197, 245, 277, 328, 428, 631, 633, 635, 637, 639, 642, 644, 646, 760, 769, 777, 818, 844, 873, 932, 938, 1035, 1344], "213": 1358, "2147483647": 1358, "2147483648": [1178, 1327], "21d": 938, "22": [51, 55, 164, 172, 328, 433, 448, 452, 465, 467, 468, 629, 631, 633, 635, 637, 639, 642, 644, 646, 702, 760, 814, 818, 932, 938, 1063, 1076, 1079, 1213, 1281, 1327, 1350, 1351, 1358], "221": 1358, "2246e": [1236, 1300, 1327], "225": [452, 465, 1352], "22500": 796, "22_000_000": 1336, "22_500": 796, "23": [16, 172, 197, 219, 260, 290, 328, 429, 433, 436, 448, 450, 452, 457, 467, 628, 631, 633, 635, 637, 639, 642, 644, 646, 760, 763, 804, 805, 806, 818, 844, 858, 881, 891, 932, 938, 1036, 1043, 1061, 1311, 1327, 1357, 1358], "230498": 17, "230498095872587": 17, "2304980958725870923": 17, "232338648": 1336, "2337": [46, 328], "234": 33, "2345": 938, "23456789": 16, "235": 1358, "23h": 938, "24": [59, 164, 219, 234, 238, 260, 275, 298, 328, 415, 417, 433, 447, 448, 452, 459, 465, 467, 589, 628, 631, 633, 635, 637, 639, 642, 644, 646, 685, 758, 759, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 1025, 1058, 1063, 1070, 1076, 1129, 1327, 1350, 1357], "24030": 171, "249": [733, 818], "25": [1, 33, 46, 61, 136, 197, 201, 219, 234, 260, 285, 290, 298, 302, 328, 386, 421, 433, 434, 448, 452, 457, 465, 467, 474, 613, 615, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 726, 760, 761, 762, 763, 769, 777, 780, 805, 806, 818, 844, 847, 858, 863, 870, 881, 900, 902, 932, 938, 989, 1027, 1028, 1041, 1063, 1068, 1076, 1082, 1088, 1110, 1196, 1201, 1267, 1327, 1344, 1349, 1355, 1356], "250": [733, 818, 1215, 1327, 1347, 1358], "2500": [232, 290, 328], "254508": [474, 818, 1088, 1327], "255": 1358, "256": [238, 328, 386, 989, 1196, 1327, 1349], "2560": 989, "259921": [405, 818, 1010, 1327, 1349], "25_000_000": 1336, "26": [44, 46, 164, 169, 170, 171, 172, 176, 197, 328, 434, 466, 844, 932, 1041], "266667": [197, 328, 844, 932], "27": [1, 61, 285, 321, 328, 416, 443, 449, 466, 717, 818, 922, 938, 1199, 1306, 1327, 1357, 1358], "270": 1352, "28": [281, 286, 328, 337, 451, 468, 818, 1062, 1079, 1308, 1327, 1350, 1352, 1357, 1358], "283185": [617, 818], "2846": 328, "285714": [503, 818, 1114, 1327], "289962": 1352, "28_341_469": 1336, "29": [22, 164, 426, 444, 1033, 1055], "29096": 1358, "290994": [892, 932], "292432": [950, 1327], "292893": [474, 818, 1088, 1327], "2_color_scal": [46, 328], "2d": [260, 285, 286, 328, 447, 628, 778, 818, 881, 932, 1033, 1040], "2h": [631, 633, 635, 637, 639, 642, 644, 646, 818], "2i": [219, 328, 858, 932], "2m": [938, 1053], "2x": 171, "3": [1, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 33, 41, 43, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 61, 65, 66, 84, 101, 104, 106, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 145, 147, 151, 152, 153, 156, 162, 164, 165, 166, 167, 168, 171, 172, 173, 174, 176, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 337, 338, 339, 340, 342, 353, 354, 355, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 427, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 517, 518, 519, 520, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 587, 588, 589, 590, 591, 592, 594, 596, 598, 599, 602, 605, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 658, 660, 661, 662, 665, 666, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 703, 704, 709, 710, 713, 714, 715, 716, 717, 718, 720, 724, 725, 728, 729, 730, 732, 733, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 937, 938, 943, 944, 947, 949, 951, 952, 953, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 990, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1036, 1037, 1040, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1052, 1053, 1054, 1059, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1071, 1072, 1074, 1076, 1078, 1079, 1081, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1133, 1134, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1245, 1247, 1248, 1249, 1252, 1253, 1254, 1257, 1258, 1259, 1260, 1262, 1263, 1267, 1268, 1269, 1270, 1271, 1275, 1282, 1283, 1288, 1289, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1307, 1308, 1309, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327, 1332, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358], "30": [46, 197, 207, 219, 223, 252, 258, 281, 302, 328, 331, 351, 352, 353, 421, 429, 431, 432, 436, 439, 441, 442, 443, 444, 446, 449, 451, 452, 453, 455, 457, 458, 465, 466, 496, 574, 653, 760, 777, 778, 804, 805, 818, 844, 850, 858, 876, 902, 932, 938, 1028, 1036, 1055, 1062, 1063, 1068, 1069, 1076, 1107, 1327, 1332, 1343, 1344, 1347, 1349, 1350, 1352, 1353, 1356, 1358], "300": [281, 328, 495, 606, 623, 818, 938, 1208, 1214, 1215, 1217, 1327, 1347], "3000": 938, "3002": [428, 440, 1035, 1050], "30103": [562, 818, 1349], "3022416320763508302": [1108, 1327], "30_000": [46, 328], "30m": [219, 328, 452, 465, 858, 932, 1063, 1076], "30t16": 457, "31": [61, 197, 275, 328, 428, 429, 433, 440, 444, 447, 450, 458, 672, 702, 757, 760, 769, 778, 797, 844, 932, 938, 1033, 1035, 1036, 1040, 1050, 1055, 1061, 1068, 1069, 1207, 1251, 1281, 1327, 1351, 1353, 1358], "31t06": 1068, "32": [59, 71, 77, 81, 91, 229, 234, 260, 328, 589, 628, 653, 818, 863, 881, 932, 1029, 1059, 1196, 1218, 1327, 1344, 1350], "321": [33, 1358], "3212": [706, 1285], "321cba": 1350, "3265500": 938, "32971": [468, 1079], "32974": [468, 1079], "32976": [468, 1079], "32bit": [285, 328], "33": [197, 245, 328, 647, 818, 844, 873, 932, 1218, 1327, 1351], "333": [22, 648, 818, 1084, 1192, 1224, 1327], "33333": 1353, "333333": [225, 328, 591, 777, 861, 932, 1196, 1222, 1327, 1344], "34": [197, 328, 688, 702, 844, 932, 1268, 1281], "3420": [706, 1285], "343622": [658, 818], "345": [402, 403, 683, 684, 1005, 1006, 1262, 1263], "3450": [1224, 1327], "3456": 938, "34776706224699483": [1238, 1327], "35": [46, 328, 421, 457, 760, 818, 1028, 1327], "350": [328, 331, 495, 606, 818, 1215, 1327, 1332], "3500": [1224, 1327], "356": [433, 448, 467], "356194": [740, 741, 1352], "357": [433, 448, 467], "358": [433, 448, 467], "359": [433, 448, 467], "36": [197, 328, 844, 932, 1355], "360": [419, 617, 818, 1352], "361": 1358, "363961": [554, 1168], "366": [448, 1059], "37": [18, 938], "370h": [474, 818, 1088, 1327], "37338": 1358, "38": [46, 136, 169, 172, 328], "38180177416060584": [640, 818, 1219, 1327], "381802": [640, 818, 1219, 1327], "386294": [563, 818, 1177, 1327, 1349], "389056": [478, 818, 1091, 1327, 1349], "39": [644, 769, 818], "39m": 938, "3_color_scal": [46, 328], "3d12h4m25": [219, 234, 260, 298, 328, 452, 465, 474, 628, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1063, 1076, 1088, 1327], "3f": [145, 702, 705, 1281, 1284], "3i": [219, 260, 328, 858, 932], "3rd": [1258, 1282], "3xy": [667, 1246], "4": [1, 14, 19, 23, 31, 41, 43, 45, 46, 47, 48, 51, 57, 58, 59, 60, 61, 65, 66, 84, 104, 129, 130, 131, 132, 133, 134, 135, 136, 139, 156, 164, 176, 186, 187, 188, 189, 190, 191, 192, 196, 198, 202, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 245, 247, 248, 249, 251, 252, 253, 254, 260, 262, 263, 270, 271, 274, 278, 279, 280, 281, 282, 283, 286, 289, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 307, 308, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 341, 343, 355, 362, 363, 364, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 379, 380, 386, 397, 398, 399, 402, 403, 405, 406, 407, 411, 412, 415, 416, 417, 419, 422, 429, 432, 433, 440, 448, 449, 450, 451, 452, 453, 454, 457, 459, 462, 464, 465, 467, 471, 472, 474, 478, 479, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 497, 499, 501, 502, 503, 504, 513, 514, 518, 519, 520, 527, 528, 529, 530, 531, 533, 534, 536, 544, 546, 547, 548, 549, 550, 551, 552, 556, 557, 562, 565, 566, 567, 587, 589, 591, 592, 594, 596, 598, 599, 602, 603, 604, 607, 608, 610, 611, 612, 613, 616, 618, 622, 623, 624, 625, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 652, 655, 659, 660, 661, 662, 665, 667, 671, 674, 677, 679, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 700, 701, 702, 703, 707, 712, 713, 715, 716, 717, 718, 720, 723, 724, 725, 726, 732, 733, 735, 737, 738, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 753, 754, 755, 756, 757, 760, 761, 762, 764, 766, 767, 771, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 814, 818, 833, 834, 836, 837, 838, 839, 840, 843, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 876, 877, 878, 881, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 905, 906, 908, 909, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 937, 938, 942, 947, 950, 957, 964, 966, 967, 968, 970, 971, 972, 973, 974, 976, 978, 979, 980, 981, 982, 983, 989, 1000, 1005, 1006, 1011, 1012, 1014, 1020, 1025, 1027, 1029, 1039, 1043, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1065, 1070, 1073, 1075, 1076, 1077, 1078, 1085, 1088, 1092, 1093, 1095, 1096, 1101, 1102, 1104, 1109, 1110, 1113, 1114, 1115, 1116, 1120, 1123, 1124, 1125, 1126, 1128, 1134, 1141, 1142, 1143, 1144, 1145, 1150, 1154, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1170, 1171, 1186, 1189, 1190, 1193, 1196, 1197, 1198, 1199, 1203, 1204, 1207, 1208, 1209, 1212, 1216, 1218, 1219, 1220, 1221, 1222, 1225, 1227, 1231, 1232, 1235, 1238, 1239, 1240, 1244, 1246, 1250, 1253, 1256, 1258, 1262, 1263, 1265, 1266, 1271, 1273, 1274, 1279, 1280, 1281, 1282, 1286, 1291, 1292, 1295, 1297, 1299, 1305, 1308, 1310, 1312, 1318, 1327, 1332, 1336, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1355, 1356, 1357, 1358], "40": [46, 197, 207, 234, 252, 328, 452, 457, 465, 496, 560, 706, 717, 818, 844, 863, 876, 932, 938, 1045, 1076, 1174, 1285, 1343, 1344, 1347, 1350], "400": [297, 328, 460, 461, 463, 899, 932, 1214, 1215, 1217, 1327, 1347], "4000000": [1086, 1327], "404": [235, 328, 673, 675, 864, 932, 1252, 1254], "4096": 1349, "41": [197, 328, 644, 818, 844, 932, 1344, 1358], "412277": 172, "414214": [662, 818, 1241, 1327, 1349], "4160": 61, "416147": 1352, "4164": [234, 328, 863, 932], "42": [61, 197, 220, 245, 260, 328, 457, 628, 818, 844, 873, 881, 932, 1108, 1327, 1343, 1357], "424778": [617, 818], "428571": [473, 818, 1087, 1327], "429101": 1344, "4294967296": [51, 328], "43": [197, 260, 328, 416, 628, 644, 818, 844, 881, 932], "4321": 938, "433013": [641, 818, 892, 932], "44": [16, 245, 328, 422, 818, 873, 932], "4411": [234, 328, 863, 932], "44225": [1010, 1327], "444": 16, "44444444444": 16, "45": [46, 197, 260, 328, 429, 452, 465, 628, 644, 667, 674, 714, 741, 760, 778, 804, 805, 818, 844, 881, 932, 938, 1036, 1063, 1068, 1076, 1246, 1253, 1294, 1349, 1350, 1352, 1356, 1358], "450": [1215, 1327], "45000": 796, "4500000": 938, "456": [15, 16, 429, 938, 1036, 1304, 1327], "456000": [429, 1036], "456001\u00b5": 938, "4566": [234, 328, 863, 932], "456789": [457, 938, 1064], "456789\u00b5": 938, "456m": 938, "457658": 1352, "459148": [470, 818], "46": 938, "4696": [234, 328, 863, 932], "47": [57, 197, 328, 644, 818, 844, 932, 938, 1344], "470": [877, 932], "47033": [640, 818, 1219, 1327], "47033046033698594": [640, 818, 1219, 1327], "475": [877, 932], "48": [18, 172, 260, 328, 628, 717, 818, 881, 932, 938], "4827": [234, 328, 863, 932], "485": 1358, "49": [197, 328, 844, 932, 938], "492474": [474, 818, 1088, 1327], "498": [235, 328, 864, 932], "4_500_000": 938, "4ab4a": 1350, "4d": [474, 818, 1088, 1327], "4f6228": [46, 328], "4f71": [46, 328], "4x": [231, 328], "5": [1, 13, 14, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 41, 43, 45, 47, 48, 51, 57, 58, 60, 61, 65, 104, 129, 132, 133, 134, 135, 136, 138, 143, 164, 165, 167, 170, 172, 176, 187, 190, 191, 192, 197, 198, 201, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 227, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 247, 248, 249, 251, 253, 254, 255, 260, 263, 270, 271, 274, 275, 278, 279, 280, 281, 282, 283, 285, 286, 289, 290, 292, 295, 296, 297, 298, 301, 302, 304, 305, 307, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 337, 338, 341, 356, 357, 362, 363, 364, 366, 368, 372, 377, 379, 385, 386, 397, 398, 399, 402, 403, 406, 407, 417, 418, 419, 421, 422, 425, 428, 429, 430, 431, 432, 436, 439, 440, 441, 442, 446, 451, 453, 454, 455, 457, 458, 464, 468, 472, 474, 476, 477, 480, 482, 486, 487, 491, 492, 494, 497, 499, 502, 504, 507, 510, 511, 512, 513, 514, 518, 520, 527, 530, 531, 533, 534, 536, 539, 541, 542, 546, 547, 548, 549, 550, 551, 555, 556, 560, 566, 587, 589, 591, 603, 607, 608, 609, 610, 611, 612, 613, 615, 616, 618, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 638, 641, 643, 644, 645, 646, 647, 650, 661, 667, 677, 678, 679, 682, 683, 684, 703, 707, 718, 720, 724, 725, 726, 738, 740, 741, 743, 744, 745, 746, 747, 749, 751, 753, 754, 755, 756, 757, 758, 760, 763, 764, 765, 766, 767, 771, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 796, 797, 799, 801, 802, 803, 807, 814, 818, 836, 837, 838, 839, 840, 844, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 870, 871, 877, 881, 887, 888, 889, 890, 891, 892, 893, 894, 898, 899, 901, 902, 905, 906, 908, 910, 911, 912, 913, 916, 917, 918, 919, 920, 921, 922, 923, 932, 938, 947, 950, 954, 957, 960, 961, 964, 966, 967, 968, 970, 972, 976, 981, 982, 983, 988, 989, 1000, 1005, 1012, 1014, 1021, 1025, 1026, 1027, 1028, 1029, 1032, 1035, 1036, 1037, 1038, 1039, 1040, 1050, 1062, 1064, 1065, 1066, 1068, 1069, 1075, 1077, 1078, 1079, 1085, 1088, 1090, 1092, 1093, 1094, 1104, 1109, 1110, 1113, 1115, 1119, 1122, 1134, 1141, 1144, 1145, 1150, 1153, 1156, 1160, 1161, 1162, 1163, 1164, 1165, 1169, 1170, 1174, 1178, 1186, 1193, 1196, 1197, 1198, 1201, 1202, 1203, 1204, 1208, 1209, 1212, 1213, 1214, 1215, 1217, 1218, 1221, 1225, 1227, 1232, 1238, 1241, 1246, 1256, 1257, 1258, 1261, 1262, 1282, 1286, 1299, 1306, 1308, 1311, 1312, 1315, 1318, 1327, 1332, 1337, 1340, 1342, 1344, 1345, 1346, 1349, 1350, 1351, 1352, 1355, 1357, 1358], "50": [18, 33, 46, 197, 207, 217, 328, 407, 452, 457, 465, 758, 759, 818, 844, 932, 938, 1014, 1027, 1076, 1267, 1327, 1343, 1344], "500": [46, 297, 328, 331, 431, 432, 436, 439, 441, 442, 446, 453, 455, 899, 932, 1049, 1051, 1057, 1214, 1215, 1217, 1327, 1332], "5000": [290, 328, 1311, 1327], "50000": 143, "500000": [439, 1049], "500000000": [446, 1057], "5000555": 938, "500_000": [431, 432, 436, 439, 441, 442, 446, 453, 455], "500m": [1049, 1051, 1057], "51": 938, "512": [51, 144, 231, 328, 386, 613, 818, 989, 1196, 1327], "51966": [707, 1286], "52": [302, 328, 466, 647, 818, 902, 932], "523599": 1352, "527525": [1220, 1327], "53": [466, 1077, 1355], "533316061": 1336, "533_316_061": 1336, "54": [478, 818, 1130, 1327, 1349, 1358], "540": [419, 617, 818], "540302": 1352, "543": 15, "543081": [409, 818, 1017, 1327], "5432": 144, "54321": 15, "544": 1358, "544705": 749, "549306": [954, 1327], "55": [46, 59, 328, 500, 818, 1112, 1327, 1346, 1350, 1351], "5555": 938, "55550": 938, "56": [136, 688, 721, 818, 1268], "566371": [617, 818], "567": 33, "56789": [1011, 1100, 1223, 1327], "57": [644, 818, 1223, 1327, 1352, 1358], "570796": [345, 347, 818, 949, 951, 1327, 1352], "575050513": [169, 172], "58": [253, 328], "581139": [1027, 1327], "584963": [561, 818], "587401": [405, 818, 1349], "59": [136, 197, 328, 429, 442, 450, 453, 457, 487, 760, 804, 805, 806, 818, 844, 932, 938, 1036, 1053, 1061, 1064], "59815": [478, 818, 1349], "5_000_555": 938, "5th": [46, 328], "6": [1, 14, 19, 41, 43, 45, 46, 47, 48, 49, 50, 51, 56, 58, 60, 65, 96, 97, 104, 129, 132, 133, 134, 135, 151, 152, 164, 187, 190, 193, 194, 198, 199, 200, 202, 203, 204, 206, 207, 210, 213, 214, 215, 216, 217, 219, 221, 223, 224, 225, 227, 229, 230, 231, 233, 234, 237, 238, 239, 240, 241, 242, 243, 246, 247, 250, 253, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 268, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 311, 321, 322, 328, 331, 332, 337, 341, 362, 363, 364, 366, 372, 380, 398, 399, 402, 403, 415, 416, 422, 425, 429, 433, 443, 447, 448, 449, 460, 461, 463, 466, 467, 470, 472, 481, 482, 487, 488, 491, 497, 499, 502, 520, 521, 522, 531, 534, 547, 548, 549, 550, 554, 566, 567, 603, 607, 614, 617, 618, 619, 624, 626, 628, 630, 632, 634, 636, 638, 641, 643, 644, 645, 650, 655, 661, 667, 672, 683, 684, 707, 718, 720, 725, 733, 735, 737, 744, 746, 753, 754, 755, 757, 760, 764, 767, 773, 779, 780, 784, 797, 801, 814, 818, 836, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 854, 855, 856, 858, 859, 861, 862, 863, 865, 867, 868, 875, 877, 879, 881, 882, 883, 885, 887, 888, 889, 890, 891, 894, 897, 898, 901, 902, 905, 906, 912, 922, 923, 932, 938, 964, 966, 967, 968, 970, 976, 1005, 1012, 1016, 1018, 1023, 1024, 1029, 1032, 1058, 1068, 1078, 1085, 1092, 1104, 1110, 1135, 1136, 1145, 1148, 1161, 1162, 1163, 1164, 1168, 1186, 1200, 1203, 1204, 1209, 1211, 1216, 1218, 1220, 1222, 1227, 1232, 1235, 1246, 1251, 1262, 1286, 1298, 1308, 1327, 1332, 1337, 1340, 1342, 1344, 1345, 1349, 1355, 1356, 1358], "60": [46, 139, 207, 253, 328, 436, 441, 442, 453, 464, 487, 644, 702, 818, 1059, 1064, 1075, 1205, 1281, 1327, 1352], "600": [297, 328, 460, 461, 463, 899, 932, 938], "60000": 439, "600000": 938, "60000000": 446, "60206": [562, 818, 1349], "605551": 799, "605551275463989": 799, "609438": 1349, "60_000": [431, 432, 436, 439, 441, 442, 446, 453, 455], "61": [253, 328], "625": [638, 818], "626172": [669, 1248], "63": [644, 818], "63204": 1358, "6331e16": [1300, 1327, 1352], "636253": 1352, "64": [1, 59, 61, 72, 74, 78, 82, 89, 92, 163, 186, 290, 328, 410, 589, 613, 818, 1196, 1199, 1327, 1349], "64030": [707, 1286], "642093": 1352, "647961": 172, "64bit": [164, 620, 818, 1205, 1327], "65": [201, 328, 847, 932, 1082, 1327], "650": [495, 606, 818], "65280": [707, 1286], "654": [33, 797, 891, 932], "65432": 1353, "654321": 575, "65536": 1349, "65552": [385, 988], "66": [234, 297, 328, 644, 733, 818, 863, 899, 932, 1130, 1218, 1327], "663053": 136, "666": 938, "666000": 938, "666667": [197, 225, 299, 316, 328, 473, 777, 783, 818, 844, 861, 900, 917, 932, 1087, 1327], "666f6f": [669, 1248], "67500": 796, "676": [235, 328, 864, 932], "678": [667, 674, 1246, 1253], "6789": [34, 938], "67890": 34, "686241": 1344, "69": [644, 818, 1130, 1327], "693147": [563, 818, 1175, 1177, 1327, 1349], "6_000_000": 1336, "7": [1, 22, 33, 41, 43, 45, 46, 47, 48, 49, 50, 51, 58, 60, 65, 151, 152, 164, 179, 187, 190, 193, 194, 195, 197, 199, 200, 203, 204, 206, 210, 213, 215, 219, 221, 223, 225, 233, 237, 239, 241, 243, 245, 246, 250, 253, 255, 257, 258, 260, 261, 263, 264, 265, 266, 268, 271, 273, 276, 277, 278, 279, 284, 286, 287, 288, 296, 298, 299, 300, 328, 331, 332, 337, 341, 363, 364, 366, 375, 416, 428, 429, 433, 440, 448, 451, 452, 457, 465, 467, 478, 491, 497, 502, 503, 520, 534, 547, 548, 549, 550, 607, 608, 618, 624, 628, 643, 644, 661, 677, 706, 720, 744, 753, 754, 757, 760, 761, 767, 772, 779, 780, 797, 801, 818, 836, 841, 842, 844, 846, 849, 851, 854, 856, 858, 859, 861, 862, 867, 873, 875, 878, 879, 881, 882, 883, 887, 891, 894, 932, 938, 954, 967, 968, 970, 979, 1035, 1036, 1040, 1045, 1050, 1062, 1063, 1068, 1076, 1078, 1091, 1114, 1129, 1148, 1161, 1162, 1163, 1164, 1208, 1209, 1221, 1227, 1256, 1285, 1327, 1332, 1337, 1342, 1344, 1345, 1346, 1349, 1351, 1355, 1358], "70": [197, 328, 733, 761, 818, 844, 932, 1130, 1327, 1344], "700": [297, 328, 899, 932], "702963": [46, 328], "7051579356916758811": 158, "707107": [374, 475, 641, 642, 740, 818, 978, 1089, 1327, 1352], "712389": 1352, "714": 1358, "714286": [503, 818, 1114, 1327], "718281828459045": [16, 470, 561, 818, 1082, 1175, 1327], "718282": [478, 818, 1091, 1327, 1349], "720": [419, 617, 818], "7264": 1358, "732051": [1241, 1327], "7415e16": 172, "742": [235, 328, 864, 932], "75": [46, 197, 201, 328, 341, 607, 615, 630, 632, 634, 636, 641, 643, 645, 777, 780, 818, 844, 847, 932, 938, 1027, 1110, 1130, 1201, 1267, 1327, 1344, 1352, 1358], "7500": [232, 328], "7508": 1358, "754": [726, 818], "754888": [470, 818], "761594": [722, 818, 1301, 1327], "7654": 938, "765431": 1064, "7654321": 33, "76933c": [46, 328], "77": 1068, "78": [15, 688, 1268], "780": 15, "784": [234, 328, 863, 932], "785398": [349, 740, 741, 818, 953, 1327, 1352], "789": [16, 938], "79": [1130, 1327], "7d": 938, "8": [1, 17, 41, 43, 45, 47, 48, 49, 50, 51, 52, 57, 58, 60, 61, 65, 83, 87, 93, 151, 152, 164, 187, 190, 193, 194, 195, 197, 199, 200, 202, 203, 204, 206, 210, 213, 215, 217, 221, 223, 230, 233, 234, 235, 237, 238, 239, 241, 243, 246, 255, 257, 258, 260, 261, 263, 264, 265, 266, 268, 271, 273, 275, 276, 277, 279, 284, 286, 287, 288, 296, 299, 300, 302, 328, 341, 343, 355, 363, 364, 366, 413, 416, 417, 429, 457, 491, 498, 502, 503, 528, 530, 534, 547, 548, 549, 550, 589, 607, 608, 613, 624, 625, 629, 653, 659, 661, 685, 686, 687, 702, 733, 738, 744, 749, 751, 754, 756, 764, 766, 771, 772, 775, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 797, 799, 802, 803, 807, 818, 836, 841, 842, 844, 846, 848, 849, 851, 854, 856, 859, 862, 863, 864, 867, 868, 877, 879, 882, 883, 887, 891, 894, 902, 932, 938, 967, 968, 970, 1018, 1025, 1045, 1110, 1114, 1129, 1142, 1144, 1148, 1161, 1162, 1163, 1164, 1196, 1199, 1209, 1212, 1213, 1216, 1218, 1220, 1222, 1265, 1266, 1281, 1327, 1336, 1337, 1342, 1344, 1345, 1346, 1349, 1350, 1351, 1355, 1358], "80": [46, 201, 328, 847, 932], "800": [460, 461, 463, 1068], "8000": 144, "803065983": 136, "81": 1349, "814697265625": [1086, 1327], "816497": [276, 328], "8192": 142, "82": [234, 328, 863, 932], "8257e14": 1358, "83": [234, 328, 863, 932], "833": [234, 328, 863, 932], "833333": [316, 917], "848062": 1352, "848808": 172, "85": [46, 328, 1130, 1327, 1358], "850": [495, 606, 818], "8568409950394724": [1082, 1327], "8589934592": [653, 818], "86": 1358, "8601": 1350, "87": 1358, "876": 15, "88": [197, 328, 844, 932], "881374": [348, 818, 952, 1327], "888": [797, 891, 932], "8_000_000": 1336, "8a": [985, 986], "8nin": 1358, "9": [1, 15, 41, 43, 45, 46, 47, 48, 51, 57, 65, 187, 195, 197, 210, 212, 221, 225, 233, 235, 237, 238, 253, 260, 262, 263, 266, 278, 279, 296, 300, 302, 321, 328, 337, 341, 343, 355, 363, 364, 366, 371, 373, 413, 416, 419, 429, 457, 483, 491, 502, 508, 528, 534, 545, 553, 591, 607, 608, 617, 624, 628, 629, 640, 643, 644, 655, 659, 674, 706, 714, 717, 747, 753, 754, 757, 760, 772, 806, 818, 844, 854, 859, 861, 862, 864, 867, 881, 883, 894, 902, 922, 932, 938, 962, 963, 967, 968, 970, 975, 977, 1027, 1040, 1049, 1051, 1057, 1063, 1076, 1077, 1120, 1129, 1142, 1148, 1159, 1167, 1209, 1213, 1219, 1221, 1223, 1235, 1253, 1285, 1294, 1327, 1336, 1337, 1342, 1345, 1346, 1355], "90": [197, 235, 328, 706, 844, 864, 932, 1285, 1344, 1352], "90000": 796, "901234": [1011, 1100, 1223, 1327], "909": [234, 328, 863, 932], "910": [234, 328, 674, 863, 932, 1253], "910t": [667, 674, 1246, 1253], "914": [234, 328, 863, 932], "9223372036854775807": [729, 818], "9223372036854775808": [564, 818], "927295": 1352, "928571": [476, 818, 1090, 1327], "93": [1130, 1327], "94": [338, 818], "9477376373212048": [1130, 1327], "95": [23, 338, 818, 938], "95b3d7": [46, 328], "96": [23, 197, 328, 338, 818, 844, 932, 1130, 1327], "961": 61, "963624": [475, 818, 1089, 1327], "964028": [253, 328], "96_067_179": 1336, "97": [23, 224, 328, 338, 818, 1130, 1327], "9774092659964970114": [496, 818], "978307200": [435, 1042], "978307200000": 456, "978307200000000": [435, 456, 1042, 1067], "978307200000000000": 1067, "978393600": [435, 1042], "978393600000": 456, "978393600000000": [435, 456, 1042, 1067], "978393600000000000": 1067, "978480000": [435, 1042], "978480000000": 456, "978480000000000": [435, 456, 1042, 1067], "978480000000000000": 1067, "98": [23, 224, 253, 328, 397, 490, 493, 660, 706, 724, 818, 1285], "987": [33, 575], "987000": 938, "9876": 15, "987654": [33, 938], "987654321": 16, "9876543210": 136, "987m": 938, "988": 16, "99": [23, 46, 208, 209, 224, 227, 253, 297, 328, 338, 397, 480, 482, 490, 493, 660, 724, 808, 818, 852, 853, 899, 932, 1068, 1082, 1094, 1327, 1349], "9914e218": 172, "993": [1110, 1327], "998347": [253, 328], "999": [428, 440, 938, 1035, 1050, 1347, 1358], "999000": 938, "999954": [253, 328], "999999": [450, 712, 760, 804, 805, 806, 938, 1061, 1068, 1291], "999999\u00b5": 938, "9bbb59": [46, 328], "A": [19, 43, 46, 51, 52, 63, 64, 69, 75, 136, 142, 143, 144, 145, 156, 158, 163, 178, 194, 203, 212, 219, 234, 240, 242, 247, 253, 278, 281, 296, 297, 298, 302, 303, 328, 336, 403, 423, 424, 429, 454, 457, 471, 472, 480, 492, 494, 506, 509, 511, 512, 518, 558, 565, 566, 579, 593, 602, 603, 625, 630, 632, 634, 636, 638, 641, 643, 645, 665, 666, 667, 673, 674, 675, 676, 677, 678, 679, 682, 684, 688, 689, 690, 692, 703, 712, 747, 763, 764, 768, 818, 842, 849, 858, 863, 879, 899, 902, 903, 932, 938, 1006, 1030, 1031, 1036, 1065, 1068, 1084, 1094, 1192, 1214, 1215, 1217, 1220, 1221, 1222, 1244, 1245, 1246, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1261, 1263, 1267, 1268, 1269, 1271, 1282, 1291, 1327, 1336, 1337, 1340, 1353, 1355], "AND": [734, 735, 797, 938, 1346], "ANDs": [388, 818, 991, 1327], "AS": [275, 328, 797, 798, 891, 932, 1336, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1357], "And": [710, 1289], "As": [18, 56, 96, 97, 129, 131, 132, 133, 135, 147, 151, 152, 160, 210, 285, 290, 328, 558, 808, 854, 932], "At": [51, 253, 328], "BY": [797, 891, 932, 1336, 1339, 1345, 1354, 1355], "Be": 932, "By": [11, 18, 20, 36, 57, 142, 143, 156, 219, 233, 234, 260, 262, 271, 276, 298, 299, 328, 372, 447, 452, 465, 551, 554, 560, 608, 623, 628, 631, 633, 635, 637, 639, 642, 644, 646, 652, 663, 731, 751, 758, 759, 761, 762, 763, 778, 799, 805, 806, 807, 818, 839, 858, 862, 863, 881, 887, 892, 900, 932, 976, 1058, 1063, 1076, 1165, 1208, 1231, 1242, 1317, 1327], "For": [20, 45, 46, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 201, 202, 207, 233, 234, 253, 260, 285, 314, 328, 331, 444, 445, 457, 473, 475, 476, 487, 558, 567, 579, 620, 658, 665, 673, 674, 675, 677, 679, 703, 753, 763, 767, 768, 814, 818, 847, 848, 863, 881, 915, 932, 936, 1068, 1087, 1089, 1090, 1093, 1180, 1205, 1238, 1244, 1252, 1253, 1254, 1256, 1258, 1282, 1306, 1327, 1332], "IF": 1348, "If": [7, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 63, 64, 65, 73, 129, 130, 131, 132, 133, 134, 135, 139, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 173, 174, 175, 186, 190, 202, 207, 210, 217, 219, 221, 229, 230, 231, 233, 234, 237, 238, 242, 249, 253, 260, 262, 263, 264, 268, 271, 273, 275, 278, 279, 282, 283, 285, 286, 292, 293, 295, 296, 297, 328, 331, 340, 342, 365, 372, 377, 385, 399, 425, 429, 430, 444, 445, 454, 457, 483, 498, 504, 516, 537, 546, 551, 552, 558, 566, 567, 574, 575, 581, 583, 608, 613, 615, 618, 620, 622, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 652, 654, 658, 659, 664, 674, 675, 677, 679, 680, 681, 692, 693, 694, 695, 697, 698, 699, 702, 703, 704, 705, 709, 712, 730, 734, 736, 739, 743, 744, 748, 749, 753, 758, 759, 761, 762, 763, 766, 767, 773, 774, 775, 777, 778, 780, 784, 790, 793, 794, 795, 800, 802, 805, 806, 808, 809, 818, 839, 840, 848, 850, 854, 858, 862, 863, 868, 872, 879, 881, 885, 887, 889, 891, 896, 898, 899, 907, 915, 925, 932, 936, 937, 938, 945, 946, 969, 976, 981, 988, 1001, 1014, 1032, 1036, 1037, 1055, 1056, 1065, 1068, 1093, 1109, 1110, 1115, 1129, 1130, 1134, 1151, 1160, 1165, 1166, 1172, 1180, 1199, 1201, 1203, 1205, 1207, 1208, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1227, 1229, 1231, 1234, 1238, 1239, 1243, 1253, 1254, 1256, 1258, 1259, 1260, 1267, 1271, 1272, 1273, 1274, 1276, 1277, 1278, 1281, 1282, 1283, 1284, 1288, 1291, 1299, 1302, 1306, 1308, 1316, 1327, 1332, 1336, 1337, 1339, 1347, 1350, 1355], "In": [57, 64, 144, 146, 157, 158, 161, 172, 176, 182, 187, 205, 207, 210, 219, 234, 235, 238, 249, 253, 260, 286, 295, 328, 331, 566, 567, 608, 628, 688, 689, 818, 840, 854, 858, 863, 864, 881, 898, 932, 1086, 1093, 1199, 1204, 1268, 1327, 1332], "It": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 56, 63, 64, 73, 75, 79, 97, 139, 146, 152, 154, 156, 157, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 184, 197, 235, 245, 252, 275, 285, 290, 297, 305, 314, 328, 331, 332, 417, 418, 498, 558, 567, 578, 615, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 746, 777, 814, 818, 835, 839, 840, 844, 850, 864, 868, 873, 891, 899, 906, 915, 932, 940, 1009, 1025, 1026, 1110, 1201, 1213, 1216, 1218, 1219, 1226, 1228, 1306, 1311, 1327, 1332], "Its": [220, 328, 496, 818, 1108, 1327], "NO": 938, "NOT": [132, 230, 269, 328, 558, 577, 651, 818, 886, 932, 1355], "No": [26, 233, 328, 862, 932], "Not": [208, 233, 328, 481, 511, 512, 818, 839, 852, 862, 932, 1095, 1327], "ON": 1355, "OR": [736, 737, 854, 932, 938, 1346], "ORs": [393, 818, 996, 1327], "On": [726, 818, 866, 932], "One": [57, 197, 249, 285, 290, 328, 341, 607, 738, 750, 766, 772, 775, 783, 785, 788, 789, 798, 818, 844, 932, 938, 1027, 1327], "Or": [218, 219, 234, 260, 274, 298, 307, 328, 331, 474, 628, 661, 758, 759, 761, 762, 805, 806, 808, 814, 818, 857, 858, 863, 881, 890, 908, 932, 1088, 1327], "That": [148, 868, 932], "The": [7, 26, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 62, 63, 66, 71, 72, 74, 75, 76, 84, 88, 89, 97, 98, 100, 129, 131, 132, 133, 135, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 172, 173, 174, 176, 178, 189, 197, 198, 200, 201, 202, 203, 206, 207, 210, 217, 218, 219, 220, 225, 231, 233, 234, 235, 238, 245, 251, 253, 260, 261, 262, 263, 266, 267, 268, 275, 285, 286, 291, 294, 298, 302, 303, 305, 306, 307, 314, 328, 339, 380, 381, 382, 383, 397, 398, 418, 420, 423, 424, 425, 433, 443, 447, 448, 452, 454, 457, 465, 466, 477, 480, 483, 487, 488, 496, 529, 533, 566, 567, 581, 608, 615, 618, 621, 622, 623, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 655, 658, 664, 668, 669, 673, 678, 679, 680, 681, 686, 687, 688, 689, 697, 698, 699, 700, 701, 702, 703, 713, 717, 723, 724, 725, 744, 747, 765, 769, 778, 780, 794, 795, 796, 797, 800, 808, 810, 811, 813, 814, 818, 819, 820, 823, 825, 826, 827, 834, 839, 844, 845, 847, 848, 850, 851, 854, 857, 858, 861, 862, 863, 864, 868, 873, 877, 881, 883, 884, 885, 891, 895, 897, 902, 903, 906, 908, 915, 932, 936, 937, 938, 944, 947, 984, 985, 986, 1000, 1013, 1026, 1027, 1030, 1031, 1032, 1040, 1054, 1058, 1059, 1063, 1065, 1068, 1076, 1077, 1093, 1094, 1097, 1108, 1143, 1147, 1180, 1199, 1201, 1203, 1207, 1208, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1235, 1238, 1243, 1247, 1248, 1257, 1258, 1259, 1260, 1265, 1266, 1267, 1268, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1308, 1310, 1312, 1319, 1321, 1323, 1327, 1328, 1333, 1334, 1335, 1336, 1341, 1355, 1356, 1358], "Then": 161, "There": 1355, "These": [1, 38, 46, 138, 144, 145, 182, 292, 328, 465, 817, 818, 936, 1063, 1076], "To": [45, 64, 208, 328, 407, 423, 424, 481, 482, 665, 672, 673, 674, 677, 688, 689, 698, 699, 700, 701, 710, 818, 852, 932, 1014, 1030, 1031, 1095, 1244, 1251, 1252, 1253, 1256, 1267, 1268, 1289, 1308, 1327, 1355], "Will": [63, 64, 839, 840, 850, 877, 888, 932, 1327], "With": [151, 229, 271, 328, 372, 551, 652, 818, 839, 887, 932, 976, 1129, 1165, 1231, 1327], "_": [1, 57, 61, 182, 253, 283, 287, 328, 365, 402, 403, 537, 666, 674, 676, 678, 683, 684, 690, 693, 694, 1005, 1006, 1008, 1245, 1253, 1257, 1262, 1263, 1269, 1273, 1303, 1327], "__array_ufunc__": 940, "__call__": 814, "__dataframe__": 130, "__enter__": 1355, "__exit__": 1355, "__getattr__": 814, "__getitem__": 713, "__init__": [1, 2, 37, 38, 39, 40, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 169, 907, 1355], "__name__": [232, 328], "_bar_": 768, "_btm_by_a": [398, 818], "_btm_by_b": [398, 818], "_by_ca": [398, 725, 818], "_by_cb": [398, 725, 818], "_check_ord": [63, 64, 839, 840, 850, 877, 888, 932], "_df": [1, 58], "_diff": [302, 328, 902, 932], "_eager": [558, 839, 932], "_expr": [1, 59], "_foo": 572, "_geventdataframeresult": [64, 840, 932], "_is_not_nan": [512, 818], "_is_odd": [266, 328, 883, 932], "_isnan": [511, 818], "_isnul": [514, 818], "_kwarg": [839, 932], "_ldf": 1, "_lf": 60, "_lower_boundari": [219, 328, 858, 932], "_mean_squar": [307, 908], "_not_nul": [513, 818], "_o": [402, 403, 683, 684, 1005, 1006, 1262, 1263], "_revers": [592, 596, 625, 818], "_right": [233, 234, 235, 328, 862, 863, 864, 932], "_storage_account": 39, "_suffix": 597, "_sum": [307, 908], "_top_by_a": [725, 818], "_top_by_b": [725, 818], "_train": [904, 932], "_type_check": [52, 53, 54, 55, 63, 64, 839, 840, 850, 877, 888, 932], "_upper_boundari": [219, 328, 858, 932], "_verbos": 39, "_world": 768, "a1": [46, 58, 60, 328], "a101": 1358, "a123": [46, 328], "a2": [46, 58, 60, 328], "a_1": [694, 1273, 1303, 1327], "a_2": [1303, 1327], "a_3": [1303, 1327], "a_a": 798, "a_agg_list": [219, 328, 858, 932], "a_b_doubl": 764, "a_btm_by_a": [398, 818], "a_btm_by_b": [398, 818], "a_by_ca": [398, 725, 818], "a_by_cb": [398, 725, 818], "a_div_2": 1349, "a_div_5": 1349, "a_interpol": [503, 818], "a_is_even": [275, 328, 797, 891, 932], "a_isnul": [514, 818], "a_lag_": 747, "a_log2": 1349, "a_mod_2": 1349, "a_not_nul": [513, 818], "a_revers": [592, 596, 625, 818], "a_rol": 747, "a_suffix": 597, "a_times_2": [567, 818], "a_times_b": [566, 818], "a_top_by_a": [725, 818], "a_top_by_b": [725, 818], "a_txt": 798, "aa": [477, 665, 677, 765, 818, 938, 1027, 1244, 1256, 1327, 1350], "aaa": [1, 46, 328, 665, 677, 713, 715, 716, 938, 1244, 1256], "aaaa": [985, 986], "aabcdef": 699, "aad": [985, 986], "aag": 32, "aazz": 1350, "ab": [221, 237, 279, 302, 328, 689, 713, 715, 716, 818, 902, 932, 938, 1109, 1134, 1299, 1327, 1348, 1350], "ab12": 689, "ab12cd34ef": 689, "abc": [13, 22, 24, 25, 26, 27, 28, 29, 30, 31, 337, 671, 674, 688, 698, 818, 938, 1250, 1253, 1267, 1268], "abc123": 1350, "abc456": [688, 1267, 1268, 1350], "abcabc": 689, "abcd": 1350, "abcdeff": 698, "abf": [146, 157, 158], "abl": [104, 144, 558], "about": [104, 144, 658, 665, 673, 674, 677, 688, 689, 818, 936, 1238, 1244, 1252, 1253, 1256, 1267, 1268, 1327, 1358], "abov": [46, 234, 253, 328, 331, 808, 863, 932], "abs_a": 1349, "absolut": [146, 157, 158, 165, 166, 167, 168, 336, 473, 475, 476, 818, 943, 1087, 1089, 1090, 1327, 1349], "acc": [753, 754, 767, 792], "accent": 938, "accept": [7, 43, 47, 51, 52, 53, 54, 55, 140, 142, 143, 146, 148, 150, 152, 154, 156, 159, 160, 161, 172, 189, 199, 218, 266, 267, 271, 274, 291, 302, 303, 307, 328, 337, 398, 407, 477, 504, 608, 622, 623, 661, 690, 717, 725, 733, 735, 737, 742, 745, 746, 747, 748, 756, 765, 782, 784, 787, 796, 800, 802, 808, 814, 818, 834, 846, 857, 883, 884, 887, 890, 895, 902, 903, 908, 932, 936, 937, 1014, 1115, 1199, 1207, 1208, 1231, 1269, 1327], "access": [7, 43, 47, 51, 52, 53, 54, 55, 58, 59, 60, 61, 148, 152, 154, 156, 158, 159, 160, 161, 186, 193, 231, 261, 262, 275, 328, 675, 713, 841, 891, 904, 932, 937, 1254, 1358], "accord": [261, 328, 615, 758, 759, 761, 762, 805, 806, 818, 1045, 1201, 1327], "accordingli": [140, 142, 143, 148, 149, 150, 151, 152, 153, 154, 155], "account": [46, 136, 145, 158, 328, 447, 473, 475, 476, 818, 1058, 1087, 1089, 1090, 1327], "accumul": [753, 754, 767, 792], "acg": 32, "achiev": [238, 253, 314, 328, 403, 567, 684, 818, 1006, 1180, 1263, 1327], "aco": 1348, "acosd": 1348, "across": [46, 57, 145, 147, 198, 220, 233, 240, 242, 247, 268, 278, 328, 420, 496, 581, 735, 737, 753, 754, 756, 782, 784, 787, 802, 818, 845, 862, 885, 932, 1108, 1327], "action": [45, 328], "activ": [13, 14, 24, 25, 27, 28, 29, 30, 34, 35, 530, 674, 1144, 1253], "actual": [46, 132, 172, 176, 263, 328, 1233, 1327, 1350, 1357], "ad": [44, 46, 132, 147, 219, 275, 285, 290, 292, 297, 302, 303, 328, 343, 457, 480, 574, 575, 717, 753, 754, 797, 818, 858, 891, 899, 902, 903, 932, 938, 1068, 1094, 1306, 1311, 1327], "adbc": [44, 144, 145, 328], "adbc_driver_manag": 164, "adbc_ingest": [44, 328], "add": [45, 46, 143, 207, 219, 238, 302, 303, 304, 305, 328, 331, 418, 594, 595, 596, 597, 615, 717, 763, 767, 808, 818, 858, 862, 902, 903, 904, 905, 906, 932, 1093, 1327, 1332], "add_calendar_dai": 763, "add_calendar_month": 763, "add_calendar_year": 763, "add_chart": [46, 328], "add_dai": 763, "add_format": [46, 328], "add_hour": 763, "add_milli": 763, "add_second": 763, "add_seri": [46, 328], "add_week": 763, "add_worksheet": [46, 328], "addit": [7, 35, 42, 44, 45, 46, 132, 141, 146, 147, 157, 158, 170, 172, 174, 176, 202, 206, 218, 236, 251, 266, 267, 274, 287, 294, 302, 303, 307, 328, 337, 434, 477, 480, 608, 661, 665, 673, 674, 677, 688, 689, 713, 717, 742, 745, 746, 747, 748, 765, 796, 797, 800, 814, 818, 851, 857, 883, 884, 890, 897, 902, 903, 908, 932, 938, 1033, 1041, 1094, 1244, 1252, 1253, 1256, 1267, 1268, 1309, 1327, 1337, 1355], "addition": [65, 147, 261, 328, 938], "address": 674, "adjac": [46, 328], "adjust": [473, 475, 476, 658, 818, 1087, 1089, 1090, 1238, 1327], "adl": [146, 157, 158], "adlf": 158, "advanc": [46, 253, 328, 377, 558, 591, 594, 596, 598, 599, 981, 1172, 1358], "advantag": [46, 182, 252, 328], "advis": [46, 56, 97, 328], "aedt": 760, "aeiuo": [677, 1256], "af1": 57, "af2": 57, "af3": 57, "affect": [44, 165, 166, 167, 168, 328], "afm": 158, "afoo": [904, 932], "after": [46, 65, 132, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 189, 190, 207, 291, 294, 328, 397, 398, 399, 477, 608, 618, 712, 724, 725, 818, 834, 895, 897, 932, 1000, 1093, 1203, 1291, 1312, 1327, 1342], "afterward": [56, 808], "ag": [245, 328, 873, 932, 1356], "again": [567, 818], "against": [44, 106, 142, 144, 210, 275, 328, 530, 677, 797, 854, 891, 932, 1144, 1256, 1336, 1355, 1357, 1358], "agg": [218, 219, 253, 260, 328, 338, 388, 393, 396, 398, 483, 485, 490, 493, 566, 567, 608, 660, 661, 725, 732, 758, 761, 780, 818, 839, 840, 850, 857, 858, 877, 881, 888, 932, 938], "agg_group": [770, 818], "agg_list": [566, 818], "aggreg": [142, 143, 146, 154, 157, 212, 218, 219, 239, 241, 243, 246, 249, 253, 254, 255, 260, 276, 277, 296, 299, 307, 308, 310, 312, 328, 338, 388, 393, 396, 483, 499, 566, 567, 608, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 734, 735, 736, 737, 753, 754, 755, 756, 767, 772, 781, 782, 784, 786, 787, 792, 801, 802, 818, 858, 868, 869, 870, 871, 874, 875, 878, 881, 892, 893, 900, 908, 909, 911, 913, 932, 936, 991, 996, 999, 1111, 1213, 1214, 1215, 1217, 1220, 1221, 1222, 1327, 1343, 1345, 1348, 1354], "aggregate_funct": [253, 328, 938], "aho": [666, 676, 678, 690, 1245, 1255, 1257, 1269], "aiosqlit": 144, "alchemy_conn": 144, "algorithm": [188, 328, 344, 666, 676, 678, 690, 738, 818, 833, 932, 948, 1245, 1255, 1257, 1269, 1327], "alia": [1, 18, 57, 59, 61, 95, 193, 219, 237, 253, 260, 294, 302, 305, 328, 331, 337, 341, 381, 382, 383, 384, 387, 397, 400, 402, 403, 404, 412, 413, 414, 415, 416, 418, 421, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 465, 466, 467, 468, 471, 472, 485, 487, 492, 494, 500, 501, 504, 507, 510, 518, 520, 542, 554, 560, 565, 567, 571, 574, 575, 577, 579, 584, 587, 589, 591, 602, 603, 607, 609, 613, 615, 618, 620, 648, 650, 665, 666, 667, 668, 670, 671, 673, 674, 676, 677, 678, 679, 683, 684, 690, 691, 692, 693, 694, 695, 696, 700, 701, 703, 713, 714, 715, 716, 718, 723, 724, 726, 732, 733, 739, 740, 741, 745, 746, 747, 748, 758, 761, 763, 764, 767, 768, 773, 776, 777, 779, 780, 792, 796, 800, 805, 808, 818, 858, 860, 867, 881, 897, 902, 906, 932, 1026, 1033, 1034, 1037, 1040, 1041, 1042, 1043, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1065, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1134, 1201, 1206, 1252, 1253, 1257, 1268, 1273, 1274, 1327], "alias": [275, 328, 574, 575, 891, 932], "alic": [142, 1356], "align": [16, 21, 22, 46, 57, 65, 328, 1356], "align_fram": 65, "all": [1, 10, 11, 14, 19, 23, 26, 31, 36, 43, 45, 46, 51, 52, 55, 57, 63, 70, 98, 115, 117, 129, 134, 139, 142, 143, 146, 147, 148, 150, 152, 153, 154, 156, 157, 159, 160, 169, 170, 173, 176, 182, 187, 188, 190, 197, 199, 201, 202, 209, 221, 226, 228, 230, 231, 232, 233, 235, 236, 237, 242, 244, 248, 249, 253, 256, 257, 261, 262, 263, 267, 273, 274, 278, 279, 283, 285, 286, 290, 293, 295, 296, 297, 298, 303, 305, 328, 331, 341, 343, 365, 380, 398, 411, 417, 423, 424, 425, 426, 457, 477, 482, 488, 495, 496, 499, 502, 506, 509, 513, 514, 519, 529, 530, 537, 555, 558, 566, 588, 591, 592, 594, 595, 596, 597, 598, 599, 606, 608, 618, 623, 625, 629, 653, 659, 661, 667, 671, 674, 675, 679, 682, 685, 689, 697, 698, 699, 703, 725, 735, 744, 746, 753, 754, 755, 756, 765, 767, 772, 773, 776, 784, 792, 800, 801, 802, 808, 814, 818, 824, 830, 833, 836, 839, 840, 844, 846, 847, 848, 850, 853, 862, 864, 868, 872, 877, 879, 884, 888, 889, 890, 896, 898, 899, 903, 904, 906, 932, 938, 969, 1025, 1027, 1030, 1031, 1032, 1033, 1068, 1109, 1116, 1128, 1134, 1143, 1144, 1151, 1169, 1172, 1203, 1208, 1213, 1239, 1246, 1250, 1253, 1254, 1257, 1258, 1261, 1268, 1276, 1277, 1278, 1282, 1299, 1308, 1327, 1331, 1332, 1337, 1339, 1344, 1345, 1350, 1354, 1355, 1357, 1358], "all_compat": 1339, "all_data": 1355, "all_horizont": [201, 202, 328, 734, 847, 848, 932], "all_stat": 36, "alloc": [142, 143, 205, 256, 328, 818, 907, 936, 1086, 1327], "allow": [1, 14, 45, 46, 52, 53, 54, 55, 56, 97, 106, 130, 144, 147, 156, 159, 160, 161, 162, 169, 172, 173, 176, 182, 186, 231, 234, 236, 261, 262, 264, 286, 287, 290, 293, 306, 328, 400, 404, 447, 454, 457, 546, 566, 567, 574, 575, 620, 649, 702, 704, 705, 818, 862, 863, 868, 872, 896, 904, 932, 936, 938, 1058, 1065, 1068, 1160, 1180, 1205, 1225, 1281, 1283, 1284, 1308, 1309, 1327, 1350, 1358], "allow_alias": [574, 575], "allow_chunk": [172, 176], "allow_copi": [130, 186, 286, 328, 1308, 1327], "allow_dupl": [615, 818, 1201, 1327], "allow_exact_match": [234, 328, 863, 932], "allow_infin": [172, 176], "allow_masked_out": [172, 176], "allow_missing_column": [154, 161], "allow_nul": [169, 172, 176, 1358], "allow_object": 778, "allow_parallel": [234, 328, 862, 863, 932], "allow_pyarrow_filt": 162, "allow_time_zon": [172, 173, 176], "allowed_dtyp": [172, 173, 176, 1358], "almost": [64, 238, 314, 328, 702, 704, 705, 840, 932, 1180, 1281, 1283, 1284, 1327], "along": [7, 43, 45, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 159, 160, 161, 328, 932], "alpha": [473, 475, 476, 818, 850, 877, 888, 932, 938, 1087, 1089, 1090, 1327], "alpha_i": [474, 818, 1088, 1327], "alphabet": [938, 1358], "alphanumer": [710, 938, 1289], "alreadi": [44, 45, 105, 285, 328, 417, 530, 582, 730, 818, 888, 932, 1025, 1144, 1316, 1327], "also": [2, 33, 43, 46, 52, 56, 132, 144, 147, 148, 153, 154, 156, 161, 171, 172, 175, 176, 182, 203, 218, 219, 245, 249, 253, 260, 262, 266, 274, 285, 297, 302, 305, 328, 413, 416, 425, 447, 451, 457, 483, 504, 567, 574, 575, 608, 618, 622, 623, 661, 688, 689, 690, 697, 698, 713, 744, 753, 754, 757, 760, 767, 769, 792, 808, 817, 818, 824, 857, 858, 873, 881, 883, 890, 899, 902, 904, 906, 932, 938, 1032, 1062, 1115, 1203, 1207, 1208, 1246, 1267, 1268, 1269, 1276, 1327, 1331, 1337, 1339, 1342, 1346, 1350, 1353, 1355, 1356], "alt": [328, 331, 1327, 1332], "altair": [164, 328, 331, 1327, 1332], "altern": [2, 46, 328, 814, 1347], "although": [275, 328, 891, 932], "alwai": [19, 43, 45, 52, 73, 75, 79, 142, 189, 210, 218, 233, 234, 238, 291, 314, 328, 397, 398, 566, 578, 702, 724, 725, 808, 818, 834, 854, 862, 863, 868, 895, 932, 938, 1000, 1180, 1281, 1312, 1327, 1336, 1337, 1355, 1358], "am": [691, 1270], "amarillo": 1350, "amaz": [328, 331, 1327, 1332], "amazonaw": 38, "ambigu": [450, 451, 452, 465, 702, 705, 760, 1061, 1062, 1063, 1076, 1281, 1284], "america": 761, "amount": [56, 74, 97, 152, 156, 159, 160, 567, 763, 818, 1344], "amsterdam": [451, 1062], "an": [1, 7, 36, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 58, 60, 61, 73, 74, 75, 102, 106, 109, 112, 119, 121, 129, 131, 132, 135, 142, 143, 144, 145, 146, 147, 149, 152, 153, 154, 156, 157, 158, 159, 160, 161, 170, 172, 176, 191, 192, 193, 199, 205, 208, 212, 214, 219, 230, 231, 232, 234, 235, 238, 249, 253, 257, 258, 260, 261, 265, 275, 280, 286, 290, 292, 296, 297, 302, 305, 314, 328, 331, 339, 361, 364, 376, 382, 388, 391, 393, 394, 396, 413, 414, 415, 416, 417, 418, 425, 429, 430, 447, 451, 454, 468, 474, 482, 483, 489, 490, 493, 527, 530, 533, 535, 557, 558, 566, 567, 579, 581, 591, 592, 613, 614, 615, 623, 624, 628, 629, 630, 632, 634, 636, 638, 641, 643, 645, 664, 665, 668, 674, 677, 681, 702, 704, 705, 707, 709, 723, 726, 734, 739, 743, 758, 759, 761, 762, 764, 766, 769, 773, 774, 775, 776, 777, 778, 790, 792, 793, 796, 800, 805, 806, 808, 809, 814, 818, 836, 837, 838, 840, 844, 846, 850, 854, 858, 863, 864, 868, 877, 879, 881, 882, 888, 891, 899, 902, 904, 906, 907, 915, 929, 932, 936, 937, 938, 965, 968, 980, 985, 991, 994, 996, 997, 999, 1013, 1015, 1021, 1022, 1023, 1024, 1025, 1032, 1036, 1065, 1079, 1086, 1088, 1129, 1141, 1144, 1147, 1149, 1171, 1180, 1208, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1226, 1228, 1243, 1244, 1247, 1253, 1256, 1260, 1281, 1283, 1284, 1286, 1288, 1308, 1310, 1327, 1345, 1347, 1350, 1354, 1355, 1357], "ana": [691, 1270], "anan": [691, 1270], "ananab": 1350, "and_": 818, "ang": 1350, "angl": [740, 741], "ani": [2, 3, 4, 5, 6, 7, 10, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 62, 63, 64, 72, 73, 75, 79, 129, 130, 131, 132, 133, 134, 135, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 184, 187, 189, 195, 199, 201, 202, 207, 209, 210, 212, 214, 229, 231, 232, 233, 234, 235, 238, 242, 252, 257, 261, 262, 263, 275, 278, 281, 282, 285, 286, 287, 290, 291, 293, 296, 297, 305, 328, 331, 332, 337, 340, 341, 365, 397, 398, 399, 417, 418, 453, 471, 472, 482, 483, 487, 490, 492, 494, 498, 508, 518, 525, 530, 537, 565, 566, 567, 574, 584, 587, 589, 591, 592, 594, 596, 598, 599, 602, 603, 607, 612, 615, 622, 623, 624, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 650, 654, 664, 666, 680, 698, 699, 700, 701, 702, 704, 705, 707, 709, 718, 724, 725, 726, 733, 734, 735, 737, 746, 748, 749, 750, 777, 778, 780, 784, 802, 808, 818, 834, 839, 840, 846, 847, 848, 850, 853, 854, 862, 863, 864, 876, 879, 891, 895, 896, 899, 906, 907, 932, 936, 938, 940, 942, 945, 969, 1000, 1009, 1025, 1026, 1064, 1083, 1084, 1093, 1096, 1101, 1103, 1105, 1110, 1120, 1129, 1132, 1139, 1144, 1151, 1179, 1180, 1191, 1192, 1201, 1207, 1208, 1209, 1213, 1216, 1218, 1219, 1226, 1227, 1243, 1245, 1259, 1281, 1283, 1284, 1286, 1288, 1306, 1307, 1308, 1309, 1311, 1312, 1327, 1332, 1355, 1358], "anna": [245, 328, 873, 932], "annex": [685, 1264], "anoth": [99, 171, 190, 198, 204, 218, 234, 268, 328, 417, 420, 427, 503, 533, 571, 577, 581, 622, 631, 633, 635, 637, 639, 642, 644, 646, 677, 818, 836, 845, 857, 863, 885, 904, 932, 1025, 1034, 1085, 1093, 1114, 1147, 1207, 1208, 1256, 1327, 1349, 1350], "anti": [233, 328, 862, 915, 932, 1226, 1228, 1327, 1343], "any_horizont": 736, "anyth": [45, 261, 328], "anywher": [384, 387, 702, 704, 705, 1281, 1283, 1284], "ap": 1350, "apach": [41, 47, 48, 51, 140, 144, 145, 148, 150, 158, 185, 328, 941], "apaya": [703, 1282], "api": [0, 2, 7, 38, 43, 47, 51, 52, 53, 54, 55, 130, 152, 154, 156, 159, 160, 161, 162, 186, 238, 314, 328, 567, 780, 818, 915, 932, 1180, 1327, 1354], "apia": [426, 1033], "app": [404, 696, 1007, 1275], "appear": [46, 69, 132, 167, 168, 328, 689, 728, 818, 938, 1314, 1327, 1356], "append": [44, 45, 172, 207, 233, 234, 235, 328, 619, 808, 818, 862, 863, 864, 932, 1093, 1327], "appl": [194, 223, 233, 257, 258, 281, 309, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 328, 398, 400, 404, 625, 670, 696, 725, 818, 862, 879, 910, 911, 913, 914, 916, 917, 918, 919, 920, 921, 922, 932, 1002, 1007, 1249, 1275, 1343, 1350], "appli": [16, 26, 43, 46, 52, 65, 144, 156, 169, 172, 176, 182, 197, 212, 235, 238, 252, 274, 275, 285, 314, 328, 353, 428, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 453, 455, 466, 467, 469, 475, 476, 566, 567, 612, 630, 631, 632, 633, 636, 637, 643, 644, 661, 688, 689, 702, 704, 705, 709, 742, 753, 754, 767, 779, 780, 792, 797, 808, 818, 844, 864, 868, 876, 890, 891, 915, 932, 1014, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1049, 1050, 1051, 1053, 1054, 1057, 1059, 1060, 1064, 1066, 1077, 1078, 1080, 1089, 1090, 1180, 1214, 1215, 1217, 1221, 1267, 1268, 1281, 1283, 1284, 1288, 1327, 1336], "applic": [286, 328, 567, 818], "apply_on_context_ent": 182, "appropri": [46, 162, 210, 286, 328, 457, 618, 818, 854, 932, 1068, 1203, 1327], "approx": [344, 818], "approx_n_uniqu": [328, 818, 932, 1327], "approxim": [51, 188, 328, 344, 474, 738, 818, 833, 932, 948, 1088, 1327, 1349, 1358], "april": [454, 1065, 1350, 1351], "ar": [1, 7, 16, 17, 23, 26, 36, 38, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 64, 65, 96, 97, 104, 110, 126, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 170, 172, 173, 174, 176, 182, 186, 189, 190, 195, 197, 201, 202, 205, 208, 210, 211, 212, 217, 218, 219, 231, 233, 234, 235, 236, 238, 244, 245, 251, 253, 260, 261, 262, 263, 266, 267, 269, 271, 274, 281, 285, 286, 287, 290, 291, 295, 297, 298, 302, 303, 306, 307, 328, 340, 342, 356, 372, 377, 397, 398, 399, 407, 413, 415, 416, 425, 452, 457, 465, 470, 472, 473, 474, 475, 476, 481, 483, 504, 506, 508, 509, 511, 512, 513, 514, 516, 521, 551, 558, 566, 603, 608, 615, 618, 621, 622, 623, 624, 628, 631, 633, 635, 637, 639, 640, 642, 644, 646, 652, 655, 658, 660, 661, 666, 675, 679, 681, 682, 686, 687, 688, 689, 690, 692, 703, 705, 707, 712, 717, 719, 723, 724, 725, 734, 735, 737, 742, 745, 746, 747, 748, 749, 756, 758, 759, 761, 762, 777, 782, 784, 787, 796, 800, 802, 805, 806, 808, 810, 811, 813, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 834, 839, 840, 844, 847, 848, 852, 854, 857, 858, 862, 863, 864, 868, 872, 873, 877, 879, 881, 883, 884, 886, 887, 890, 895, 898, 899, 902, 903, 904, 908, 932, 936, 938, 945, 946, 960, 976, 981, 1000, 1004, 1014, 1023, 1024, 1032, 1063, 1068, 1076, 1082, 1084, 1086, 1087, 1088, 1089, 1090, 1095, 1097, 1099, 1115, 1118, 1120, 1121, 1123, 1124, 1125, 1126, 1130, 1135, 1165, 1172, 1192, 1201, 1203, 1207, 1208, 1209, 1219, 1231, 1235, 1238, 1245, 1254, 1258, 1260, 1265, 1266, 1267, 1268, 1271, 1282, 1284, 1286, 1291, 1298, 1306, 1308, 1309, 1310, 1312, 1319, 1321, 1323, 1327, 1328, 1331, 1333, 1334, 1335, 1337, 1339, 1342, 1347, 1355, 1358], "arbitrari": [86, 214, 328, 420, 818, 845, 932, 938], "arbitrarili": [238, 328], "arcco": [818, 1327], "arccosh": [818, 1327], "arcsin": [818, 1327], "arcsinh": [818, 1327], "arctan": [740, 741, 818, 1327], "arctan2": 741, "arctanh": [818, 1327], "aren": [43, 52, 328, 932], "arg": [37, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 210, 252, 328, 353, 612, 742, 768, 818, 854, 876, 932, 936, 1180, 1327, 1340], "arg_max": [818, 1327], "arg_min": [818, 1327], "arg_sort": [818, 1327], "arg_tru": [743, 818, 1327], "arg_uniqu": [818, 1327], "arg_wher": [354, 818], "argmax": [566, 818], "argument": [7, 42, 45, 51, 141, 142, 146, 154, 156, 157, 172, 174, 176, 195, 199, 206, 218, 219, 234, 251, 252, 260, 266, 267, 274, 287, 294, 298, 302, 303, 307, 328, 452, 465, 477, 483, 504, 566, 608, 612, 628, 661, 697, 698, 699, 717, 734, 740, 741, 742, 745, 746, 747, 748, 750, 765, 796, 800, 808, 814, 818, 846, 851, 857, 858, 863, 876, 881, 883, 884, 890, 897, 902, 903, 908, 929, 932, 936, 938, 1063, 1076, 1115, 1276, 1277, 1278, 1309, 1327, 1349, 1350], "aris": 144, "arithmet": [212, 328], "arm": 164, "arm64": 164, "around": [43, 52, 328, 932], "arr": [286, 328, 810, 1308, 1319, 1327], "arr_bar": 1345, "arr_foo": 1345, "arrai": [129, 133, 142, 143, 146, 154, 157, 184, 205, 206, 280, 285, 286, 287, 328, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 385, 413, 414, 415, 416, 525, 540, 541, 542, 543, 545, 554, 555, 557, 560, 562, 566, 624, 630, 632, 634, 636, 638, 641, 643, 645, 651, 723, 746, 764, 797, 818, 851, 932, 937, 940, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 988, 1021, 1022, 1023, 1024, 1029, 1086, 1139, 1154, 1155, 1156, 1157, 1159, 1167, 1168, 1169, 1171, 1174, 1176, 1177, 1209, 1214, 1215, 1217, 1220, 1221, 1222, 1229, 1233, 1302, 1306, 1308, 1309, 1310, 1327, 1348, 1354, 1357], "array_agg": 1348, "array_contain": 1348, "array_get": 1348, "array_length": 1348, "array_low": 1348, "array_mean": 1348, "array_revers": 1348, "array_sum": 1348, "array_to_str": 1348, "array_uniqu": 1348, "array_upp": 1348, "arraylik": [1029, 1327], "arrow": [47, 48, 53, 129, 144, 145, 148, 150, 159, 185, 231, 262, 263, 280, 282, 286, 328, 932, 941, 1302, 1308, 1327], "arrowinvaliderror": [45, 328], "as_": [1327, 1332], "as_dict": [143, 251, 328], "as_expr": 938, "as_seri": [190, 281, 328, 836, 932, 938], "asarrai": [184, 940], "ascend": [219, 260, 328, 608, 628, 818, 858, 881, 932], "ascii": [13, 26, 402, 403, 666, 676, 678, 679, 683, 684, 690, 692, 703, 712, 938, 1005, 1006, 1245, 1255, 1257, 1258, 1262, 1263, 1269, 1271, 1282, 1291], "ascii_borders_onli": 26, "ascii_borders_only_condens": 26, "ascii_case_insensit": [666, 676, 678, 690, 1245, 1255, 1257, 1269], "ascii_ful": 26, "ascii_full_condens": 26, "ascii_horizontal_onli": 26, "ascii_lett": 1358, "ascii_markdown": 26, "ascii_no_bord": 26, "ascii_onli": 938, "ascii_t": 182, "ascii_uppercas": [296, 328], "asd": [667, 674, 1246, 1253], "asia": [136, 938, 1038, 1039, 1066], "asid": 457, "asin": 1348, "asind": 1348, "asof": [234, 328, 863, 932], "asofjoinstrategi": [234, 328, 863, 932], "assert": [165, 166, 167, 168, 172, 176, 260, 328, 830, 938], "assert_frame_equ": [166, 167, 204, 328, 1358], "assert_frame_not_equ": [165, 168], "assert_series_equ": [165, 168, 1085, 1327, 1358], "assert_series_not_equ": [166, 167], "assert_someth": 170, "assertionerror": [165, 166, 167, 168], "assign": [170, 219, 313, 328, 377, 558, 608, 618, 694, 695, 818, 858, 914, 932, 981, 1172, 1203, 1273, 1274, 1327], "associ": [44, 46, 57, 145, 147, 171, 174, 263, 328, 937, 1338, 1340, 1344], "assum": [38, 263, 328, 868, 915, 932, 1350], "assume_rol": 38, "assumpt": [566, 818], "async": [144, 840, 932], "async_engin": 144, "asynchron": [64, 144, 840, 932], "asyncio": [64, 144, 840, 932], "asyncresult": [64, 840, 932], "asyncsurrealdb": 144, "ata": 32, "atan": 1348, "atan2": [740, 741, 1348], "atan2_ab": 1352, "atan2d": [741, 1348], "atan2d_ab": 1352, "atand": 1348, "atg": 32, "atgataaaggag": 32, "atol": [165, 166, 167, 168], "attain": [661, 818], "attempt": [1, 420, 818, 845, 932], "attr": [328, 331, 1327, 1332], "attribut": [66, 69, 72, 73, 74, 75, 76, 84, 88, 169, 328, 331, 810, 811, 813, 814, 819, 820, 823, 825, 826, 827, 907, 932, 1319, 1321, 1323, 1327, 1328, 1332, 1333, 1334, 1335], "attributeerror": 1, "audi": [281, 328, 625, 818], "august": 457, "australia": 760, "auth": 40, "authent": [2, 45, 146, 154, 156, 157, 158, 159, 161, 328], "author": 1, "auto": [2, 7, 43, 45, 47, 51, 52, 53, 54, 55, 65, 129, 131, 132, 133, 135, 146, 151, 152, 154, 156, 157, 159, 160, 161, 292, 328, 932, 1358], "auto_structifi": [266, 302, 328, 883, 902, 932], "autofilt": [46, 328], "autofit": [46, 328], "autogener": [142, 143, 147, 153, 156], "automat": [2, 14, 43, 52, 129, 131, 132, 133, 135, 136, 142, 143, 144, 145, 151, 152, 154, 156, 159, 160, 172, 176, 178, 266, 275, 302, 328, 566, 623, 697, 698, 699, 797, 818, 883, 891, 902, 932, 936, 1207, 1208, 1276, 1277, 1278, 1311, 1327, 1337, 1339, 1342, 1355], "autumn": [688, 689], "avail": [4, 5, 6, 46, 51, 55, 138, 144, 145, 146, 157, 158, 170, 182, 253, 275, 327, 328, 457, 618, 797, 810, 811, 813, 817, 818, 819, 820, 823, 824, 825, 826, 827, 830, 891, 930, 931, 932, 936, 938, 1027, 1203, 1319, 1321, 1323, 1327, 1328, 1331, 1333, 1334, 1335, 1346], "available_timezon": [72, 938], "averag": [46, 328, 473, 474, 475, 476, 618, 818, 1087, 1088, 1089, 1090, 1203, 1327, 1344], "avg": 1348, "avocado": 1350, "avoid": [172, 176, 210, 262, 328, 339, 818, 854, 932], "avro": [41, 140, 328, 830], "avrocompress": [41, 328], "aw": [7, 38, 43, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 159, 160, 161, 328, 932], "awai": 1349, "await": [64, 144, 840, 926, 932], "awar": [16, 144, 231, 262, 263, 282, 328, 474, 666, 676, 678, 690, 705, 818, 932, 1088, 1245, 1255, 1257, 1269, 1284, 1327], "aws_access_key_id": [45, 146, 157, 161, 328], "aws_region": [45, 157, 161, 328], "aws_secret_access_kei": [45, 146, 157, 161, 328], "awsassumerolekwarg": 38, "axi": [244, 295, 328, 331, 740, 741, 872, 898, 932, 1327, 1332], "aya": [692, 1271, 1282], "az": [146, 157, 158], "azur": [7, 39, 43, 45, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 158, 159, 160, 161, 328, 932], "azure_storage_account_kei": [146, 157, 158], "azure_storage_account_nam": [146, 157, 158], "b": [1, 16, 41, 43, 45, 47, 48, 51, 60, 65, 88, 101, 104, 129, 130, 131, 132, 133, 134, 135, 136, 142, 144, 147, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 233, 236, 237, 239, 241, 243, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 271, 273, 274, 275, 276, 277, 279, 280, 281, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 337, 339, 340, 342, 343, 353, 355, 360, 365, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 398, 399, 411, 418, 422, 454, 457, 477, 479, 481, 482, 483, 485, 488, 495, 496, 499, 502, 503, 504, 506, 509, 511, 512, 513, 514, 519, 525, 530, 537, 547, 548, 549, 550, 566, 567, 572, 588, 591, 592, 593, 594, 595, 596, 597, 605, 606, 608, 612, 615, 618, 622, 623, 625, 627, 653, 659, 661, 668, 672, 677, 681, 688, 689, 713, 714, 725, 728, 732, 734, 735, 736, 737, 738, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 794, 795, 797, 799, 800, 801, 802, 803, 807, 814, 818, 833, 834, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 862, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 882, 883, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 932, 938, 944, 947, 969, 984, 985, 986, 987, 988, 989, 990, 1004, 1008, 1009, 1026, 1029, 1065, 1068, 1082, 1085, 1086, 1093, 1096, 1115, 1120, 1139, 1161, 1162, 1163, 1164, 1201, 1206, 1247, 1251, 1256, 1260, 1267, 1268, 1292, 1294, 1295, 1297, 1309, 1314, 1327, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1350, 1351, 1352, 1355], "b1": [58, 60], "b2": [58, 60], "b345": [46, 328], "b4": [46, 328], "b_b": [275, 328], "b_btm_by_a": [398, 818], "b_btm_by_b": [398, 818], "b_by_ca": [398, 725, 818], "b_by_cb": [398, 725, 818], "b_is_not_nan": [512, 818], "b_isnan": [511, 818], "b_isnul": [514, 818], "b_not_nul": [513, 818], "b_revers": [592, 596, 625, 818], "b_suffix": 597, "b_sum": [307, 908], "b_top_by_a": [725, 818], "b_top_by_b": [725, 818], "ba": [420, 477, 581, 696, 765, 818, 938], "back": [10, 57, 161, 207, 219, 268, 286, 287, 328, 581, 608, 689, 818, 839, 858, 885, 907, 932, 1093, 1309, 1327], "backend": [45, 144, 145, 146, 157, 158, 328, 331, 1327, 1332], "background": [328, 332, 839, 931, 932], "backward": [51, 55, 209, 234, 328, 380, 425, 445, 482, 818, 853, 863, 932, 1032, 1056, 1096, 1327], "backward_fil": [488, 652, 818], "bad": [688, 689, 1267, 1268], "balanc": [175, 177, 1358], "ballon_dor": [673, 675, 1252, 1254], "banana": [194, 281, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 398, 625, 670, 696, 725, 818, 911, 913, 916, 917, 918, 919, 920, 921, 922, 1350], "banded_column": [46, 328], "banded_row": [46, 328], "bar": [41, 43, 45, 47, 48, 49, 50, 51, 139, 151, 152, 190, 193, 194, 195, 199, 200, 201, 202, 203, 204, 207, 210, 212, 214, 215, 216, 221, 223, 224, 225, 227, 233, 237, 238, 239, 240, 241, 242, 243, 246, 247, 250, 253, 255, 257, 258, 261, 264, 265, 266, 268, 273, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 293, 294, 299, 300, 301, 306, 328, 331, 401, 420, 501, 571, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 658, 667, 669, 672, 674, 675, 691, 693, 695, 700, 701, 738, 749, 750, 751, 766, 771, 772, 775, 776, 781, 783, 785, 786, 788, 789, 796, 799, 803, 807, 808, 814, 818, 836, 841, 842, 846, 847, 848, 849, 854, 860, 861, 862, 875, 879, 882, 883, 896, 897, 901, 932, 937, 938, 1003, 1151, 1238, 1246, 1248, 1251, 1253, 1254, 1270, 1274, 1279, 1280, 1327, 1341, 1343, 1344, 1345, 1347, 1350, 1353], "bar2": 1350, "bar22": [212, 328], "bar_": 693, "bar_3": [283, 328], "bar_4": [283, 328], "bar_a": [253, 328], "bar_at_2": 1345, "bar_avg": 1344, "bar_b": [253, 328], "bar_color": [46, 328], "bar_max": 1344, "bar_median": 1344, "bar_min": 1344, "bar_negative_border_color_sam": [46, 328], "bar_negative_color_sam": [46, 328], "bar_std": 1344, "bar_sum": 1344, "bar_var": 1344, "bare": [574, 575, 938], "base": [37, 46, 70, 115, 117, 147, 174, 202, 210, 219, 235, 260, 328, 426, 434, 470, 473, 474, 475, 476, 483, 498, 503, 561, 562, 566, 567, 613, 615, 623, 628, 631, 633, 635, 637, 639, 642, 644, 646, 707, 818, 854, 858, 864, 881, 932, 938, 1033, 1041, 1082, 1087, 1088, 1089, 1090, 1110, 1114, 1175, 1176, 1180, 1199, 1201, 1207, 1208, 1286, 1318, 1327, 1343, 1349, 1358], "base64": [382, 383, 668, 669, 985, 986, 1247, 1248], "base_nam": [292, 328], "base_utc_offset": [434, 1041], "baseexcept": 1355, "basi": [46, 147, 172, 328], "basic": [46, 184, 328, 573, 940, 1358], "basic_chart": [46, 328], "batch": [48, 63, 64, 138, 143, 144, 150, 152, 160, 162, 262, 290, 328, 839, 840, 868, 932], "batch_siz": [43, 52, 142, 143, 144, 152, 160, 162, 290, 328, 932], "batchedcsvread": 143, "baz": [214, 224, 225, 294, 328, 675, 693, 695, 766, 775, 789, 814, 861, 897, 932, 937, 938, 1254, 1274, 1341, 1347, 1350], "bb": [938, 1027, 1327, 1350, 1355], "bbb": [1, 46, 328, 713, 715, 716, 938], "bc": [677, 689, 801, 1256], "bcbc45": 1350, "bea": 18, "bear": 938, "bearer": 2, "bearer_token": 2, "beauti": 18, "becaus": [152, 160, 205, 219, 236, 238, 296, 314, 328, 487, 530, 558, 818, 858, 915, 932, 1086, 1144, 1180, 1327], "becom": [174, 234, 327, 328, 863, 930, 931, 932], "bed3": [46, 328], "been": [11, 36, 46, 179, 186, 309, 328, 489, 567, 585, 618, 818, 910, 1203, 1327], "beetl": [281, 328, 625, 818], "befor": [46, 71, 72, 142, 144, 147, 156, 162, 165, 166, 167, 168, 178, 182, 207, 219, 234, 275, 285, 290, 294, 328, 391, 392, 394, 395, 415, 416, 417, 566, 608, 609, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 672, 712, 719, 747, 794, 795, 818, 858, 860, 863, 897, 932, 936, 994, 995, 997, 998, 1023, 1024, 1025, 1093, 1196, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1251, 1291, 1298, 1327, 1343], "beforehand": [702, 704, 705, 1281, 1283, 1284], "begin": [18, 46, 328, 473, 475, 476, 673, 703, 818, 1087, 1089, 1090, 1252, 1282, 1327], "behav": [210, 328, 483, 567, 698, 699, 818, 854, 932], "behavior": [51, 55, 154, 161, 201, 202, 210, 233, 234, 328, 364, 489, 533, 535, 672, 766, 775, 818, 847, 848, 854, 862, 863, 929, 932, 968, 1147, 1149, 1251], "behaviour": [16, 57, 65, 201, 202, 275, 328, 665, 673, 674, 677, 688, 689, 726, 797, 818, 847, 848, 891, 932, 1244, 1252, 1253, 1256, 1267, 1268], "behind": 178, "being": [2, 3, 4, 5, 6, 7, 19, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 139, 142, 143, 144, 146, 147, 152, 153, 154, 156, 157, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 190, 206, 235, 275, 283, 285, 290, 297, 328, 331, 332, 417, 418, 498, 567, 615, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 672, 744, 746, 764, 777, 818, 836, 839, 840, 850, 851, 864, 891, 899, 932, 1009, 1025, 1026, 1110, 1201, 1213, 1216, 1218, 1219, 1251, 1303, 1306, 1311, 1327, 1332, 1358], "belong": [1, 219, 328, 858, 932], "below": [25, 45, 146, 147, 157, 158, 202, 210, 253, 328, 457, 482, 679, 688, 689, 703, 758, 759, 761, 762, 805, 806, 808, 814, 818, 854, 932, 1068, 1258, 1267, 1268, 1282], "benchmark": 142, "best": [238, 314, 328, 567, 818, 1180, 1327], "better": [238, 285, 286, 314, 328, 403, 567, 684, 818, 835, 915, 932, 1006, 1226, 1228, 1263, 1327], "between": [30, 65, 100, 169, 170, 172, 176, 187, 195, 233, 255, 262, 320, 328, 365, 399, 421, 422, 457, 504, 528, 537, 547, 548, 549, 550, 609, 615, 616, 638, 639, 664, 680, 740, 741, 744, 749, 751, 791, 794, 795, 818, 862, 878, 921, 932, 969, 1001, 1008, 1028, 1029, 1068, 1115, 1142, 1151, 1161, 1162, 1163, 1164, 1196, 1201, 1202, 1218, 1243, 1259, 1327, 1344, 1352], "between_ab": [504, 818], "beyond": [710, 1289], "bia": [475, 476, 516, 640, 658, 818, 1089, 1090, 1130, 1219, 1238, 1327], "bias": [516, 658, 818, 1130, 1238, 1327], "big": [143, 385, 988], "big_fil": 143, "bigidx": 137, "bigqueri": 145, "bin": [418, 498, 615, 707, 733, 811, 818, 1026, 1110, 1201, 1286, 1321, 1327, 1332], "bin2int": 385, "bin_count": [498, 818, 1110, 1327], "bin_i": [733, 818], "bin_x": [733, 818], "bin_xor_xi": [733, 818], "binari": [46, 47, 144, 198, 268, 328, 381, 382, 383, 384, 385, 386, 387, 420, 581, 668, 818, 845, 885, 932, 938, 984, 985, 987, 988, 989, 990, 1247, 1346], "binary_str": [733, 818], "bind": 147, "birthdai": 142, "bit": [71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 389, 390, 391, 392, 394, 395, 620, 665, 818, 992, 994, 995, 997, 998, 1205, 1244, 1327, 1346, 1350], "bit_and": 1348, "bit_count": 1348, "bit_length": 1348, "bit_or": 1348, "bit_xor": 1348, "bitmap": [205, 328, 1086, 1327], "bitwis": [341, 388, 393, 396, 607, 733, 734, 735, 736, 737, 818, 991, 996, 999, 1327, 1346, 1348], "bitwise_and": [818, 1327], "bitwise_count_on": [818, 1327], "bitwise_count_zero": [818, 1327], "bitwise_leading_on": [818, 1327], "bitwise_leading_zero": [818, 1327], "bitwise_or": [818, 1327], "bitwise_trailing_on": [818, 1327], "bitwise_trailing_zero": [818, 1327], "bitwise_xor": [818, 1327], "bla": [667, 674, 1246, 1253], "black": [238, 328, 381, 382, 383, 384, 387], "blindli": [530, 1144], "block": [26, 64, 218, 293, 328, 808, 840, 857, 879, 896, 905, 906, 915, 932, 1226, 1228, 1327], "blue": [56, 96, 97, 381, 382, 383, 384, 387, 730, 818, 1316, 1327], "bob": [142, 245, 328, 873, 932, 1356], "bodi": [46, 328, 332], "bold": [46, 328], "bom": [43, 52, 328, 932], "bool": [11, 13, 14, 15, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 43, 45, 46, 51, 52, 53, 54, 55, 57, 63, 64, 65, 96, 129, 130, 131, 132, 134, 135, 136, 139, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 184, 186, 189, 190, 191, 192, 197, 199, 204, 209, 210, 211, 212, 216, 217, 218, 219, 223, 224, 226, 227, 228, 231, 233, 234, 242, 251, 253, 257, 261, 262, 263, 264, 269, 272, 274, 275, 278, 281, 283, 286, 287, 291, 292, 293, 294, 297, 298, 300, 302, 310, 312, 315, 318, 328, 339, 340, 341, 342, 343, 353, 356, 357, 360, 364, 365, 373, 378, 381, 382, 384, 387, 398, 399, 400, 404, 412, 413, 414, 415, 416, 417, 418, 425, 437, 453, 470, 471, 472, 473, 475, 476, 492, 494, 495, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 526, 530, 533, 535, 537, 546, 553, 558, 559, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 582, 583, 602, 603, 605, 607, 608, 610, 611, 615, 618, 620, 629, 630, 632, 634, 636, 638, 640, 641, 643, 645, 649, 651, 653, 658, 660, 661, 664, 665, 666, 667, 668, 670, 676, 677, 678, 680, 688, 689, 690, 693, 694, 696, 702, 704, 705, 707, 709, 713, 715, 716, 725, 727, 730, 733, 734, 735, 736, 737, 739, 742, 743, 744, 748, 749, 752, 753, 758, 759, 761, 762, 773, 774, 777, 778, 780, 784, 790, 793, 796, 797, 800, 802, 805, 806, 808, 809, 818, 834, 836, 837, 839, 840, 844, 846, 850, 853, 854, 857, 858, 862, 863, 868, 872, 877, 879, 886, 888, 890, 891, 895, 896, 897, 898, 899, 902, 907, 911, 913, 916, 919, 932, 936, 937, 938, 940, 945, 946, 957, 960, 961, 964, 968, 969, 977, 982, 984, 985, 987, 990, 1001, 1002, 1004, 1007, 1009, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1032, 1044, 1064, 1082, 1084, 1085, 1087, 1089, 1090, 1097, 1099, 1106, 1107, 1110, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1135, 1136, 1140, 1144, 1147, 1149, 1151, 1160, 1167, 1173, 1180, 1192, 1194, 1197, 1198, 1201, 1203, 1204, 1205, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1228, 1229, 1233, 1238, 1240, 1243, 1244, 1245, 1246, 1247, 1249, 1255, 1256, 1257, 1259, 1267, 1268, 1269, 1272, 1273, 1275, 1281, 1283, 1284, 1286, 1288, 1303, 1308, 1309, 1313, 1316, 1327, 1336, 1337, 1339, 1345, 1350, 1355], "boolean": [57, 172, 189, 210, 212, 274, 291, 328, 340, 341, 342, 356, 357, 360, 381, 384, 387, 398, 437, 483, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 521, 522, 526, 605, 607, 610, 611, 661, 681, 725, 732, 733, 742, 743, 800, 808, 818, 834, 854, 890, 895, 932, 938, 945, 946, 958, 960, 961, 964, 984, 1044, 1097, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1135, 1136, 1140, 1194, 1197, 1198, 1228, 1244, 1318, 1327, 1347], "border": 26, "both": [16, 31, 43, 52, 56, 96, 97, 144, 147, 161, 193, 219, 233, 234, 235, 245, 260, 261, 287, 297, 328, 343, 407, 418, 457, 477, 504, 615, 628, 631, 633, 635, 637, 639, 642, 644, 646, 692, 758, 759, 761, 762, 777, 805, 806, 814, 818, 829, 858, 862, 863, 864, 873, 881, 899, 932, 938, 1014, 1068, 1115, 1271, 1309, 1327, 1355, 1356], "boto3": 38, "bottom": [189, 328, 398, 818, 834, 932], "bottom_k": [291, 328, 398, 724, 725, 818, 895, 932, 1312, 1327], "bottom_k_bi": [397, 724, 725, 818], "bound": [111, 142, 143, 205, 219, 328, 364, 407, 504, 533, 535, 558, 564, 729, 739, 758, 759, 761, 762, 777, 805, 806, 818, 858, 932, 968, 1014, 1086, 1115, 1147, 1149, 1178, 1315, 1327, 1345], "boundari": [219, 328, 407, 498, 710, 818, 858, 932, 1014, 1110, 1289, 1327], "box": [26, 238, 328], "box_draw": 26, "branch": [63, 64, 839, 840, 850, 877, 888, 932], "break": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 139, 146, 152, 154, 156, 157, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 233, 235, 275, 285, 290, 297, 328, 331, 332, 417, 418, 498, 567, 615, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 746, 777, 818, 839, 840, 850, 862, 864, 891, 899, 932, 1009, 1025, 1026, 1110, 1201, 1213, 1216, 1218, 1219, 1306, 1311, 1327, 1332], "breakpoint": [418, 498, 615, 818, 1026, 1110, 1201, 1327], "breezah": 156, "breviti": 182, "broadcast": [690, 746, 938, 1269], "broader": 938, "brotli": [51, 55, 328, 932], "brussel": [451, 1062], "bst": [430, 434, 451, 1037, 1041, 1062], "bucket": [45, 146, 157, 158, 161, 328, 452, 465, 498, 818, 1063, 1076, 1110, 1327], "bud": [688, 689, 1267, 1268], "budget": 1336, "buffer": [142, 143, 144, 205, 231, 328, 385, 988, 1086, 1327], "buffer_s": [231, 328], "bug": [566, 567, 818, 868, 915, 932, 1180, 1327], "build": [62, 130, 938, 1358], "built": 100, "builtin": [140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 198, 328, 420, 818, 845, 932], "bundl": 182, "busi": [425, 744, 1032], "business_day_count": [425, 1032], "by_alternate_row": 1, "by_dtyp": 938, "by_first_letter_of_column_nam": 58, "by_first_letter_of_column_valu": 58, "by_index": 938, "by_left": [234, 328, 863, 932], "by_nam": 938, "by_pred": [261, 328], "by_right": [234, 328, 863, 932], "bye": 1, "byi": 1350, "bys": [219, 328, 858, 932], "byte": [41, 43, 46, 47, 48, 51, 52, 55, 140, 141, 142, 143, 148, 149, 150, 151, 152, 155, 156, 159, 160, 198, 205, 268, 328, 385, 402, 403, 420, 581, 677, 678, 679, 683, 684, 692, 703, 818, 845, 885, 932, 988, 1005, 1006, 1086, 1256, 1257, 1258, 1262, 1263, 1271, 1282, 1327, 1350], "bytesio": [46, 47, 48, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 198, 268, 328, 420, 581, 818, 845, 885, 932], "c": [1, 16, 41, 43, 45, 47, 48, 51, 58, 60, 65, 104, 130, 132, 134, 136, 147, 156, 186, 187, 189, 190, 191, 192, 193, 194, 196, 199, 200, 201, 202, 203, 204, 206, 210, 212, 215, 216, 217, 218, 219, 221, 223, 224, 232, 233, 236, 237, 239, 241, 243, 246, 248, 249, 250, 251, 253, 254, 255, 257, 258, 259, 261, 264, 265, 266, 273, 274, 275, 276, 277, 279, 280, 283, 284, 285, 286, 287, 288, 291, 295, 296, 297, 299, 300, 302, 307, 310, 311, 312, 315, 316, 318, 321, 322, 328, 332, 337, 339, 340, 342, 360, 380, 398, 418, 457, 495, 504, 525, 537, 567, 574, 591, 592, 606, 608, 612, 615, 653, 694, 702, 725, 728, 735, 737, 738, 740, 741, 742, 745, 746, 748, 749, 750, 751, 753, 754, 756, 766, 767, 768, 771, 772, 775, 776, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 797, 799, 801, 802, 803, 807, 814, 818, 834, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 854, 857, 858, 862, 866, 875, 877, 879, 880, 882, 883, 888, 889, 890, 891, 895, 898, 899, 902, 904, 908, 911, 912, 913, 916, 917, 919, 922, 923, 932, 936, 938, 1008, 1026, 1115, 1139, 1201, 1273, 1281, 1295, 1314, 1327, 1337, 1339, 1340, 1342, 1343, 1344, 1345, 1350, 1355], "c00": 938, "c01": 938, "c02": 938, "c03": 938, "c05": 938, "c1": 377, "c123": 1350, "c2": 377, "c20": 938, "c25": 938, "c3": 377, "c40": 938, "c45": 1350, "c4d79b": [46, 328], "c50": 938, "c567": [46, 328], "c60": 938, "c75": 938, "c80": 938, "c8ae6d2b276": [46, 328], "c93": 938, "c95": 938, "c96": 938, "c97": 938, "c98": 938, "c99": 938, "c_btm_by_a": [398, 818], "c_btm_by_b": [398, 818], "c_by_ca": [398, 725, 818], "c_by_cb": [398, 725, 818], "c_c_c": [797, 891, 932], "c_contigu": [286, 328], "c_max": [608, 818], "c_mean_squar": [307, 908], "c_min": [608, 818], "c_top_by_a": [725, 818], "c_top_by_b": [725, 818], "c_total": 1355, "cach": [56, 63, 64, 96, 97, 124, 148, 156, 159, 161, 165, 166, 167, 168, 180, 622, 623, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 702, 704, 705, 709, 818, 829, 839, 840, 850, 877, 888, 932, 1004, 1207, 1208, 1281, 1283, 1284, 1288, 1327], "cadi": [253, 328], "cafe": [707, 1286], "caf\u00e9": [402, 403, 683, 684, 938, 1005, 1006, 1262, 1263], "calamin": 147, "calcul": [46, 51, 55, 57, 197, 219, 276, 299, 328, 421, 473, 474, 475, 476, 516, 528, 547, 554, 560, 564, 640, 658, 663, 729, 731, 751, 794, 795, 799, 807, 818, 844, 858, 892, 900, 932, 1027, 1028, 1087, 1088, 1089, 1090, 1130, 1142, 1161, 1219, 1238, 1242, 1317, 1327], "calendar": [71, 72, 219, 234, 260, 298, 328, 428, 438, 440, 447, 452, 465, 469, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 1035, 1045, 1050, 1058, 1063, 1076, 1080, 1088, 1327], "calendar_year": [438, 469], "call": [7, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 63, 64, 134, 143, 144, 146, 147, 152, 154, 156, 157, 159, 160, 161, 165, 166, 167, 168, 172, 176, 182, 189, 218, 219, 236, 238, 260, 275, 286, 291, 327, 328, 397, 398, 413, 416, 425, 566, 567, 591, 592, 594, 596, 598, 599, 622, 623, 654, 724, 725, 744, 750, 814, 818, 834, 839, 840, 850, 857, 858, 877, 881, 888, 891, 895, 929, 930, 931, 932, 936, 938, 1000, 1032, 1180, 1208, 1234, 1308, 1312, 1327, 1337, 1341, 1355], "callabl": [58, 59, 60, 61, 156, 212, 238, 252, 257, 314, 328, 377, 558, 566, 567, 592, 593, 612, 629, 753, 754, 767, 779, 780, 792, 818, 868, 876, 879, 915, 932, 981, 1172, 1180, 1213, 1327], "caller": [145, 245, 328, 558, 868, 873, 915, 932], "cam": [257, 328, 879, 932], "can": [1, 2, 7, 20, 33, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 63, 64, 71, 72, 74, 88, 96, 97, 132, 142, 143, 144, 146, 147, 148, 152, 153, 154, 156, 157, 159, 160, 161, 162, 170, 171, 172, 176, 178, 182, 184, 189, 191, 201, 202, 203, 212, 214, 218, 219, 226, 228, 230, 233, 234, 238, 249, 253, 260, 262, 263, 266, 268, 269, 274, 285, 286, 290, 291, 292, 296, 302, 305, 314, 328, 331, 340, 377, 398, 413, 416, 417, 420, 425, 444, 445, 447, 451, 454, 457, 465, 474, 480, 483, 504, 530, 558, 566, 567, 574, 578, 581, 582, 588, 591, 592, 594, 596, 598, 599, 608, 613, 615, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 653, 658, 661, 666, 675, 682, 688, 689, 690, 697, 698, 699, 702, 713, 725, 742, 744, 757, 760, 767, 769, 773, 774, 777, 780, 797, 808, 814, 817, 818, 829, 834, 835, 839, 840, 845, 847, 848, 850, 858, 862, 863, 881, 883, 885, 886, 888, 890, 891, 895, 902, 905, 906, 932, 938, 940, 981, 1025, 1032, 1055, 1056, 1058, 1062, 1063, 1065, 1068, 1076, 1088, 1094, 1115, 1144, 1172, 1180, 1185, 1199, 1201, 1205, 1208, 1226, 1228, 1229, 1232, 1238, 1245, 1246, 1254, 1261, 1267, 1268, 1269, 1276, 1277, 1278, 1281, 1306, 1308, 1327, 1332, 1342, 1355], "cancel": [839, 932], "candid": [673, 675, 1252, 1254], "cannot": [1, 51, 55, 106, 109, 142, 143, 147, 148, 150, 153, 154, 161, 178, 182, 238, 263, 264, 286, 305, 314, 328, 382, 457, 477, 546, 567, 582, 649, 668, 694, 715, 780, 818, 888, 906, 907, 915, 932, 938, 985, 1068, 1160, 1180, 1225, 1247, 1273, 1308, 1327], "capabl": [1, 46, 328], "capac": [205, 272, 328, 1086, 1233, 1327], "capit": [710, 1289, 1350], "captur": [673, 675, 688, 689, 1252, 1254, 1267, 1268], "car": [257, 281, 328, 625, 818, 879, 932], "cardin": [188, 328, 344, 738, 818, 833, 932, 948, 1327], "care": [46, 269, 328, 567, 608, 651, 818, 886, 932, 1229, 1327], "cars_revers": [625, 818], "cartesian": [233, 328, 862, 932], "case": [46, 56, 57, 64, 104, 129, 131, 132, 133, 135, 144, 151, 152, 160, 161, 178, 207, 219, 231, 234, 238, 253, 260, 262, 263, 282, 285, 286, 328, 426, 474, 566, 578, 579, 592, 608, 628, 665, 666, 674, 676, 677, 678, 688, 689, 690, 710, 818, 840, 858, 863, 881, 932, 936, 938, 1033, 1088, 1093, 1244, 1245, 1253, 1255, 1256, 1257, 1267, 1268, 1269, 1289, 1306, 1327], "cast": [1, 45, 59, 60, 129, 131, 132, 135, 165, 166, 167, 168, 212, 219, 252, 260, 285, 286, 290, 302, 328, 343, 415, 416, 427, 454, 457, 468, 607, 612, 613, 620, 622, 628, 681, 682, 712, 719, 723, 747, 748, 798, 818, 858, 876, 881, 902, 932, 936, 938, 1009, 1023, 1024, 1034, 1065, 1068, 1079, 1199, 1205, 1260, 1261, 1291, 1298, 1304, 1308, 1310, 1311, 1327, 1348], "cast_str_to_int": [252, 328, 876, 932], "cast_to_supertyp": [818, 936], "cat": [32, 56, 96, 97, 418, 615, 665, 667, 708, 711, 723, 748, 813, 818, 938, 1026, 1110, 1201, 1244, 1246, 1287, 1290, 1323, 1327], "catalog": [0, 830], "catalog_nam": [3, 5, 6, 7], "cataloginfo": 4, "categor": [45, 56, 75, 96, 97, 99, 165, 166, 167, 168, 233, 283, 328, 400, 401, 402, 403, 404, 418, 615, 622, 623, 723, 818, 938, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1026, 1201, 1207, 1208, 1310, 1327], "categori": [46, 56, 75, 97, 283, 328, 401, 418, 498, 615, 818, 1003, 1026, 1110, 1201, 1303, 1327], "categorical_as_str": [165, 166, 167, 168], "categoricalord": 69, "categoricaltyp": [280, 328], "caus": [112, 121, 130, 142, 143, 144, 156, 186, 207, 286, 328, 566, 818, 1093, 1308, 1327], "cba": 699, "cbrt": [818, 1327, 1348], "cbrt_a": 1349, "cc": [477, 765, 818, 938, 1027, 1327, 1350], "ccc": [1, 46, 328, 713, 715, 716, 938, 1350], "ccy": 1358, "cd": [689, 713, 715, 716, 938], "cd34": 689, "cdatainterfac": [185, 941], "cde": [938, 1350], "cdt": [452, 465, 1063, 1076], "ceil": [59, 818, 1327, 1348], "ceil_a": 1349, "cell": [21, 22, 46, 253, 328], "cent": [428, 1267], "center": [21, 22, 46, 328, 473, 475, 476, 629, 630, 632, 634, 636, 638, 641, 643, 645, 818, 1087, 1089, 1090, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1327], "central": [157, 158, 182, 516, 658, 818, 1130, 1238, 1327], "centuri": 1351, "certain": [52, 53, 54, 55, 64, 224, 298, 328, 698, 699, 814, 839, 840, 877, 932, 1327], "certainli": [702, 704, 705, 1281, 1283, 1284], "cest": [451, 1062], "cet": [451, 1062], "cfg": [8, 10, 23, 182], "cfg_ascii_fram": 182, "cfg_markdown": 182, "cfg_verbos": 182, "cfoo": [904, 932], "chain": [591, 592, 594, 596, 598, 599, 808], "chanc": [169, 172, 176, 1358], "chang": [2, 3, 4, 5, 6, 7, 36, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 57, 63, 64, 73, 75, 79, 139, 142, 143, 144, 146, 147, 152, 154, 156, 157, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 235, 275, 285, 290, 297, 304, 328, 331, 332, 417, 418, 421, 457, 498, 567, 608, 609, 615, 622, 627, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 746, 777, 818, 839, 840, 850, 864, 891, 899, 905, 932, 936, 938, 1008, 1009, 1025, 1026, 1068, 1110, 1196, 1201, 1207, 1212, 1213, 1216, 1218, 1219, 1233, 1306, 1311, 1327, 1332], "changes_length": [818, 936], "char": [33, 142, 156, 674, 1253], "char_length": 1350, "charact": [13, 15, 18, 26, 32, 33, 34, 43, 44, 52, 98, 141, 142, 143, 145, 156, 328, 402, 403, 447, 671, 672, 674, 679, 683, 684, 686, 687, 688, 689, 692, 693, 694, 697, 698, 699, 700, 701, 703, 710, 712, 877, 932, 938, 1005, 1006, 1058, 1250, 1251, 1253, 1258, 1262, 1263, 1265, 1266, 1267, 1268, 1271, 1272, 1273, 1276, 1277, 1278, 1282, 1289, 1291, 1350], "character_length": 1350, "characterist": [172, 176], "charli": [142, 1356], "chart": [46, 328, 331, 877, 932, 1327, 1332], "cheap": [191, 192, 267, 303, 328, 837, 838, 884, 903, 932, 1013, 1015, 1327], "cheaper": [533, 1147], "check": [45, 72, 106, 142, 143, 156, 165, 166, 167, 168, 180, 204, 229, 233, 234, 328, 360, 381, 384, 387, 400, 404, 495, 504, 508, 526, 665, 670, 677, 696, 818, 862, 863, 868, 932, 964, 984, 987, 990, 1002, 1007, 1085, 1106, 1107, 1117, 1120, 1127, 1129, 1140, 1244, 1249, 1256, 1275, 1327], "check_column_ord": [165, 166], "check_dtyp": [165, 166, 167, 168, 937, 1085, 1327], "check_exact": [165, 166, 167, 168], "check_nam": [167, 168, 1085, 1327], "check_ord": [167, 168], "check_row_ord": [165, 166], "check_sorted": [234, 328, 863, 932], "choos": [51, 53, 55, 219, 253, 328, 457, 858, 932, 1068], "chrono": [43, 52, 100, 328, 454, 457, 702, 704, 705, 709, 932, 1065, 1068, 1281, 1283, 1284, 1288, 1350, 1351], "chunk": [20, 55, 138, 142, 143, 146, 152, 154, 156, 157, 159, 160, 161, 172, 176, 207, 232, 248, 286, 328, 343, 619, 818, 932, 947, 1012, 1093, 1104, 1186, 1204, 1302, 1308, 1327], "chunk_length": 1327, "chunkedarrai": [129, 248, 328], "citi": [688, 689], "clang": 164, "clariti": [261, 328], "class": [1, 2, 23, 37, 38, 39, 40, 56, 58, 59, 60, 61, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 115, 117, 169, 170, 263, 268, 328, 581, 777, 805, 814, 818, 824, 830, 842, 849, 882, 901, 907, 932, 937, 1307, 1327, 1331, 1339, 1355], "classmethod": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 198, 328, 420, 489, 818, 845, 932, 1337, 1355], "claus": [830, 1345, 1354], "clean": [702, 704, 705, 1281, 1283, 1284], "cleaner": 182, "cleanli": [16, 217, 328, 1355], "clear": [56, 96, 192, 328, 838, 932, 1015, 1327], "clearer": 132, "clickhous": 145, "client": [2, 38, 144], "clip": [818, 1327], "clipboard": [42, 141, 328, 830], "clone": [131, 132, 133, 134, 135, 191, 286, 328, 837, 932, 1013, 1327], "close": [46, 144, 219, 260, 275, 328, 418, 504, 563, 615, 628, 631, 633, 635, 637, 639, 642, 644, 646, 658, 758, 759, 761, 762, 777, 805, 806, 818, 858, 881, 891, 932, 1026, 1115, 1201, 1238, 1327], "closedinterv": [219, 260, 328, 504, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 777, 805, 806, 818, 858, 881, 932, 1115, 1327], "closest": [129, 234, 328, 863, 932, 1344, 1349], "closur": [631, 633, 642, 644, 646, 818], "cloud": [7, 40, 43, 45, 47, 51, 52, 53, 54, 55, 144, 146, 152, 154, 156, 157, 158, 159, 160, 161, 162, 328, 830, 932], "cloudi": [688, 689], "cloudpickl": 164, "cluster": 161, "cluster_with_column": [63, 64, 839, 840, 850, 877, 888, 932], "co": [674, 818, 1253, 1327, 1348], "coalesc": [233, 234, 297, 328, 502, 676, 678, 702, 818, 862, 863, 899, 932, 1257, 1281, 1343, 1348], "code": [182, 193, 233, 328, 381, 382, 383, 384, 387, 420, 567, 651, 818, 845, 862, 866, 932, 1229, 1327, 1337], "codebas": 182, "coeffici": [195, 328, 658, 818, 1238, 1327], "coerc": [65, 621, 818], "coercion": [52, 53, 54, 55, 63, 64, 621, 818, 839, 840, 850, 877, 888, 932], "col": [1, 18, 43, 46, 52, 57, 58, 59, 60, 133, 135, 156, 170, 172, 210, 218, 219, 227, 229, 233, 234, 235, 238, 249, 252, 253, 260, 261, 266, 274, 285, 290, 294, 296, 302, 307, 328, 332, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 589, 590, 591, 593, 595, 597, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 738, 742, 743, 745, 746, 747, 748, 750, 752, 755, 757, 758, 760, 761, 763, 767, 768, 769, 770, 771, 772, 781, 783, 785, 786, 788, 791, 792, 796, 797, 799, 801, 803, 804, 807, 808, 818, 854, 857, 858, 860, 862, 863, 864, 876, 881, 883, 890, 891, 897, 902, 904, 908, 932, 938, 1058, 1062, 1144, 1226, 1228, 1257, 1261, 1281, 1327, 1358], "col0": [172, 1358], "col1": [172, 253, 328, 932, 1358], "col2": [172, 253, 328, 932, 1358], "col3": [253, 328, 1358], "col4": 1358, "col_nam": [252, 328, 567, 808, 818, 876, 932], "cole": 139, "coli": [46, 328, 598, 599, 938, 1358], "collaps": [52, 53, 54, 55, 63, 64, 839, 840, 850, 877, 888, 932], "collapse_join": [52, 53, 54, 55, 63, 64, 839, 840, 850, 877, 888, 932], "collect": [60, 63, 64, 156, 157, 158, 162, 172, 173, 176, 201, 202, 236, 253, 275, 280, 293, 294, 328, 477, 508, 567, 747, 765, 769, 796, 797, 800, 818, 833, 834, 836, 837, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 878, 879, 880, 881, 883, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 929, 931, 932, 938, 1120, 1327, 1337, 1338, 1339, 1342, 1343, 1355, 1356, 1358], "collect_al": [60, 64, 839, 840, 932], "collect_all_async": [840, 932], "collect_async": [64, 932], "collect_schema": [60, 236, 328, 842, 849, 876, 882, 901, 932], "collis": 65, "colnam": [30, 46, 156, 328], "color": [56, 96, 97, 314, 328, 331, 381, 382, 383, 384, 387, 668, 730, 818, 915, 984, 985, 986, 987, 990, 1247, 1316, 1327, 1350], "column": [16, 22, 23, 24, 27, 28, 30, 45, 46, 51, 55, 56, 57, 58, 65, 72, 88, 97, 101, 105, 129, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 172, 187, 189, 190, 193, 195, 196, 199, 200, 201, 202, 203, 206, 210, 211, 214, 215, 217, 218, 219, 223, 224, 229, 230, 231, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 260, 261, 262, 263, 265, 266, 267, 269, 274, 276, 277, 278, 281, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 313, 328, 331, 332, 339, 340, 342, 353, 362, 371, 373, 376, 385, 398, 407, 411, 412, 418, 428, 429, 431, 432, 433, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 450, 453, 454, 455, 457, 466, 467, 469, 477, 479, 483, 485, 498, 503, 504, 519, 525, 531, 533, 553, 557, 558, 567, 573, 574, 576, 578, 580, 591, 593, 594, 595, 596, 597, 598, 599, 608, 615, 619, 621, 622, 623, 624, 626, 627, 628, 631, 633, 635, 637, 639, 642, 644, 646, 653, 654, 660, 661, 664, 672, 677, 679, 680, 690, 694, 695, 702, 703, 704, 705, 706, 707, 709, 714, 717, 725, 730, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 834, 836, 843, 846, 847, 848, 849, 851, 854, 857, 858, 862, 863, 864, 868, 869, 870, 871, 872, 874, 875, 878, 879, 881, 882, 883, 884, 886, 890, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 914, 915, 932, 937, 938, 945, 946, 966, 975, 977, 980, 988, 1004, 1008, 1014, 1019, 1020, 1026, 1035, 1038, 1039, 1040, 1043, 1044, 1045, 1049, 1050, 1051, 1053, 1054, 1057, 1059, 1060, 1064, 1065, 1066, 1068, 1077, 1078, 1080, 1092, 1110, 1114, 1139, 1145, 1147, 1167, 1171, 1201, 1208, 1209, 1212, 1232, 1243, 1251, 1256, 1259, 1273, 1274, 1281, 1283, 1284, 1285, 1286, 1288, 1294, 1297, 1303, 1304, 1316, 1327, 1343, 1345, 1347, 1349, 1350, 1352, 1353, 1356, 1357, 1358], "column_0": [1, 238, 292, 328], "column_1": [238, 292, 328, 1352], "column_2": [292, 328, 1352], "column_abc": 21, "column_format": [46, 328], "column_nam": [257, 292, 328, 879, 932], "column_tot": [46, 328], "column_width": [46, 328], "column_x": [142, 143, 147, 153, 156], "column_xyz": 21, "columnar": [133, 135, 231, 262, 328], "columnformatdict": [46, 328], "columnnameorselector": [190, 199, 201, 202, 244, 251, 253, 263, 283, 293, 294, 295, 296, 328, 836, 846, 847, 848, 872, 896, 897, 898, 932], "columnnotfounderror": [214, 215, 328], "columntotalsdefinit": [46, 328], "columnwidthsdefinit": [46, 328], "colx": [46, 328, 598, 599, 938, 1342, 1358], "colz": [938, 1358], "com": [38, 46, 145, 328, 473, 475, 476, 673, 674, 675, 818, 1087, 1089, 1090, 1252, 1253, 1254, 1327], "combin": [51, 55, 63, 64, 65, 210, 219, 220, 234, 253, 260, 298, 328, 341, 354, 465, 474, 487, 582, 607, 623, 628, 697, 698, 699, 758, 759, 761, 762, 805, 806, 808, 818, 839, 840, 850, 858, 863, 877, 881, 888, 932, 1063, 1076, 1088, 1208, 1276, 1277, 1278, 1327, 1343, 1356], "come": [124, 145, 219, 293, 295, 328, 425, 444, 445, 516, 558, 744, 818, 858, 896, 898, 932, 1032, 1055, 1056, 1130, 1327], "comm_subexpr_elim": [63, 64, 839, 840, 850, 877, 888, 932], "comm_subplan_elim": [63, 64, 839, 840, 850, 877, 888, 932], "comma": [42, 43, 142, 143, 156, 328], "comment": [142, 143, 156], "comment_prefix": [142, 143, 156], "common": [57, 63, 64, 65, 104, 142, 143, 156, 297, 328, 592, 824, 839, 840, 850, 877, 888, 899, 932, 1331], "compact": 1353, "compani": 145, "compar": [161, 165, 166, 167, 168, 204, 210, 328, 471, 472, 492, 494, 504, 518, 565, 602, 603, 818, 854, 932, 1008, 1084, 1085, 1192, 1327], "comparison": [162, 210, 328, 854, 932], "compat": [26, 46, 47, 48, 51, 55, 99, 280, 328, 665, 667, 673, 674, 675, 677, 688, 689, 932, 938, 1068, 1244, 1246, 1252, 1253, 1254, 1256, 1267, 1268, 1302, 1327, 1337, 1350, 1351, 1355], "compat_level": [47, 48, 280, 328, 1302, 1327], "compatibleframetyp": [1338, 1340, 1355], "compatlevel": [47, 48, 280, 328, 1302, 1327], "competit": [618, 818, 1203, 1327], "compil": [62, 358, 359, 523, 524, 962, 963, 1137, 1138], "complement": 938, "complet": [142, 144, 156, 1356], "complex": [173, 397, 398, 417, 724, 725, 818, 1000, 1025, 1312, 1327], "compliant": [46, 328, 457, 1068], "compon": [429, 453, 457, 702, 705, 763, 1036, 1064, 1068, 1281, 1284], "compos": 1356, "composit": [88, 1358], "compound": [136, 263, 328, 938], "comprehens": 170, "compress": [41, 47, 48, 51, 53, 55, 328, 626, 818, 932, 1211, 1327], "compression_level": [51, 55, 328, 932], "comput": [63, 65, 102, 205, 218, 234, 253, 287, 293, 307, 320, 328, 336, 345, 346, 347, 348, 349, 350, 367, 368, 369, 374, 375, 379, 405, 408, 409, 410, 413, 414, 415, 416, 422, 470, 473, 474, 475, 476, 478, 516, 540, 541, 542, 543, 547, 548, 549, 550, 554, 560, 561, 562, 563, 588, 608, 609, 614, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 655, 656, 657, 658, 662, 721, 722, 730, 735, 737, 740, 741, 742, 749, 751, 764, 784, 794, 795, 808, 818, 839, 857, 860, 862, 863, 896, 904, 908, 921, 932, 943, 949, 950, 951, 952, 953, 954, 971, 972, 973, 978, 979, 983, 1010, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1029, 1082, 1086, 1087, 1088, 1089, 1090, 1091, 1130, 1154, 1155, 1156, 1157, 1161, 1162, 1163, 1164, 1168, 1174, 1175, 1176, 1177, 1185, 1196, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1235, 1236, 1237, 1238, 1241, 1300, 1301, 1309, 1316, 1327, 1349, 1352], "computeerror": [578, 707, 1286], "concat": [56, 96, 97, 105, 143, 234, 328, 863, 904, 932, 1012, 1104, 1186, 1204, 1327, 1348], "concat_list": [530, 764], "concat_w": [275, 328, 797, 891, 932, 1348, 1355], "concaten": [56, 65, 96, 97, 212, 252, 328, 612, 664, 680, 746, 747, 748, 818, 876, 932, 1012, 1186, 1243, 1259, 1327, 1350], "concatmethod": 65, "conclus": [133, 135, 328, 932], "concret": [172, 176], "condit": [46, 202, 210, 235, 261, 328, 400, 404, 483, 504, 670, 696, 743, 767, 808, 818, 854, 864, 932, 1115, 1327, 1343, 1348, 1354], "conditional_format": [46, 328], "conditionalformatdict": [46, 328], "config": [0, 57, 197, 266, 285, 302, 328, 666, 676, 678, 690, 758, 759, 761, 762, 763, 830, 839, 844, 883, 902, 932, 1245, 1257, 1269], "configur": [11, 38, 45, 146, 157, 158, 182, 328, 331, 831, 839, 907, 932, 1327, 1332], "configure_axisx": [328, 331, 1327, 1332], "configure_point": [328, 331, 1327, 1332], "conflat": [504, 818], "conform": 1358, "confus": [104, 340, 511, 512, 690, 818], "conjunct": [46, 96, 144, 147, 153, 170, 328, 773, 776, 932], "conn": 144, "connect": [7, 43, 44, 47, 51, 52, 53, 54, 55, 75, 142, 144, 145, 148, 150, 152, 154, 156, 159, 160, 161, 162, 328, 831, 932], "connectionorcursor": [44, 144, 328], "connector": 145, "connectorx": [144, 145, 164], "consecut": [209, 328, 380, 482, 488, 664, 680, 688, 818, 853, 932, 1096, 1243, 1259, 1268, 1327], "consid": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 96, 97, 139, 142, 143, 144, 146, 152, 154, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 189, 201, 202, 204, 230, 235, 238, 244, 262, 275, 285, 290, 291, 293, 295, 297, 328, 331, 332, 398, 407, 417, 418, 487, 498, 566, 567, 574, 590, 591, 594, 596, 598, 599, 615, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 725, 746, 753, 767, 777, 814, 818, 834, 839, 840, 847, 848, 850, 864, 872, 891, 895, 896, 898, 899, 915, 932, 938, 1004, 1009, 1014, 1025, 1026, 1085, 1110, 1180, 1201, 1213, 1216, 1218, 1219, 1226, 1228, 1306, 1311, 1327, 1332, 1337], "consider": 139, "consist": [218, 251, 286, 328, 702, 758, 759, 777, 857, 932, 938, 947, 1093, 1281, 1308, 1327], "consola": [46, 328], "const": 16, "constant": [205, 260, 328, 426, 474, 480, 818, 881, 932, 1033, 1086, 1088, 1094, 1327], "constrain": [57, 156, 201, 202, 328, 847, 848, 932, 938], "constraint": [210, 328, 483, 591, 592, 594, 596, 598, 599, 808, 818, 854, 932, 938], "construct": [56, 96, 97, 104, 129, 131, 132, 133, 134, 135, 136, 139, 144, 328, 489, 790, 793, 809, 814, 818, 845, 932, 1004, 1327, 1342], "construct_categor": 56, "constructor": [139, 147, 176], "contain": [11, 43, 44, 45, 46, 52, 57, 62, 100, 131, 134, 136, 144, 145, 146, 154, 157, 158, 161, 171, 172, 174, 176, 189, 194, 201, 202, 203, 219, 227, 232, 249, 285, 286, 290, 291, 297, 309, 328, 340, 342, 365, 384, 387, 400, 404, 420, 495, 508, 537, 567, 664, 666, 670, 673, 675, 677, 680, 682, 695, 696, 712, 734, 735, 736, 737, 748, 780, 818, 834, 842, 845, 847, 848, 849, 858, 877, 895, 899, 910, 932, 936, 938, 945, 946, 969, 1002, 1007, 1106, 1107, 1151, 1186, 1243, 1245, 1249, 1252, 1254, 1256, 1259, 1261, 1274, 1275, 1291, 1302, 1308, 1327, 1345], "contains_with_expr": 381, "contains_with_lit": 381, "content": [19, 654, 818, 1234, 1327], "context": [56, 96, 97, 178, 249, 275, 328, 338, 483, 530, 566, 567, 578, 660, 661, 730, 750, 766, 769, 775, 776, 780, 789, 793, 796, 817, 818, 829, 830, 891, 904, 932, 1144, 1316, 1327, 1342, 1355, 1357], "contigu": [65, 129, 134, 142, 143, 146, 148, 150, 152, 154, 156, 157, 159, 160, 161, 256, 286, 328], "continu": [142, 418, 615, 658, 818, 1026, 1201, 1238, 1327, 1344], "contrast": 763, "control": [16, 17, 46, 64, 65, 147, 170, 172, 274, 275, 285, 328, 623, 661, 797, 818, 839, 840, 850, 890, 891, 907, 929, 932, 1208, 1306, 1327, 1339, 1342, 1355], "conveni": [207, 290, 328, 924, 947, 1093, 1327, 1337], "convers": [130, 186, 231, 232, 262, 263, 282, 286, 287, 328, 430, 702, 704, 705, 709, 830, 1037, 1281, 1283, 1284, 1288, 1308, 1309, 1327, 1353, 1355], "convert": [45, 100, 130, 134, 146, 147, 153, 157, 186, 263, 281, 282, 283, 284, 285, 286, 287, 289, 290, 328, 376, 377, 419, 430, 454, 457, 557, 558, 566, 592, 617, 675, 702, 704, 705, 706, 707, 709, 714, 818, 932, 936, 980, 981, 1008, 1037, 1065, 1068, 1171, 1172, 1254, 1281, 1283, 1284, 1285, 1286, 1288, 1294, 1297, 1305, 1306, 1307, 1308, 1309, 1311, 1327, 1350, 1352, 1353, 1355], "convert_time_zon": [451, 1062], "coo": [257, 328, 879, 932], "coord": 717, "coordin": [46, 328], "copi": [42, 129, 130, 141, 184, 186, 191, 192, 232, 280, 286, 287, 302, 328, 480, 818, 837, 838, 902, 932, 940, 1013, 1015, 1094, 1302, 1307, 1308, 1309, 1327, 1355], "corasick": [666, 676, 678, 690, 1245, 1255, 1257, 1269], "core": [1, 235, 328, 864, 932, 1355, 1358], "cores_right": [235, 328, 864, 932], "corner": [26, 46, 136, 328], "corr": 328, "corrcoef": [195, 328], "correct": [147, 153, 475, 476, 516, 558, 640, 658, 818, 868, 932, 936, 1089, 1090, 1130, 1219, 1238, 1327], "correctli": [46, 328, 566, 818], "correl": [195, 328, 749, 794], "correlationmethod": 749, "correspond": [219, 234, 260, 286, 298, 328, 398, 438, 447, 452, 465, 567, 618, 628, 631, 633, 635, 637, 639, 642, 644, 646, 725, 758, 759, 761, 762, 805, 806, 818, 839, 858, 863, 881, 932, 1045, 1058, 1063, 1076, 1203, 1327, 1344], "cosd": 1348, "cosh": [818, 1327], "cosin": [345, 346, 408, 409, 566, 818, 949, 950, 1016, 1017, 1327, 1352], "cost": [235, 263, 328, 688, 864, 932, 1268], "cost_usd": [688, 1268], "cot": [818, 1327, 1348], "cotang": [410, 818, 1018, 1327, 1352], "cotd": 1348, "could": [45, 94, 102, 328, 655, 753, 763, 767, 818, 836, 844, 932, 1235, 1327], "count": [46, 162, 188, 197, 219, 249, 250, 260, 292, 298, 304, 319, 328, 344, 361, 370, 412, 425, 474, 498, 519, 527, 539, 544, 567, 590, 606, 628, 631, 633, 635, 637, 639, 642, 644, 646, 667, 728, 730, 738, 744, 752, 776, 788, 818, 833, 844, 858, 875, 881, 905, 920, 932, 938, 948, 965, 974, 1020, 1027, 1032, 1088, 1110, 1133, 1141, 1153, 1158, 1187, 1195, 1246, 1314, 1316, 1327, 1332, 1336, 1348], "count_digit": 667, "count_num": [46, 328], "counterpart": 139, "countri": [234, 328, 426, 863, 932, 1033], "country_holidai": [425, 744, 1032], "covari": [751, 795, 818, 936], "cover": 16, "cow": [686, 687, 1265, 1266], "cpu": [142, 143, 164, 285, 328, 839, 907, 932, 1306, 1327], "crab": [665, 677, 1244, 1256], "crate": [43, 52, 100, 328, 665, 667, 673, 674, 675, 677, 688, 689, 702, 704, 705, 709, 932, 938, 1244, 1246, 1252, 1253, 1254, 1256, 1267, 1268, 1281, 1283, 1284, 1288], "creat": [44, 46, 56, 97, 129, 133, 135, 142, 143, 144, 145, 148, 150, 154, 157, 158, 170, 171, 172, 173, 174, 175, 176, 177, 182, 191, 192, 219, 250, 253, 260, 285, 286, 298, 302, 305, 328, 331, 332, 429, 452, 465, 474, 558, 566, 619, 628, 631, 633, 635, 637, 639, 642, 644, 646, 747, 757, 758, 759, 760, 761, 762, 763, 777, 804, 805, 806, 814, 818, 837, 838, 844, 850, 858, 881, 902, 906, 932, 937, 1013, 1015, 1026, 1036, 1063, 1076, 1088, 1193, 1201, 1204, 1306, 1308, 1327, 1332, 1354, 1355, 1358], "create_async_engin": 144, "create_engin": [44, 328], "creation": 143, "credenti": [7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 159, 160, 161, 328, 830, 932], "credential_provid": [7, 43, 45, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 159, 160, 161, 328, 932], "credentialproviderfunct": [7, 43, 45, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 159, 160, 161, 328, 932], "cross": [233, 328, 862, 932, 1343], "crustacean": [677, 1256], "cst": [452, 465, 1063, 1076], "csv": [42, 43, 52, 53, 54, 55, 141, 142, 143, 147, 156, 328, 830, 932], "csvencod": [142, 143, 156], "csvquotestyl": [43, 52, 328, 932], "ctx": [1336, 1338, 1339, 1340, 1341, 1342, 1355], "cube": [1, 61, 405, 613, 818, 1010, 1327, 1349], "cuda": 907, "cum_count": [818, 1327], "cum_count_revers": [412, 818], "cum_max": [818, 1327], "cum_max_all_fil": [413, 818], "cum_max_revers": [413, 818], "cum_min": [818, 1327], "cum_min_revers": [414, 818], "cum_prod": [337, 818, 1327], "cum_prod_revers": [415, 818], "cum_reduc": 753, "cum_sum": [501, 608, 718, 756, 818, 860, 932, 1129, 1327], "cum_sum_revers": [416, 818], "cumsum_horizont": 755, "cumul": [412, 413, 414, 415, 416, 752, 753, 754, 755, 756, 818, 1020, 1021, 1022, 1023, 1024, 1327], "cumulative_ev": [818, 1327], "cumulative_sal": [608, 818], "current": [7, 8, 9, 11, 12, 36, 43, 44, 47, 51, 52, 53, 54, 55, 136, 144, 145, 152, 154, 156, 159, 160, 161, 169, 170, 172, 173, 174, 175, 176, 177, 191, 192, 199, 233, 234, 257, 275, 285, 290, 328, 331, 332, 434, 558, 609, 818, 837, 838, 846, 862, 863, 879, 891, 907, 932, 938, 1013, 1015, 1033, 1041, 1196, 1306, 1311, 1327, 1332, 1339, 1355], "cursor": [44, 144, 328], "custom": [1, 33, 45, 46, 58, 59, 60, 61, 103, 175, 177, 197, 238, 253, 314, 328, 377, 425, 454, 457, 558, 566, 567, 629, 730, 744, 779, 780, 818, 844, 868, 915, 932, 981, 1032, 1065, 1068, 1172, 1180, 1213, 1316, 1327, 1358], "customis": [46, 328], "cut": [615, 818, 1201, 1327], "cxx": 1350, "cypher": 144, "d": [34, 41, 43, 45, 46, 47, 48, 51, 132, 162, 187, 210, 217, 219, 220, 221, 224, 233, 237, 279, 280, 290, 296, 300, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 337, 339, 412, 435, 454, 457, 504, 573, 612, 653, 667, 674, 688, 689, 694, 702, 704, 705, 745, 746, 763, 769, 797, 818, 854, 858, 862, 891, 911, 913, 916, 917, 918, 919, 920, 921, 922, 932, 938, 1008, 1020, 1042, 1065, 1068, 1115, 1139, 1246, 1253, 1267, 1268, 1273, 1281, 1283, 1284, 1295, 1327, 1343, 1345, 1347, 1350, 1351], "d1": [46, 328, 429], "d2": 429, "d3": 429, "d789": [46, 328], "d_4": [694, 1273], "dai": [71, 72, 89, 219, 232, 234, 260, 298, 328, 331, 425, 444, 445, 447, 448, 450, 452, 454, 457, 458, 465, 467, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 744, 757, 758, 759, 760, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 938, 1032, 1055, 1056, 1058, 1059, 1061, 1063, 1065, 1068, 1069, 1076, 1078, 1088, 1327, 1351], "dark": 1336, "data": [0, 1, 16, 24, 25, 27, 30, 34, 41, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 65, 70, 71, 72, 74, 85, 86, 88, 89, 97, 100, 104, 106, 109, 123, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 184, 186, 192, 193, 203, 206, 207, 217, 218, 219, 231, 232, 233, 236, 238, 251, 252, 256, 261, 262, 263, 265, 269, 272, 280, 285, 286, 287, 290, 292, 302, 306, 326, 328, 332, 340, 341, 342, 345, 346, 347, 348, 349, 350, 353, 356, 357, 358, 359, 360, 362, 365, 367, 368, 369, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 399, 401, 402, 403, 407, 408, 409, 410, 411, 418, 419, 420, 425, 426, 427, 428, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 479, 490, 492, 493, 494, 498, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 518, 519, 523, 524, 526, 531, 537, 539, 546, 557, 559, 565, 567, 602, 603, 607, 608, 615, 617, 618, 621, 622, 623, 624, 626, 627, 631, 633, 635, 637, 639, 642, 644, 646, 647, 649, 651, 656, 657, 658, 664, 667, 668, 669, 672, 673, 674, 675, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 702, 703, 704, 705, 707, 709, 712, 721, 722, 723, 726, 727, 730, 733, 739, 747, 750, 757, 758, 759, 760, 761, 762, 763, 773, 774, 776, 777, 778, 779, 780, 790, 793, 804, 805, 806, 809, 814, 818, 830, 837, 838, 839, 840, 845, 849, 851, 857, 858, 882, 886, 902, 932, 937, 940, 945, 946, 958, 960, 961, 962, 963, 964, 966, 968, 969, 980, 982, 984, 985, 986, 988, 989, 1001, 1003, 1005, 1006, 1013, 1014, 1015, 1026, 1027, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1088, 1092, 1093, 1110, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1135, 1136, 1137, 1138, 1140, 1145, 1151, 1153, 1160, 1171, 1173, 1180, 1194, 1201, 1203, 1207, 1208, 1209, 1211, 1212, 1223, 1225, 1233, 1238, 1243, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1258, 1259, 1260, 1261, 1262, 1263, 1271, 1272, 1273, 1274, 1281, 1282, 1283, 1284, 1286, 1288, 1291, 1302, 1307, 1308, 1309, 1310, 1313, 1326, 1327, 1336, 1343, 1350, 1355, 1357], "data_bar": [46, 328], "data_bar_2010": [46, 328], "data_label": [46, 328], "data_page_s": [51, 55, 328, 932], "databas": [44, 128, 144, 145, 328, 830], "databrick": 2, "datafram": [0, 1, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 84, 101, 104, 105, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 159, 160, 161, 165, 166, 169, 170, 182, 326, 327, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 814, 818, 830, 839, 840, 842, 844, 846, 849, 851, 855, 858, 862, 863, 864, 865, 866, 868, 872, 873, 877, 880, 882, 889, 891, 896, 897, 898, 899, 901, 904, 908, 909, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 932, 937, 938, 1026, 1027, 1062, 1088, 1110, 1180, 1201, 1257, 1261, 1273, 1274, 1297, 1303, 1304, 1316, 1327, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1358], "dataframeplot": [328, 331], "dataload": [290, 328], "datapoint": [219, 328, 858, 932], "dataset": [20, 51, 75, 142, 143, 146, 147, 153, 156, 157, 162, 233, 290, 328, 516, 818, 830, 862, 868, 932, 1130, 1327, 1356], "datat": [46, 328], "datatyp": [43, 52, 129, 131, 132, 133, 135, 137, 149, 151, 152, 154, 155, 160, 161, 173, 174, 176, 203, 212, 328, 399, 477, 653, 723, 746, 765, 778, 814, 818, 830, 849, 932, 937, 938, 1001, 1027, 1081, 1180, 1232, 1310, 1327, 1353], "date": [22, 46, 57, 72, 142, 143, 145, 147, 153, 154, 156, 159, 161, 162, 190, 197, 217, 219, 232, 234, 260, 275, 328, 331, 360, 425, 427, 428, 429, 430, 433, 435, 437, 438, 440, 443, 444, 445, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 526, 608, 628, 631, 633, 635, 637, 639, 642, 644, 646, 702, 704, 723, 744, 758, 759, 761, 762, 769, 777, 778, 804, 818, 836, 844, 858, 863, 881, 932, 938, 964, 1032, 1034, 1035, 1036, 1037, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1088, 1140, 1189, 1190, 1281, 1283, 1310, 1327, 1348, 1351, 1353], "date32": [232, 328], "date_format": [43, 52, 328, 932], "date_min": 447, "date_minus_1y_2mon": 1058, "date_part": 1348, "date_plus_1i": [447, 1058], "date_rang": [234, 298, 328, 433, 435, 448, 456, 467, 761, 762, 863, 932, 1040, 1054, 1059, 1060, 1077, 1078], "date_right": [234, 328, 863, 932], "datetim": [7, 22, 43, 46, 52, 57, 100, 136, 146, 154, 157, 159, 161, 172, 173, 174, 176, 190, 197, 217, 219, 232, 234, 260, 275, 298, 328, 331, 360, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 526, 575, 608, 628, 631, 633, 635, 637, 639, 642, 644, 646, 702, 705, 723, 744, 757, 758, 759, 761, 762, 763, 769, 777, 778, 805, 806, 818, 836, 844, 858, 863, 881, 932, 937, 938, 964, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1088, 1140, 1189, 1190, 1281, 1284, 1308, 1310, 1327, 1350, 1351], "datetime_format": [43, 52, 328, 932], "datetime_rang": [219, 328, 427, 430, 444, 445, 447, 451, 452, 458, 459, 460, 461, 462, 463, 464, 465, 468, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 818, 858, 932, 1033, 1034, 1037, 1041, 1042, 1043, 1048, 1049, 1051, 1053, 1055, 1056, 1057, 1058, 1062, 1063, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076], "datetime_str": 454, "datetimeindex": 134, "david": 1356, "day_nam": [454, 457], "day_of_month": [433, 448, 467], "day_of_year": [433, 448, 467], "daylight": [219, 234, 260, 298, 328, 426, 434, 447, 452, 465, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 1041, 1058, 1063, 1076], "dayofweek": 1351, "dayofyear": 1351, "days_diff": 458, "db": [44, 144, 145, 328], "dbapi2": 144, "dbc": [667, 1246], "dbreadengin": 145, "dbwriteengin": [44, 328], "dbwritemod": [44, 328], "dd": [46, 328, 1350], "ddd": [1, 46, 328, 713, 715, 716], "dddd": 1350, "ddof": [276, 299, 328, 374, 379, 554, 560, 641, 642, 645, 646, 663, 731, 749, 751, 794, 795, 799, 807, 818, 892, 900, 932, 978, 983, 1168, 1174, 1220, 1222, 1242, 1317, 1327], "ddww": 1350, "de": 1350, "deal": [51, 55, 231, 328, 340, 342, 450, 451, 618, 702, 705, 734, 735, 736, 737, 760, 818, 932, 945, 946, 1061, 1062, 1203, 1281, 1284, 1327], "debug": [35, 868, 932, 1358], "decad": [1336, 1351], "decai": [473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327], "decemb": [457, 1068], "decim": [15, 16, 17, 33, 34, 43, 46, 52, 142, 143, 156, 328, 332, 647, 706, 818, 932, 938, 1223, 1285, 1327, 1349], "decimal_comma": [142, 143, 156], "decimal_separ": [15, 33], "declar": [129, 131, 132, 133, 135, 144, 151, 152, 160, 285, 290, 328, 932, 938, 1336], "decod": [142, 143, 681], "decompos": [294, 328, 897, 932], "decompress": [51, 53, 55, 328, 932], "decor": [56, 58, 59, 60, 61, 172, 176, 238, 328, 567, 818, 829, 830, 1180, 1327], "dedic": [1, 130, 231, 262, 328, 938, 1355], "deem": [197, 328, 844, 932], "deepcopi": [191, 328, 837, 932, 1013, 1327], "def": [1, 56, 58, 59, 60, 61, 144, 170, 172, 176, 182, 252, 292, 328, 337, 612, 671, 674, 699, 733, 779, 818, 840, 876, 932, 938, 1250, 1253, 1358], "default": [10, 11, 15, 16, 20, 33, 36, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 63, 64, 65, 69, 72, 73, 74, 129, 131, 132, 133, 134, 135, 136, 142, 143, 145, 147, 148, 150, 151, 152, 153, 154, 156, 159, 160, 161, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 182, 197, 198, 201, 202, 205, 214, 218, 219, 220, 231, 233, 234, 242, 244, 251, 253, 260, 261, 262, 263, 264, 268, 271, 275, 276, 278, 283, 285, 286, 290, 293, 295, 296, 297, 299, 304, 313, 328, 339, 340, 342, 365, 372, 377, 385, 418, 420, 425, 450, 451, 457, 470, 472, 473, 475, 476, 496, 533, 537, 546, 551, 552, 554, 558, 560, 561, 566, 574, 575, 578, 581, 600, 601, 603, 608, 609, 615, 618, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 652, 654, 663, 664, 673, 680, 692, 697, 698, 699, 702, 704, 705, 707, 709, 730, 731, 734, 736, 739, 743, 744, 748, 749, 751, 758, 759, 760, 761, 762, 763, 766, 769, 773, 774, 775, 777, 778, 784, 790, 793, 796, 799, 800, 802, 805, 806, 807, 809, 818, 839, 840, 844, 845, 847, 848, 850, 857, 858, 862, 863, 872, 881, 885, 887, 891, 892, 896, 898, 899, 900, 905, 907, 914, 932, 938, 945, 946, 969, 976, 981, 988, 1014, 1026, 1027, 1032, 1061, 1062, 1068, 1082, 1086, 1087, 1089, 1090, 1108, 1147, 1151, 1160, 1165, 1166, 1172, 1189, 1190, 1196, 1201, 1203, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1225, 1231, 1234, 1242, 1243, 1244, 1252, 1256, 1259, 1271, 1276, 1277, 1278, 1281, 1283, 1284, 1286, 1288, 1306, 1308, 1316, 1317, 1327, 1349, 1350, 1358], "default_match": [665, 677], "default_scop": 40, "defaultazurecredenti": 39, "defaultdict": [263, 328], "defer": [182, 328, 331, 332, 1327, 1332], "defin": [43, 46, 52, 72, 75, 144, 151, 169, 170, 172, 190, 201, 202, 206, 219, 238, 249, 252, 260, 297, 314, 328, 403, 504, 533, 567, 612, 615, 627, 628, 631, 633, 635, 637, 639, 642, 644, 646, 679, 684, 692, 703, 710, 758, 759, 761, 762, 777, 780, 800, 805, 806, 818, 836, 847, 848, 851, 858, 876, 881, 899, 915, 932, 937, 938, 1006, 1115, 1147, 1180, 1201, 1212, 1258, 1263, 1271, 1282, 1289, 1327], "definit": [46, 76, 328, 516, 818, 937, 938, 1130, 1327], "deflat": [41, 328], "deg": 1352, "degre": [276, 299, 328, 554, 560, 617, 641, 642, 645, 646, 663, 731, 741, 751, 794, 795, 799, 807, 818, 892, 900, 932, 1220, 1222, 1242, 1317, 1327, 1348], "delet": [75, 1343, 1357], "delimit": [50, 52, 152, 160, 253, 283, 328, 664, 680, 932, 1243, 1259, 1303, 1327], "delta": [45, 146, 157, 276, 299, 328, 554, 560, 641, 642, 645, 646, 663, 731, 751, 794, 795, 799, 807, 818, 830, 892, 900, 932, 1220, 1222, 1242, 1317, 1327], "delta_merge_opt": [45, 328], "delta_table_opt": [7, 146, 157], "delta_table_vers": 7, "delta_write_opt": [45, 328], "deltalak": [7, 45, 146, 157, 164, 328], "deltat": [45, 146, 157, 328], "demo": [46, 328], "demonstr": [142, 487, 818, 938], "dens": [26, 217, 328, 618, 818, 1203, 1327], "densiti": [1327, 1332], "depend": [51, 56, 62, 97, 144, 147, 153, 164, 187, 328, 358, 359, 523, 524, 567, 578, 615, 618, 763, 766, 769, 775, 818, 942, 962, 963, 1137, 1138, 1201, 1203, 1327, 1358], "deploi": [172, 176], "deprec": [45, 142, 143, 169, 170, 171, 172, 176, 179, 188, 244, 286, 304, 309, 328, 432, 468, 489, 585, 622, 664, 672, 732, 741, 749, 750, 818, 833, 850, 872, 885, 898, 904, 905, 910, 932, 1039, 1047, 1048, 1079, 1107, 1207, 1243, 1251, 1308, 1327], "depth": 139, "desc": [938, 1336, 1339, 1343, 1345], "descend": [57, 269, 274, 328, 353, 373, 553, 608, 618, 651, 660, 661, 730, 742, 818, 886, 890, 932, 957, 977, 1127, 1167, 1203, 1229, 1240, 1316, 1327], "describ": [172, 217, 328, 685, 932, 1264, 1327], "descript": [219, 328, 858, 932, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1353, 1356, 1357], "deseri": [139, 268, 328, 489, 581, 818, 885, 932], "deserializ": [198, 268, 328, 420, 581, 818, 845, 885, 932], "design": [285, 290, 328], "desir": [172, 233, 328, 377, 468, 558, 862, 932, 981, 1079, 1172], "destin": 145, "detail": [62, 130, 144, 145, 165, 167, 186, 219, 328, 457, 723, 818, 858, 907, 932, 1068, 1310, 1327, 1358], "determin": [20, 43, 46, 52, 57, 65, 94, 139, 142, 143, 144, 147, 153, 154, 156, 161, 163, 189, 193, 212, 219, 231, 232, 238, 260, 291, 292, 298, 328, 398, 437, 450, 451, 498, 558, 578, 615, 621, 623, 658, 666, 679, 702, 703, 705, 706, 725, 760, 790, 793, 809, 818, 834, 841, 842, 849, 858, 881, 895, 901, 932, 1044, 1061, 1062, 1110, 1172, 1201, 1207, 1208, 1238, 1245, 1281, 1284, 1285, 1327], "dev": [185, 941, 1220, 1327], "develop": [145, 172, 176], "deviat": [276, 328, 475, 641, 642, 663, 799, 818, 892, 932, 1089, 1242, 1327, 1344], "devic": [285, 328, 839, 907, 932, 1306, 1327], "devicememoryresourc": 907, "df": [1, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 58, 59, 84, 101, 105, 130, 131, 132, 133, 134, 135, 136, 143, 144, 145, 156, 169, 170, 172, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 634, 636, 638, 640, 641, 643, 645, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 708, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 814, 818, 858, 881, 897, 899, 912, 915, 923, 932, 938, 1062, 1088, 1257, 1261, 1273, 1274, 1304, 1327, 1332, 1336, 1337, 1338, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1358], "df0": [245, 328, 873, 932, 1342], "df1": [57, 65, 165, 166, 204, 207, 245, 275, 300, 328, 873, 932, 1339, 1341, 1342, 1343, 1355], "df2": [57, 65, 165, 166, 204, 207, 300, 328, 1339, 1341, 1342, 1343, 1355], "df3": [57, 328], "df4": 328, "df5": 328, "df6": 328, "df_a": 1355, "df_a1": 65, "df_a2": 65, "df_a3": 65, "df_agg_nuniqu": [249, 328], "df_b": 1355, "df_current_batch": 143, "df_d1": 65, "df_d2": 65, "df_from_str_repr": [284, 328], "df_h1": 65, "df_h2": 65, "df_new_grid": [502, 818], "df_nuniqu": [249, 328], "df_original_grid": [502, 818], "df_panda": 1337, "df_pd": 130, "df_tempor": [631, 633, 635, 637, 639, 642, 644, 646, 818], "dfi": [130, 186], "diagon": [65, 292, 328], "diagonal_relax": 65, "dict": [7, 36, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 58, 60, 62, 129, 131, 132, 133, 134, 135, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 172, 211, 231, 251, 257, 261, 262, 263, 281, 282, 285, 290, 292, 328, 818, 879, 932, 936, 937, 938, 1099, 1327, 1340], "dictat": [447, 818, 936, 1058], "dictionari": [7, 36, 43, 45, 46, 47, 51, 52, 53, 54, 55, 62, 88, 129, 131, 132, 133, 135, 139, 142, 143, 144, 145, 146, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 231, 251, 261, 262, 263, 281, 282, 285, 290, 328, 932, 937], "did": [426, 1033], "diff": [302, 328, 458, 459, 460, 461, 462, 463, 464, 547, 818, 902, 932, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1161, 1327], "differ": [46, 51, 100, 103, 124, 142, 147, 162, 165, 167, 182, 201, 207, 219, 220, 231, 233, 253, 260, 262, 263, 282, 285, 286, 292, 328, 421, 433, 447, 448, 451, 457, 466, 472, 487, 496, 528, 547, 549, 558, 567, 600, 601, 603, 608, 622, 623, 702, 728, 766, 769, 775, 818, 847, 848, 850, 858, 862, 881, 932, 938, 1008, 1028, 1040, 1058, 1059, 1062, 1068, 1077, 1084, 1093, 1108, 1142, 1161, 1163, 1180, 1189, 1190, 1192, 1207, 1208, 1281, 1327, 1351, 1353, 1355], "digit": [73, 612, 647, 648, 674, 818, 938, 1223, 1224, 1246, 1253, 1327, 1358], "dimens": [129, 131, 133, 135, 151, 152, 160, 328, 624, 818, 932, 1209, 1308, 1327], "dimension": [131, 133, 135, 286, 328, 932, 1327], "direct": [46, 145, 154, 158, 161, 271, 285, 296, 328, 372, 551, 652, 818, 887, 932, 976, 1165, 1231, 1327], "directli": [12, 36, 46, 64, 144, 172, 176, 182, 263, 285, 328, 473, 475, 476, 623, 793, 818, 840, 932, 1087, 1089, 1090, 1208, 1306, 1327, 1339, 1355, 1358], "directori": [46, 51, 154, 156, 159, 161, 328, 936], "dirpath": [41, 43, 47, 48, 51, 156, 328], "disabl": [51, 55, 56, 96, 97, 154, 159, 173, 231, 328, 839, 932], "disable_string_cach": 97, "disallow": 172, "discard": [210, 328, 483, 818, 854, 932, 1097, 1327], "disco": [676, 678, 1255, 1257], "discont": [676, 678, 1255, 1257], "discourag": [567, 818], "discoveri": [253, 328], "discret": [418, 421, 470, 498, 528, 547, 615, 818, 1026, 1028, 1082, 1110, 1142, 1161, 1201, 1327], "disk": [51, 52, 53, 54, 55, 148, 328, 582, 888, 932], "dispatch": 938, "displai": [13, 16, 17, 18, 19, 23, 24, 25, 29, 30, 31, 46, 197, 217, 328, 844, 850, 932], "distanc": [234, 328, 498, 818, 863, 932, 1110, 1327], "distinct": [46, 176, 251, 253, 306, 328, 378, 507, 510, 559, 618, 627, 763, 818, 982, 1119, 1122, 1173, 1203, 1212, 1327, 1344, 1354, 1356, 1358], "distinct_count": [51, 55, 328, 932], "distinguish": [457, 1068], "distribut": [516, 658, 818, 1130, 1238, 1327], "div": 1348, "divid": [26, 418, 452, 465, 473, 475, 476, 487, 516, 615, 818, 1026, 1063, 1076, 1087, 1089, 1090, 1130, 1201, 1327, 1344, 1349], "divis": [487, 726, 818, 1349], "divisor": [276, 299, 328, 554, 560, 641, 642, 645, 646, 663, 731, 751, 794, 795, 799, 807, 818, 892, 900, 932, 1220, 1222, 1242, 1317, 1327], "dl": [290, 328], "do": [1, 46, 52, 53, 54, 55, 57, 63, 64, 131, 132, 135, 142, 154, 156, 161, 165, 166, 167, 168, 187, 197, 199, 207, 230, 233, 234, 253, 257, 280, 292, 296, 328, 331, 417, 425, 530, 566, 688, 689, 697, 698, 699, 749, 790, 793, 809, 818, 835, 839, 840, 844, 846, 850, 862, 863, 868, 877, 879, 888, 907, 932, 938, 1025, 1032, 1093, 1144, 1267, 1268, 1276, 1277, 1278, 1311, 1327, 1332], "do_polars_oper": 35, "do_someth": 144, "do_various_th": 182, "doc": [45, 47, 48, 145, 148, 150, 165, 167, 184, 185, 195, 328, 940, 941], "document": [38, 100, 145, 184, 328, 332, 454, 457, 682, 702, 704, 705, 709, 814, 907, 940, 1008, 1065, 1068, 1261, 1281, 1283, 1284, 1288], "doe": [16, 43, 45, 52, 57, 65, 118, 129, 131, 132, 133, 135, 136, 142, 143, 144, 145, 146, 147, 151, 152, 156, 157, 160, 162, 192, 207, 210, 214, 219, 220, 232, 233, 261, 262, 263, 293, 302, 305, 328, 331, 332, 468, 483, 487, 496, 558, 567, 666, 676, 678, 690, 698, 699, 728, 814, 818, 838, 839, 844, 854, 858, 862, 868, 896, 902, 906, 932, 1015, 1079, 1093, 1097, 1108, 1233, 1245, 1255, 1257, 1269, 1327, 1332, 1350], "doesn": [45, 142, 156, 219, 234, 328, 470, 818, 858, 863, 932, 1082, 1327], "dog": [665, 708, 711, 748, 1244, 1287, 1290], "doi": 1351, "dollar": [688, 689, 1267, 1268], "domain": [1, 674, 1253], "don": [65, 219, 234, 238, 293, 296, 328, 417, 530, 567, 608, 818, 858, 863, 896, 932, 938, 1025, 1144, 1180, 1327], "done": [143, 162, 182, 188, 234, 328, 343, 344, 608, 818, 833, 836, 863, 932, 948, 1327], "dot": [57, 582, 814, 818, 888, 932, 1327], "doubl": [287, 328, 688, 689, 1267, 1268], "dow": 1351, "down": [156, 159, 160, 161, 162, 190, 328, 399, 486, 818, 1100, 1327], "download": [152, 156, 159, 160, 582, 888, 932], "downstream": [286, 328, 651, 818, 1229, 1327], "dr": 158, "drago": [679, 1258], "dragon": 679, "dragonfr": 1258, "dragonfruit": [679, 692, 703, 1258, 1271, 1282], "dramat": 147, "draw": [26, 31, 172, 176, 1358], "drawback": 814, "drawfn": 1358, "drawing_charact": 26, "dremio": 144, "driver": [44, 144, 145, 328], "drop": [1, 132, 200, 201, 202, 238, 293, 302, 328, 421, 423, 424, 528, 529, 615, 818, 847, 848, 896, 902, 932, 1028, 1030, 1031, 1142, 1143, 1201, 1327, 1354], "drop_dupl": [293, 328, 896, 932], "drop_empty_col": [147, 153], "drop_empty_row": [147, 153], "drop_first": [283, 328, 1303, 1327], "drop_in_plac": 328, "drop_nan": [328, 424, 818, 932, 1031, 1327], "drop_nul": [328, 423, 818, 932, 1030, 1327], "dset": 162, "dst": [452, 465, 1063, 1076], "dst_offset": [426, 1033], "dt": [1, 46, 57, 147, 153, 260, 328, 628, 763, 818, 827, 881, 932, 938, 1335, 1350, 1351], "dt1": 1350, "dt2": 1350, "dtm": [46, 328, 429, 457, 938, 1036, 1068, 1350], "dtm_iso": 457, "dtm_iso_strict": 457, "dtype": [16, 46, 56, 60, 66, 72, 76, 88, 96, 97, 107, 129, 131, 133, 135, 136, 142, 143, 144, 145, 147, 151, 152, 153, 156, 160, 169, 170, 171, 172, 176, 184, 186, 190, 193, 219, 234, 260, 284, 285, 286, 287, 290, 296, 305, 328, 385, 399, 400, 401, 402, 403, 404, 415, 416, 457, 468, 477, 490, 525, 533, 564, 566, 567, 574, 613, 620, 621, 628, 653, 655, 681, 702, 719, 723, 729, 739, 746, 765, 769, 773, 774, 776, 777, 778, 779, 780, 790, 793, 800, 809, 818, 836, 841, 858, 863, 881, 906, 932, 937, 938, 940, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 988, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1013, 1023, 1024, 1027, 1028, 1068, 1079, 1086, 1117, 1135, 1136, 1139, 1147, 1171, 1178, 1180, 1199, 1210, 1232, 1235, 1260, 1281, 1298, 1305, 1306, 1308, 1309, 1310, 1311, 1315, 1327, 1355, 1358], "dtype_format": [46, 328], "dtypekind": 186, "dtypelik": [184, 940], "dtypeoper": [1, 60], "dubiou": 100, "due": [219, 234, 260, 263, 298, 328, 339, 434, 447, 452, 465, 591, 592, 594, 596, 598, 599, 628, 631, 633, 635, 637, 639, 642, 644, 646, 744, 758, 759, 761, 762, 805, 806, 818, 836, 858, 863, 881, 932, 1041, 1058, 1063, 1076], "dummi": [283, 328, 1303, 1327], "duplic": [57, 105, 226, 233, 234, 235, 293, 297, 328, 339, 505, 591, 615, 818, 862, 863, 864, 896, 899, 932, 1116, 1201, 1327, 1356], "duplicateerror": [615, 818, 1201, 1327], "dur": [235, 328, 864, 932], "durat": [182, 234, 298, 328, 426, 434, 457, 458, 459, 460, 461, 462, 463, 464, 468, 474, 723, 758, 759, 761, 762, 805, 806, 818, 863, 932, 937, 938, 1033, 1041, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1079, 1088, 1308, 1310, 1327], "dure": [56, 104, 142, 143, 156, 182, 207, 328, 1093, 1327], "dutch": [425, 744, 1032], "dynam": [219, 328, 377, 558, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 818, 858, 932, 936, 981, 1172], "dynamicgroupbi": [219, 328], "e": [16, 41, 43, 45, 47, 48, 51, 52, 130, 139, 142, 148, 150, 154, 159, 161, 162, 174, 198, 210, 217, 221, 230, 234, 237, 279, 280, 286, 296, 328, 337, 420, 470, 474, 477, 504, 561, 567, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 584, 653, 658, 677, 698, 699, 710, 765, 780, 797, 808, 818, 845, 854, 863, 866, 879, 932, 938, 1082, 1088, 1115, 1238, 1256, 1289, 1327, 1345, 1350, 1358], "e101": [46, 328], "e_filt": [578, 580], "e_sum_ov": [578, 580], "e_sum_slic": [578, 580], "each": [43, 46, 52, 57, 66, 73, 84, 143, 144, 147, 152, 160, 165, 166, 167, 168, 170, 194, 196, 203, 210, 217, 218, 219, 232, 234, 238, 251, 253, 260, 262, 264, 285, 290, 294, 297, 298, 306, 307, 309, 311, 313, 314, 322, 328, 353, 398, 402, 403, 418, 452, 465, 483, 507, 510, 536, 539, 546, 556, 563, 567, 615, 618, 626, 627, 634, 638, 649, 654, 661, 674, 678, 679, 683, 684, 692, 694, 695, 703, 710, 725, 739, 742, 748, 773, 774, 800, 808, 818, 839, 842, 843, 849, 854, 858, 863, 877, 881, 897, 899, 908, 910, 912, 914, 915, 923, 932, 957, 1005, 1006, 1012, 1026, 1063, 1076, 1119, 1122, 1150, 1153, 1160, 1170, 1201, 1203, 1211, 1212, 1225, 1234, 1253, 1257, 1258, 1262, 1263, 1271, 1273, 1274, 1282, 1289, 1297, 1327, 1344, 1355, 1356, 1358], "eager": [219, 234, 253, 296, 328, 427, 430, 433, 435, 444, 445, 447, 448, 451, 452, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 631, 633, 635, 637, 639, 642, 644, 646, 739, 743, 758, 759, 761, 762, 769, 773, 774, 777, 790, 793, 796, 797, 800, 805, 806, 809, 817, 818, 858, 863, 868, 932, 937, 1033, 1034, 1037, 1040, 1041, 1042, 1043, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1355], "eagerli": [558, 1336], "ear": [692, 703, 1271], "earlier": [234, 328, 863, 932], "earliest": [219, 328, 450, 451, 702, 705, 760, 858, 924, 932, 1061, 1062, 1281, 1284], "easi": 182, "easiest": 187, "easili": [57, 266, 290, 302, 307, 328, 800, 814, 883, 902, 908, 932], "east": [75, 161, 235, 328, 864, 932], "ebf1d": [46, 328], "eee": [1, 46, 328, 938], "ef": 689, "effect": [46, 212, 219, 328, 434, 487, 567, 593, 595, 597, 749, 818, 858, 905, 906, 932, 1033, 1041], "effici": [130, 144, 230, 232, 328, 566, 818], "efgh": 1350, "eg": [23, 31, 46, 65, 145, 182, 285, 328, 452, 702, 705, 726, 818, 938, 1281, 1284], "egnaro": 1350, "either": [88, 172, 229, 233, 234, 235, 251, 260, 261, 285, 286, 328, 474, 566, 613, 615, 628, 702, 734, 742, 746, 800, 818, 839, 862, 863, 864, 866, 881, 932, 936, 938, 1088, 1199, 1201, 1281, 1327, 1340, 1358], "element": [19, 20, 31, 167, 168, 171, 172, 174, 176, 187, 189, 196, 229, 253, 261, 274, 276, 291, 299, 328, 345, 346, 347, 348, 349, 350, 361, 362, 397, 398, 405, 408, 409, 410, 411, 413, 414, 415, 416, 417, 423, 424, 478, 479, 483, 496, 500, 508, 519, 527, 529, 530, 531, 534, 539, 547, 548, 549, 550, 554, 560, 562, 563, 566, 567, 608, 609, 618, 621, 629, 630, 632, 634, 636, 638, 640, 641, 643, 645, 650, 655, 656, 657, 661, 662, 663, 694, 695, 706, 721, 722, 724, 725, 731, 742, 751, 777, 794, 795, 799, 807, 818, 834, 843, 890, 892, 895, 900, 932, 949, 950, 951, 952, 953, 954, 965, 966, 1000, 1010, 1013, 1016, 1017, 1018, 1019, 1021, 1022, 1023, 1024, 1025, 1030, 1031, 1091, 1092, 1097, 1098, 1109, 1112, 1120, 1129, 1131, 1133, 1134, 1141, 1143, 1144, 1145, 1148, 1153, 1161, 1162, 1163, 1164, 1176, 1177, 1180, 1196, 1203, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1227, 1235, 1236, 1237, 1241, 1242, 1273, 1274, 1285, 1299, 1300, 1301, 1305, 1312, 1313, 1317, 1327, 1344, 1345], "elementwis": [566, 608, 629, 630, 632, 634, 636, 638, 641, 643, 645, 818, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1327], "elif": 808, "elig": [868, 932], "elimin": [516, 818, 1130, 1327], "elis": [245, 328, 873, 932], "ellips": 26, "ellipsi": [217, 328], "elppa": 1350, "els": [143, 808], "email": [674, 1253], "email_part": [674, 1253], "emphas": [328, 332], "emploi": 938, "empti": [19, 41, 43, 52, 109, 132, 142, 143, 147, 153, 156, 191, 192, 219, 244, 295, 328, 664, 672, 778, 796, 837, 838, 858, 872, 898, 932, 937, 938, 1013, 1015, 1098, 1117, 1131, 1243, 1251, 1327], "en": [26, 46, 328], "enabl": [34, 35, 51, 55, 56, 96, 97, 146, 154, 157, 159, 161, 165, 166, 167, 168, 180, 184, 266, 287, 302, 328, 340, 342, 622, 623, 651, 666, 676, 678, 690, 730, 814, 818, 839, 883, 902, 932, 940, 945, 946, 1207, 1208, 1229, 1245, 1255, 1257, 1269, 1309, 1316, 1327], "enable_string_cach": 96, "enclos": [489, 818], "encod": [69, 75, 87, 139, 142, 143, 156, 283, 328, 331, 382, 489, 626, 668, 714, 818, 985, 1211, 1247, 1303, 1327, 1332], "encount": [120, 142, 143, 156, 219, 328, 600, 601, 681, 682, 749, 753, 767, 818, 858, 932, 1189, 1190, 1260, 1261, 1327], "end": [43, 46, 52, 142, 143, 156, 219, 253, 328, 381, 384, 387, 400, 404, 426, 452, 477, 552, 665, 670, 674, 679, 686, 692, 696, 697, 698, 701, 739, 744, 757, 758, 759, 760, 761, 762, 765, 773, 774, 777, 805, 806, 808, 814, 818, 858, 877, 932, 938, 987, 1002, 1007, 1033, 1063, 1127, 1166, 1249, 1253, 1258, 1265, 1271, 1275, 1276, 1277, 1282, 1327, 1350], "endian": [385, 988], "endpoint": [2, 418, 615, 777, 818, 1026, 1201, 1327], "ends_a": 1350, "ends_in_digit": 1350, "ends_with": [381, 387, 404, 665, 696, 938, 1007, 1275, 1348], "ends_with_expr": 384, "ends_with_lit": 384, "engin": [20, 44, 144, 145, 147, 153, 178, 218, 233, 238, 286, 293, 314, 328, 566, 797, 818, 839, 857, 862, 868, 872, 896, 907, 915, 929, 932, 1180, 1308, 1327, 1339, 1355], "engine_opt": [44, 147, 328], "enginetyp": [839, 932], "enough": [530, 658, 818, 1144, 1238, 1327], "ensur": [16, 46, 145, 171, 174, 184, 210, 218, 251, 253, 261, 286, 328, 504, 566, 818, 854, 857, 868, 907, 932, 936, 938, 940, 1308, 1327], "enter": 182, "entir": [46, 63, 64, 147, 153, 328, 839, 840, 932], "entri": [182, 328, 932, 937, 1355], "entropi": [818, 1327], "enumer": [75, 134, 142, 143, 147, 153, 156, 232, 328], "env": [10, 177], "env_onli": 36, "environ": [2, 7, 10, 36, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 159, 160, 161, 175, 178, 285, 328, 932], "eol_char": [142, 143, 156], "eparg": 1350, "epoch": [71, 72, 769, 1351], "epoch_": [435, 1042], "epoch_n": [435, 1042], "epochtimeunit": [435, 769, 1042], "eq": [210, 328, 472, 483, 818, 854, 932, 1084, 1327], "eq_miss": [818, 1192, 1327], "equal": [56, 97, 142, 143, 156, 165, 166, 167, 168, 219, 234, 235, 245, 274, 328, 418, 465, 471, 472, 492, 518, 558, 603, 615, 621, 629, 630, 632, 634, 636, 638, 641, 643, 645, 661, 686, 687, 690, 712, 742, 777, 794, 795, 808, 814, 818, 858, 863, 864, 873, 890, 932, 1026, 1063, 1084, 1172, 1192, 1201, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1265, 1266, 1269, 1291, 1327, 1344, 1347, 1358], "equival": [46, 129, 131, 132, 133, 135, 151, 152, 160, 219, 229, 249, 328, 337, 341, 403, 471, 472, 474, 487, 492, 494, 518, 565, 587, 589, 602, 603, 604, 607, 613, 684, 708, 710, 711, 718, 726, 733, 818, 858, 932, 1006, 1083, 1084, 1088, 1103, 1105, 1129, 1132, 1179, 1191, 1192, 1263, 1287, 1289, 1290, 1327, 1337, 1345], "err": 675, "error": [20, 45, 64, 115, 119, 121, 131, 132, 135, 142, 143, 147, 154, 156, 161, 234, 253, 261, 286, 328, 339, 364, 365, 382, 425, 533, 535, 537, 558, 591, 623, 665, 668, 673, 675, 677, 681, 682, 702, 704, 705, 709, 818, 836, 840, 863, 907, 915, 932, 968, 969, 985, 1032, 1147, 1149, 1151, 1208, 1244, 1247, 1252, 1254, 1256, 1260, 1261, 1281, 1283, 1284, 1288, 1308, 1327, 1353], "escap": [98, 142, 143, 145, 156, 671, 688, 689, 1250, 1267, 1268], "esp": 20, "especi": [170, 627, 818, 932, 1212, 1327], "espresso": 938, "est": 761, "establish": [144, 182], "estim": [142, 143, 188, 205, 328, 344, 475, 476, 516, 738, 818, 833, 932, 948, 1086, 1089, 1090, 1130, 1327], "estimated_s": [328, 1327], "etc": [27, 45, 46, 142, 146, 147, 148, 150, 157, 158, 328, 567, 818, 936, 938, 1226, 1228, 1327, 1351], "eu": [157, 158], "eur": [217, 328, 1358], "europ": [430, 434, 451, 1037, 1041, 1062], "eval": [284, 328, 566, 567, 764, 818, 1180, 1305, 1327], "evalu": [52, 53, 54, 55, 161, 208, 210, 234, 328, 341, 354, 356, 357, 389, 390, 391, 392, 394, 395, 417, 483, 501, 521, 522, 558, 607, 608, 734, 736, 739, 743, 758, 759, 761, 762, 764, 773, 774, 777, 790, 793, 796, 800, 805, 806, 808, 809, 818, 839, 854, 860, 862, 863, 932, 958, 960, 961, 992, 993, 994, 995, 997, 998, 1025, 1097, 1135, 1136, 1318, 1327, 1347], "even": [43, 52, 142, 233, 328, 474, 612, 615, 818, 862, 932, 938, 1088, 1201, 1327], "evenli": [219, 328, 777, 858, 932], "event": [64, 840, 932], "eventu": [44, 328], "ever": [608, 818], "everi": [20, 43, 52, 142, 143, 147, 153, 156, 213, 219, 282, 298, 328, 356, 357, 358, 359, 362, 364, 370, 413, 414, 415, 416, 417, 452, 465, 479, 491, 523, 524, 528, 531, 534, 535, 536, 544, 547, 552, 556, 627, 672, 753, 754, 818, 856, 858, 932, 960, 961, 962, 963, 966, 968, 974, 1021, 1022, 1023, 1024, 1025, 1063, 1076, 1092, 1102, 1137, 1138, 1142, 1145, 1148, 1149, 1150, 1158, 1161, 1166, 1170, 1212, 1251, 1327], "everybodi": [666, 690, 1245, 1269], "everyth": 938, "ew": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "ewm_mean": [818, 1327], "ewm_mean_bi": [818, 1327], "ewm_std": [818, 1327], "ewm_var": [818, 1327], "ewma": [474, 818, 1088, 1327], "exact": [167, 170, 172, 176, 234, 272, 328, 344, 487, 672, 700, 701, 702, 704, 705, 726, 818, 863, 932, 1251, 1281, 1283, 1284], "exactli": [131, 132, 135, 165, 166, 167, 168, 171, 172, 176, 328, 694, 695, 700, 701, 763, 932, 1233, 1273, 1274, 1279, 1280, 1327], "exampl": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 101, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 151, 152, 153, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 936, 937, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327, 1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357], "exc_tb": 1355, "exc_typ": 1355, "exc_val": 1355, "exce": [217, 328], "excel": [42, 46, 141, 147, 328, 830], "excelspreadsheetengin": 147, "except": [0, 199, 214, 221, 234, 237, 257, 279, 328, 623, 679, 703, 765, 818, 830, 846, 863, 879, 932, 938, 1001, 1109, 1134, 1208, 1258, 1282, 1299, 1308, 1327, 1354], "exclud": [172, 176, 219, 328, 398, 413, 416, 425, 504, 574, 725, 744, 814, 818, 858, 932, 938, 1032, 1115, 1327], "excluded_dtyp": [172, 173, 176], "exclus": [261, 328, 733, 739, 773, 774, 818], "execut": [45, 56, 65, 144, 145, 236, 275, 328, 420, 530, 730, 797, 818, 835, 839, 845, 868, 877, 891, 907, 932, 936, 1144, 1316, 1327, 1337, 1338, 1339, 1341, 1355, 1357], "execute_glob": 1355, "execute_opt": [144, 145], "exist": [1, 44, 45, 46, 57, 75, 105, 146, 154, 157, 161, 172, 199, 214, 253, 257, 292, 297, 302, 303, 328, 339, 381, 384, 387, 429, 451, 688, 689, 747, 818, 842, 846, 849, 879, 882, 899, 901, 902, 903, 932, 938, 1036, 1062, 1267, 1268, 1357], "existing_t": 1357, "existing_table_path": [45, 328], "exit": [56, 96, 182, 1342, 1355], "exp": [473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327, 1348], "exp_a": 1349, "expand": [142, 154, 156, 161, 479, 572, 576, 621, 716, 818, 936, 938, 1092, 1327], "expand_selector": 938, "expans": 713, "expect": [7, 43, 45, 47, 51, 52, 53, 54, 55, 73, 75, 79, 110, 118, 126, 142, 144, 146, 152, 154, 156, 157, 159, 160, 161, 166, 168, 328, 558, 567, 778, 818, 866, 868, 932], "expens": [142, 143, 152, 154, 156, 160, 161, 175, 177, 231, 238, 261, 262, 263, 292, 293, 328, 567, 818, 842, 844, 849, 882, 896, 901, 932, 1093, 1180, 1327, 1358], "experiment": [235, 290, 328, 777, 864, 902, 932], "expiri": [7, 43, 45, 47, 51, 52, 53, 54, 55, 146, 152, 154, 156, 157, 159, 160, 161, 328, 932], "explain": [63, 64, 187, 236, 328, 839, 840, 932, 1354], "explainformat": [850, 932], "explicit": [46, 104, 144, 156, 170, 275, 297, 328, 457, 792, 891, 899, 932, 1068], "explicitli": [75, 104, 145, 170, 172, 182, 214, 233, 328, 622, 800, 818, 829, 862, 932, 1355], "explod": [328, 398, 485, 608, 624, 725, 818, 932, 936, 1209, 1327, 1345], "explor": [197, 328, 844, 932], "expon": [613, 818, 1199, 1327, 1349], "exponenti": [473, 474, 475, 476, 478, 613, 818, 1087, 1088, 1089, 1090, 1091, 1327, 1349], "export": [46, 47, 48, 185, 231, 232, 262, 263, 280, 282, 285, 328, 814, 938, 941, 1302, 1327], "expos": 830, "expr": [1, 57, 58, 59, 60, 61, 206, 208, 209, 233, 234, 235, 249, 253, 261, 266, 267, 285, 290, 302, 303, 328, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 813, 814, 818, 819, 820, 823, 824, 825, 826, 827, 851, 852, 853, 862, 863, 864, 878, 883, 884, 902, 903, 932, 936, 938, 1025, 1058, 1083, 1084, 1088, 1095, 1096, 1101, 1103, 1105, 1132, 1144, 1150, 1166, 1170, 1179, 1191, 1192, 1244, 1249, 1256, 1275, 1327, 1353], "expr1": [1347, 1355], "expr2": [1347, 1355], "expr_unique_subset": [249, 328], "express": [0, 14, 52, 53, 54, 55, 63, 64, 169, 172, 176, 189, 206, 208, 210, 218, 224, 233, 234, 238, 249, 253, 261, 266, 267, 271, 274, 285, 290, 291, 302, 303, 305, 307, 314, 328, 337, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 353, 354, 358, 359, 360, 361, 362, 365, 376, 381, 382, 383, 384, 385, 386, 387, 398, 400, 402, 403, 404, 407, 408, 409, 410, 411, 417, 418, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 477, 479, 480, 482, 483, 487, 489, 490, 492, 493, 494, 495, 501, 504, 505, 506, 507, 508, 509, 510, 518, 519, 523, 524, 526, 527, 530, 531, 537, 539, 557, 558, 564, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 585, 587, 589, 591, 592, 594, 596, 598, 599, 602, 603, 605, 607, 608, 612, 613, 614, 615, 617, 621, 622, 623, 624, 626, 627, 649, 650, 651, 654, 656, 657, 659, 661, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 688, 689, 690, 692, 693, 694, 695, 703, 707, 717, 718, 721, 722, 725, 726, 727, 729, 730, 732, 733, 734, 735, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 787, 790, 792, 793, 794, 795, 796, 798, 800, 802, 804, 805, 806, 808, 809, 814, 817, 830, 834, 839, 840, 850, 851, 854, 857, 862, 863, 877, 883, 884, 887, 888, 890, 895, 902, 903, 904, 906, 908, 915, 932, 936, 938, 965, 1014, 1025, 1032, 1036, 1068, 1083, 1084, 1088, 1094, 1103, 1105, 1115, 1132, 1141, 1144, 1179, 1180, 1191, 1192, 1207, 1208, 1227, 1231, 1244, 1245, 1246, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1267, 1268, 1269, 1282, 1286, 1327, 1345, 1347, 1349, 1350, 1354], "exprmetanamespac": [571, 577], "ext": 144, "extend": [0, 132, 300, 328, 480, 818, 830, 936, 947, 1094, 1327], "extend_const": [818, 1327], "extens": [287, 328, 1309, 1327], "extern": [904, 932], "extra": [45, 142, 143, 146, 148, 150, 154, 156, 157, 158, 161, 207, 219, 328, 818, 858, 932, 936, 1093, 1327], "extract": [136, 187, 275, 328, 428, 431, 433, 436, 438, 439, 440, 441, 442, 443, 446, 448, 449, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 612, 674, 675, 676, 681, 682, 692, 694, 818, 1035, 1038, 1039, 1040, 1043, 1045, 1049, 1050, 1051, 1053, 1054, 1057, 1059, 1060, 1064, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1080, 1253, 1254, 1255, 1260, 1261, 1271, 1348], "extract_mani": [678, 1257], "extract_numb": [612, 818], "extracted_nr": 674, "extrem": [480, 629, 818, 1094, 1213, 1327], "extrema": [653, 818, 1232, 1327], "f": [58, 143, 144, 210, 217, 232, 280, 286, 292, 296, 328, 337, 377, 386, 558, 653, 672, 702, 705, 747, 818, 854, 932, 938, 981, 1172, 1251, 1281, 1284, 1327, 1332, 1345], "f32": [1, 60, 190, 275, 284, 290, 328, 653, 797, 818, 836, 891, 932, 938, 1178, 1327, 1353], "f4": [286, 328], "f5ed2452": [46, 328], "f64": [13, 15, 16, 17, 21, 24, 25, 27, 28, 29, 30, 31, 33, 57, 59, 61, 65, 84, 130, 132, 151, 162, 169, 172, 190, 191, 192, 195, 197, 198, 199, 201, 203, 208, 209, 212, 216, 217, 218, 219, 224, 225, 233, 234, 240, 241, 242, 243, 247, 253, 254, 255, 273, 274, 276, 278, 290, 299, 302, 307, 310, 312, 315, 316, 317, 318, 320, 321, 328, 336, 339, 345, 346, 347, 348, 349, 350, 368, 374, 379, 386, 399, 405, 406, 408, 409, 410, 418, 419, 423, 424, 453, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 486, 487, 492, 494, 502, 503, 511, 512, 513, 514, 516, 518, 530, 541, 542, 554, 560, 561, 562, 563, 565, 568, 569, 570, 586, 589, 591, 600, 601, 602, 603, 609, 613, 615, 616, 617, 618, 622, 623, 629, 630, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 655, 656, 657, 658, 662, 663, 717, 721, 722, 726, 731, 740, 741, 745, 747, 749, 751, 764, 765, 777, 780, 783, 784, 785, 797, 799, 807, 814, 818, 836, 837, 844, 846, 847, 852, 853, 857, 858, 861, 862, 863, 870, 871, 878, 890, 892, 900, 902, 904, 908, 911, 913, 916, 917, 918, 919, 921, 922, 932, 938, 949, 950, 951, 952, 953, 954, 972, 978, 983, 989, 1010, 1011, 1016, 1017, 1018, 1026, 1027, 1030, 1031, 1064, 1087, 1088, 1089, 1090, 1091, 1095, 1100, 1110, 1113, 1114, 1144, 1155, 1156, 1168, 1174, 1175, 1176, 1177, 1196, 1199, 1201, 1203, 1208, 1213, 1215, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1235, 1236, 1237, 1241, 1300, 1301, 1315, 1327, 1336, 1344, 1345, 1349, 1352, 1355, 1358], "f_string": 768, "fa1e": [707, 1286], "face": [7, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 159, 160, 161, 328, 932], "facil": 144, "facilit": [193, 328], "factor": [473, 475, 476, 723, 818, 1087, 1089, 1090, 1310, 1327], "fail": [7, 43, 44, 45, 47, 51, 52, 53, 54, 55, 130, 146, 148, 152, 154, 156, 157, 159, 160, 161, 186, 286, 293, 328, 354, 455, 558, 702, 704, 705, 709, 818, 896, 932, 1180, 1281, 1283, 1284, 1288, 1308, 1327, 1353], "fall": [161, 418, 615, 818, 839, 907, 932, 1026, 1201, 1327, 1344], "fallback": 147, "fals": [11, 13, 14, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 39, 43, 45, 46, 51, 52, 53, 54, 55, 57, 63, 64, 65, 130, 131, 132, 134, 135, 136, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 156, 157, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 186, 189, 190, 191, 192, 197, 204, 212, 216, 217, 218, 219, 223, 224, 226, 227, 228, 231, 233, 234, 236, 241, 242, 248, 249, 251, 253, 254, 261, 262, 263, 264, 266, 269, 272, 274, 275, 278, 281, 283, 286, 287, 291, 292, 293, 297, 298, 300, 302, 310, 312, 315, 316, 318, 321, 328, 340, 341, 342, 353, 356, 357, 360, 364, 365, 373, 378, 381, 384, 387, 398, 399, 400, 404, 412, 413, 414, 415, 416, 417, 418, 425, 437, 453, 470, 471, 472, 473, 475, 476, 494, 495, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 526, 530, 533, 535, 537, 546, 553, 558, 559, 565, 566, 567, 571, 573, 574, 575, 577, 579, 582, 583, 602, 603, 605, 607, 608, 610, 611, 615, 618, 629, 630, 632, 634, 636, 638, 640, 641, 643, 645, 649, 651, 653, 658, 660, 661, 664, 665, 666, 667, 670, 676, 677, 678, 680, 681, 688, 689, 690, 693, 694, 696, 702, 704, 705, 707, 725, 727, 730, 733, 734, 735, 736, 737, 739, 742, 743, 744, 748, 749, 752, 753, 758, 759, 761, 762, 773, 774, 777, 778, 784, 790, 793, 796, 797, 800, 802, 805, 806, 808, 809, 818, 834, 836, 837, 838, 839, 840, 844, 850, 857, 858, 862, 863, 866, 868, 877, 883, 886, 888, 890, 891, 895, 896, 899, 902, 907, 911, 913, 916, 917, 919, 922, 932, 936, 937, 938, 945, 946, 957, 960, 961, 964, 968, 969, 977, 982, 984, 985, 987, 990, 1001, 1002, 1004, 1007, 1009, 1012, 1013, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1032, 1044, 1064, 1084, 1085, 1087, 1089, 1090, 1097, 1099, 1104, 1106, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1135, 1136, 1140, 1144, 1147, 1149, 1151, 1160, 1167, 1173, 1186, 1192, 1194, 1197, 1198, 1201, 1203, 1204, 1205, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1229, 1233, 1238, 1240, 1243, 1244, 1245, 1246, 1249, 1255, 1256, 1257, 1259, 1260, 1267, 1268, 1269, 1272, 1273, 1275, 1281, 1283, 1284, 1286, 1303, 1308, 1309, 1313, 1316, 1318, 1327, 1337, 1339, 1345, 1350, 1355], "far": [46, 328], "fashion": [233, 328, 850, 877, 888, 932], "fast": [51, 53, 55, 175, 177, 328, 480, 651, 818, 932, 936, 1094, 1229, 1327, 1358], "fast_executemani": [44, 328], "faster": [52, 53, 54, 55, 63, 64, 144, 147, 207, 286, 296, 328, 567, 728, 818, 839, 840, 850, 877, 888, 932, 1093, 1180, 1327], "fastexcel": [147, 164], "favor": [44, 328], "fay": 139, "feat1": [285, 290, 328], "feat2": [285, 290, 328], "feather": [47, 148, 159, 328, 830], "featur": [1, 51, 62, 73, 75, 79, 285, 290, 328], "feature_0": [904, 932], "feature_0_train": [904, 932], "feature_1": [904, 932], "feature_nam": [290, 328], "feb": [164, 1350], "februari": 1350, "fed": 698, "feel": [666, 690, 1245, 1269], "fetch": [138, 839, 932], "fetch_california_h": [290, 328], "few": [217, 328], "fewer": [679, 703, 932, 1258, 1282], "ff": 1344, "ff00": [707, 1286], "fff": 1, "ffff00": [382, 383, 668, 985, 986, 1247], "ffffff": [46, 328], "ffi": [205, 328, 1086, 1327], "fgg": 938, "fghi": 1350, "fh": 143, "fiction": 1336, "field": [42, 43, 45, 52, 88, 122, 125, 132, 294, 328, 377, 558, 566, 567, 593, 595, 597, 626, 674, 675, 681, 694, 695, 715, 716, 717, 723, 730, 753, 754, 779, 800, 818, 897, 932, 981, 1172, 1180, 1211, 1254, 1273, 1274, 1295, 1297, 1310, 1327, 1351], "field_0": [377, 558, 981, 1172], "field_1": [377, 558, 981, 1172], "field_2": [981, 1172], "field_n": [377, 558, 981, 1172], "field_nam": [567, 818, 1180, 1327], "fiftyf": [500, 818], "figsiz": [582, 877, 888, 932], "figur": [582, 648, 818, 888, 932, 1224, 1327], "file": [8, 9, 11, 12, 38, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 198, 207, 268, 328, 420, 489, 581, 585, 818, 845, 885, 932, 936, 1093, 1327], "file_cache_ttl": [152, 156, 159, 160], "filenam": 148, "filesourc": [147, 153, 154, 161], "filesystem": [45, 146, 157, 158, 328], "fill": [57, 65, 191, 208, 209, 271, 296, 328, 332, 380, 413, 416, 481, 482, 488, 502, 503, 630, 632, 634, 636, 638, 641, 643, 645, 652, 768, 790, 793, 809, 818, 852, 853, 887, 904, 932, 1095, 1096, 1113, 1114, 1193, 1214, 1215, 1217, 1220, 1221, 1222, 1231, 1327], "fill_char": [686, 687, 1265, 1266], "fill_nan": [209, 328, 482, 818, 853, 932, 1096, 1327], "fill_nul": [57, 208, 328, 481, 818, 852, 904, 932, 1095, 1327], "fill_valu": [271, 296, 328, 652, 818, 887, 932, 1231, 1327], "fillnullstrategi": [209, 328, 482, 818, 853, 932, 1096, 1327], "film": 1336, "filter": [1, 52, 53, 54, 55, 58, 63, 64, 156, 157, 161, 162, 201, 202, 226, 227, 228, 253, 314, 328, 400, 404, 578, 580, 670, 696, 732, 757, 760, 767, 796, 797, 808, 818, 839, 840, 847, 848, 850, 860, 877, 888, 891, 915, 932, 938, 1228, 1327, 1343], "final": [19, 46, 57, 161, 234, 236, 328, 473, 475, 476, 818, 844, 863, 932, 936, 1087, 1089, 1090, 1327, 1356], "find": [65, 215, 328, 500, 650, 665, 666, 678, 818, 1112, 1227, 1245, 1257, 1267, 1327], "find_pat": 677, "fine": [839, 929, 932], "finish": [207, 328, 1093, 1327], "finit": [506, 726, 749, 818, 1118, 1327], "first": [51, 57, 142, 143, 147, 148, 150, 153, 154, 156, 161, 165, 166, 167, 168, 187, 217, 219, 221, 233, 234, 237, 238, 248, 252, 253, 260, 279, 283, 284, 292, 293, 298, 305, 311, 328, 353, 355, 364, 417, 421, 445, 447, 452, 468, 487, 497, 500, 507, 520, 528, 530, 535, 536, 558, 566, 567, 579, 588, 612, 613, 628, 650, 661, 665, 672, 673, 677, 679, 681, 682, 688, 689, 703, 710, 745, 746, 753, 767, 771, 808, 814, 818, 858, 859, 862, 863, 867, 876, 881, 896, 904, 906, 912, 932, 938, 957, 968, 1025, 1027, 1028, 1056, 1058, 1063, 1079, 1109, 1112, 1119, 1134, 1142, 1144, 1149, 1150, 1172, 1180, 1227, 1240, 1251, 1252, 1254, 1256, 1258, 1260, 1261, 1267, 1268, 1282, 1289, 1299, 1303, 1305, 1308, 1327, 1347, 1348, 1350, 1356, 1358], "first_column": [46, 328], "first_non_nul": [558, 1172], "first_part": [694, 695, 1273, 1274], "fisher": [516, 658, 818, 1130, 1238, 1327], "fit": [139, 231, 272, 296, 328, 653, 793, 818, 1232, 1233, 1327], "five": [289, 328, 1358], "fix": [16, 66, 75, 170, 468, 763, 1079], "flag": [62, 146, 157, 169, 286, 328, 651, 665, 673, 674, 677, 688, 689, 818, 850, 868, 932, 938, 1229, 1244, 1252, 1253, 1256, 1267, 1268, 1308, 1327, 1350], "flat": [139, 263, 328, 531, 624, 818, 1145, 1209, 1327], "flatten": 818, "flavour": [46, 144, 328], "flight": 144, "flight_sql": 144, "flightsql": 144, "float": [16, 17, 43, 46, 52, 77, 78, 142, 143, 156, 162, 165, 166, 167, 168, 169, 172, 176, 186, 197, 201, 205, 208, 234, 255, 264, 285, 286, 320, 328, 360, 406, 418, 423, 424, 453, 470, 471, 472, 473, 475, 476, 481, 486, 487, 492, 494, 502, 506, 509, 511, 512, 513, 514, 518, 526, 546, 561, 565, 568, 582, 586, 600, 601, 602, 603, 613, 615, 616, 629, 630, 632, 634, 636, 638, 639, 641, 643, 645, 647, 649, 655, 726, 791, 793, 818, 844, 847, 852, 863, 878, 888, 921, 932, 938, 964, 1001, 1011, 1026, 1027, 1029, 1030, 1031, 1064, 1082, 1086, 1087, 1089, 1090, 1095, 1100, 1110, 1130, 1140, 1160, 1175, 1189, 1190, 1199, 1200, 1201, 1202, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1225, 1228, 1235, 1238, 1242, 1298, 1308, 1317, 1327, 1355, 1358], "float16": [290, 328], "float32": [1, 16, 43, 52, 60, 190, 212, 284, 285, 286, 290, 328, 474, 818, 836, 932, 938, 1088, 1117, 1178, 1306, 1308, 1311, 1327], "float4": [275, 328, 797, 891, 932, 1353], "float64": [16, 43, 46, 52, 132, 142, 151, 169, 172, 193, 203, 205, 212, 265, 290, 302, 328, 345, 346, 347, 348, 349, 350, 386, 399, 408, 409, 410, 419, 453, 474, 477, 511, 512, 617, 656, 657, 721, 722, 765, 780, 790, 793, 809, 814, 818, 841, 849, 882, 902, 932, 937, 938, 1064, 1088, 1309, 1315, 1327], "float_list": 84, "float_precis": [15, 16, 33, 43, 46, 52, 328, 932], "float_scientif": [43, 52, 328, 932], "floatfmt": 17, "floor": [59, 487, 818, 1327, 1348], "floor_a": 1349, "floordiv": [726, 818], "fmt": [17, 234, 328, 501, 768, 818, 860, 863, 932], "fmt_number": [328, 332], "fmt_str_length": [18, 758, 759, 761, 762], "fmt_table_cell_list_len": 19, "fmt_titl": [46, 328], "fn": [753, 754, 767, 792], "foggi": [688, 689, 1267, 1268], "fold": [328, 579, 745, 753, 754, 792], "folder": 162, "follow": [46, 51, 62, 142, 143, 144, 146, 147, 153, 156, 157, 158, 219, 234, 238, 252, 260, 286, 298, 328, 447, 452, 465, 474, 566, 612, 613, 618, 628, 631, 633, 635, 637, 639, 640, 642, 644, 646, 655, 715, 726, 741, 758, 759, 761, 762, 780, 805, 806, 808, 810, 811, 813, 818, 819, 820, 823, 825, 826, 827, 858, 863, 876, 881, 932, 938, 1058, 1063, 1076, 1088, 1199, 1203, 1226, 1228, 1235, 1308, 1319, 1321, 1323, 1327, 1328, 1333, 1334, 1335, 1353, 1358], "font": [46, 328], "font_color": [46, 328], "font_siz": [46, 328], "foo": [41, 43, 45, 47, 48, 49, 50, 51, 139, 151, 152, 190, 193, 194, 195, 199, 200, 201, 202, 203, 204, 207, 210, 212, 214, 215, 216, 220, 221, 222, 223, 224, 225, 227, 233, 237, 238, 239, 240, 241, 242, 243, 246, 247, 250, 253, 255, 257, 258, 261, 264, 265, 266, 268, 270, 273, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 292, 293, 294, 299, 300, 301, 306, 328, 401, 418, 420, 447, 491, 497, 501, 520, 571, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 615, 624, 664, 667, 669, 672, 674, 675, 680, 691, 693, 695, 697, 698, 699, 700, 701, 708, 711, 720, 738, 749, 750, 751, 766, 770, 771, 772, 775, 776, 781, 783, 785, 786, 788, 789, 791, 796, 799, 803, 807, 808, 814, 818, 836, 841, 842, 846, 847, 848, 849, 854, 860, 861, 862, 875, 879, 882, 883, 896, 897, 901, 904, 932, 937, 938, 1003, 1026, 1058, 1151, 1199, 1201, 1209, 1246, 1248, 1251, 1253, 1254, 1270, 1274, 1279, 1280, 1287, 1290, 1327, 1341, 1343, 1344, 1345, 1347, 1350, 1353], "foo1": 1350, "foo11": [212, 328], "foo_": [576, 693, 768], "foo_1": [283, 328], "foo_2": [283, 328], "foo_3_4": 1350, "foo_a": [253, 328], "foo_a_bar_1": 768, "foo_at_1": 1345, "foo_b": [253, 328], "foo_b_bar_2": 768, "foo_bar": [571, 577, 693, 778, 1341], "foo_bar2": [571, 577], "foo_bar_baz": 693, "foo_c_bar_3": 768, "foo_low": [708, 1350], "foo_mean": 1345, "foo_q25": 1344, "foo_q50": 1344, "foo_q75": 1344, "foo_std": 1344, "foo_strip": 697, "foo_strip_end": 698, "foo_strip_start": 699, "foo_sum": [1344, 1345], "foo_uniqu": 1345, "foo_upp": [711, 1350], "foo_var": 1344, "foobar": [700, 701, 1279, 1280, 1350], "foobarbar": [701, 1280], "foofoobar": [700, 1279], "foral": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "forc": [234, 238, 286, 314, 328, 558, 862, 863, 915, 932, 1180, 1308, 1327], "force_parallel": [234, 328, 862, 863, 932], "form": [43, 52, 129, 131, 132, 133, 135, 151, 152, 160, 231, 262, 296, 328, 457, 609, 685, 710, 818, 932, 1068, 1196, 1264, 1289, 1327, 1350], "format": [13, 17, 21, 22, 26, 42, 43, 46, 47, 48, 51, 52, 100, 140, 142, 143, 144, 147, 148, 150, 153, 156, 162, 185, 198, 206, 217, 231, 244, 253, 262, 263, 268, 282, 295, 326, 328, 332, 420, 452, 454, 457, 581, 582, 583, 702, 704, 705, 709, 763, 818, 845, 850, 851, 872, 885, 898, 932, 941, 1065, 1068, 1281, 1283, 1284, 1288, 1326, 1350, 1351], "formul": [201, 328, 847, 848, 932], "formula": [46, 328, 470, 818, 1082, 1327], "fortran": [285, 286, 328], "forward": [209, 234, 271, 328, 372, 425, 444, 482, 488, 551, 652, 818, 853, 863, 887, 932, 976, 1032, 1055, 1096, 1165, 1231, 1327], "forward_fil": [298, 328, 380, 413, 416, 652, 818], "found": [26, 43, 46, 52, 101, 122, 125, 132, 136, 147, 154, 161, 203, 275, 328, 500, 650, 677, 682, 700, 701, 702, 705, 818, 891, 932, 1112, 1227, 1256, 1261, 1279, 1280, 1281, 1284, 1327, 1339, 1355], "four": [289, 328, 1355], "fourth": [516, 818, 1130, 1327], "frac": [473, 474, 475, 476, 658, 818, 1087, 1088, 1089, 1090, 1238, 1327], "fraction": [43, 52, 165, 166, 167, 168, 264, 328, 453, 546, 609, 649, 702, 705, 818, 932, 1064, 1160, 1196, 1225, 1281, 1284, 1327], "fragment": 1355, "frame": [43, 44, 46, 52, 57, 64, 65, 132, 143, 147, 153, 165, 166, 190, 191, 197, 231, 232, 236, 238, 245, 249, 252, 261, 262, 263, 275, 290, 296, 297, 328, 457, 797, 836, 837, 844, 873, 876, 891, 899, 932, 938, 1013, 1068, 1327, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1354, 1358], "frame_data": [1338, 1341], "frameinittyp": [328, 932], "frametyp": [57, 1355], "framework": [253, 295, 328, 898, 932], "freedom": [276, 299, 328, 554, 560, 641, 642, 645, 646, 663, 731, 751, 794, 795, 799, 807, 818, 892, 900, 932, 1220, 1222, 1242, 1317, 1327], "freeli": [797, 891, 932, 938], "freez": [46, 328], "freeze_pan": [46, 328], "frequenc": [298, 328, 730, 818, 1316, 1327], "frequent": [1226, 1228, 1327], "fri": [328, 331], "fridai": [219, 328, 425, 454, 744, 858, 932, 1032, 1065, 1068], "friendship": 18, "from": [2, 7, 8, 9, 10, 11, 12, 16, 22, 34, 38, 42, 43, 45, 46, 47, 51, 52, 53, 54, 55, 57, 65, 75, 88, 100, 104, 120, 124, 129, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 187, 190, 197, 198, 199, 205, 207, 210, 211, 217, 219, 231, 232, 233, 234, 235, 236, 244, 253, 257, 260, 261, 263, 264, 266, 267, 275, 283, 290, 292, 293, 295, 296, 297, 298, 304, 328, 331, 332, 377, 386, 418, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 477, 487, 489, 502, 516, 534, 546, 558, 567, 575, 600, 601, 603, 608, 609, 612, 615, 617, 628, 629, 631, 633, 635, 637, 639, 642, 644, 646, 649, 661, 673, 674, 679, 681, 682, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 709, 728, 740, 741, 744, 745, 757, 758, 759, 760, 761, 762, 763, 777, 778, 793, 797, 804, 805, 806, 814, 817, 818, 836, 844, 845, 846, 854, 858, 862, 863, 864, 872, 879, 881, 883, 884, 891, 896, 898, 899, 904, 905, 932, 937, 938, 981, 989, 1026, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1086, 1088, 1093, 1130, 1148, 1160, 1172, 1189, 1190, 1192, 1193, 1196, 1201, 1213, 1225, 1252, 1253, 1258, 1260, 1271, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1288, 1303, 1318, 1327, 1336, 1337, 1338, 1339, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358], "from_arrai": 797, "from_arrow": 130, "from_json": 818, "from_panda": 130, "from_repr": [284, 328, 1305, 1327], "fromkei": [58, 60], "front": [219, 328, 858, 932], "fruit": [281, 328, 400, 404, 625, 670, 696, 703, 818, 1002, 1007, 1249, 1275, 1282], "fruits_revers": [625, 818], "fsspec": [142, 143, 148, 150, 157, 158, 164], "fsspecfileio": 158, "full": [17, 51, 55, 57, 65, 72, 100, 132, 135, 142, 143, 144, 146, 151, 152, 154, 156, 157, 158, 160, 161, 162, 233, 297, 328, 679, 681, 688, 689, 702, 703, 704, 705, 709, 758, 759, 862, 868, 899, 932, 938, 1258, 1260, 1267, 1268, 1281, 1282, 1283, 1284, 1288, 1327, 1343, 1358], "full_sent": 748, "fulli": [174, 252, 264, 286, 328], "funcnam": [46, 328], "function": [0, 2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 73, 75, 79, 96, 97, 127, 130, 134, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 182, 184, 186, 189, 195, 198, 205, 212, 235, 238, 244, 252, 253, 257, 275, 285, 286, 287, 290, 291, 292, 295, 297, 314, 328, 331, 332, 340, 377, 397, 398, 417, 418, 420, 473, 475, 476, 498, 558, 566, 567, 592, 593, 608, 612, 615, 627, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 655, 658, 678, 723, 724, 725, 734, 738, 746, 750, 752, 753, 754, 766, 767, 769, 771, 772, 775, 777, 779, 780, 783, 785, 788, 790, 792, 799, 803, 807, 809, 814, 818, 830, 834, 840, 845, 864, 868, 872, 876, 879, 891, 895, 898, 899, 906, 915, 932, 936, 940, 981, 1000, 1009, 1025, 1026, 1086, 1087, 1089, 1090, 1110, 1172, 1180, 1201, 1212, 1213, 1216, 1218, 1219, 1226, 1228, 1233, 1235, 1238, 1257, 1306, 1309, 1311, 1312, 1327, 1332, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1353, 1354, 1355, 1356, 1357, 1358], "function_nam": 936, "further": 814, "futur": [64, 186, 197, 233, 234, 269, 328, 840, 844, 862, 863, 886, 932], "g": [43, 52, 139, 142, 146, 148, 150, 157, 162, 174, 186, 198, 230, 286, 296, 328, 337, 420, 474, 477, 567, 653, 765, 818, 845, 879, 932, 1088, 1327, 1358], "g1": [483, 732, 818], "g2": [483, 732, 818], "g_1": [658, 818, 1238, 1327], "gag": 32, "gamma": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "gantt": [877, 932], "gather": [143, 213, 328, 353, 491, 534, 742, 818, 856, 932, 957, 1102, 1148, 1327], "gather_everi": [328, 818, 932, 1327], "gb": [205, 328, 386, 1086, 1327], "gbp": 1358, "gc": [45, 146, 157, 158, 328], "gca": 32, "gcaacgcatata": 32, "gcp": [7, 40, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 158, 159, 160, 161, 328, 932], "gdp": [234, 328, 863, 932], "gdp2": [234, 328, 863, 932], "gdp_date": [234, 328, 863, 932], "ge": [818, 1327], "gener": [1, 139, 144, 145, 163, 169, 170, 171, 172, 173, 174, 176, 186, 193, 195, 253, 264, 283, 286, 292, 328, 546, 649, 654, 739, 758, 761, 773, 774, 776, 777, 793, 805, 806, 818, 932, 1001, 1160, 1225, 1234, 1303, 1327, 1358], "geq": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "germani": [234, 328, 863, 932], "get": [57, 64, 75, 149, 155, 162, 187, 189, 193, 194, 203, 211, 214, 216, 219, 221, 222, 226, 228, 229, 237, 240, 247, 248, 253, 260, 261, 265, 270, 273, 279, 287, 291, 301, 311, 322, 328, 338, 351, 352, 353, 355, 363, 366, 378, 386, 398, 401, 413, 414, 415, 416, 425, 435, 484, 490, 497, 500, 515, 517, 520, 532, 538, 559, 568, 569, 570, 578, 580, 586, 600, 601, 610, 611, 616, 627, 628, 659, 663, 672, 719, 720, 724, 725, 727, 731, 742, 744, 766, 771, 775, 780, 781, 782, 783, 785, 786, 787, 789, 799, 803, 807, 818, 834, 839, 840, 842, 849, 855, 858, 859, 865, 867, 881, 882, 889, 894, 895, 901, 912, 923, 932, 936, 937, 942, 955, 956, 957, 958, 959, 967, 970, 982, 989, 1003, 1012, 1021, 1022, 1023, 1024, 1032, 1042, 1081, 1098, 1099, 1104, 1109, 1112, 1115, 1116, 1128, 1131, 1134, 1146, 1152, 1173, 1181, 1183, 1184, 1186, 1188, 1189, 1190, 1197, 1198, 1202, 1212, 1239, 1242, 1251, 1299, 1303, 1309, 1313, 1317, 1327], "get_chunk": 1327, "get_column": [186, 288, 328], "get_column_index": 328, "get_token": 39, "get_worksheet_by_nam": [46, 328], "gevent": [64, 164, 840, 932], "gh": 689, "gh45": 689, "gh45ij67kl": 689, "ghi": [337, 674, 818, 938, 1253], "gil": [567, 818], "git": 62, "github": [145, 328], "give": [152, 159, 160, 234, 244, 293, 295, 328, 435, 487, 516, 621, 726, 730, 818, 830, 863, 872, 896, 898, 932, 1042, 1130, 1316, 1327, 1354], "given": [46, 57, 106, 111, 128, 129, 131, 132, 133, 135, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 154, 156, 159, 160, 161, 167, 168, 169, 170, 172, 174, 175, 176, 177, 184, 205, 206, 208, 219, 229, 238, 251, 252, 261, 262, 263, 271, 274, 290, 297, 328, 360, 372, 377, 386, 398, 407, 426, 430, 454, 456, 457, 470, 474, 498, 504, 526, 551, 558, 561, 567, 608, 612, 618, 621, 622, 624, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 652, 674, 675, 686, 687, 702, 705, 712, 715, 725, 765, 766, 775, 779, 780, 793, 794, 795, 818, 851, 858, 868, 876, 887, 890, 899, 915, 932, 937, 938, 940, 964, 976, 981, 989, 1014, 1033, 1037, 1065, 1067, 1068, 1082, 1086, 1088, 1110, 1115, 1129, 1140, 1165, 1172, 1175, 1178, 1180, 1193, 1199, 1203, 1209, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1227, 1231, 1253, 1254, 1265, 1266, 1281, 1284, 1291, 1315, 1318, 1327, 1336, 1338, 1343, 1345, 1346, 1349, 1350, 1355, 1357, 1358], "glimps": [197, 221, 328], "glob": [142, 143, 147, 154, 156, 159, 160, 161], "global": [56, 96, 97, 147, 163, 172, 180, 275, 328, 622, 623, 797, 818, 891, 932, 1004, 1008, 1207, 1208, 1327, 1337, 1339, 1354], "gmt": [430, 434, 451, 1037, 1041, 1062], "go": [18, 142, 143, 156, 400, 670, 1002, 1249], "godfath": 1336, "goe": 18, "gonfruit": 1282, "good": [51, 53, 55, 231, 328, 932, 1349], "goodby": 1, "googl": [40, 146, 157, 158], "gpu": [285, 328, 839, 907, 929, 932, 1306, 1327], "gpu_devic": [285, 328], "gpudevic": [285, 328], "gpuengin": [839, 932], "grade": [1130, 1327], "grain": [839, 929, 932], "granular": 1355, "grape": 1350, "graph": [63, 144, 236, 328, 582, 839, 860, 904, 932], "graphviz": [236, 328, 582, 888, 932], "great": [328, 332], "great_tabl": [328, 332], "greater": [191, 234, 328, 492, 494, 504, 658, 686, 687, 695, 712, 818, 863, 932, 1115, 1238, 1265, 1266, 1274, 1291, 1327], "greatest": [1344, 1348], "greatli": [148, 159], "green": [56, 96, 97, 314, 730, 818, 915, 1316, 1327], "greenlet": [64, 840, 932], "greet": 1, "grid": [502, 818], "grid_point": [502, 818], "gridlin": [46, 328], "gross": 1336, "group": [15, 33, 51, 55, 143, 161, 190, 218, 219, 232, 234, 249, 251, 253, 260, 263, 296, 298, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 338, 398, 417, 479, 485, 490, 493, 530, 566, 567, 578, 580, 608, 618, 627, 628, 660, 661, 665, 673, 674, 675, 677, 688, 689, 725, 730, 780, 818, 836, 857, 858, 863, 881, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 936, 938, 1025, 1144, 1212, 1244, 1252, 1253, 1254, 1256, 1267, 1268, 1316, 1327, 1336, 1344, 1354, 1355], "group_bi": [219, 249, 253, 260, 298, 327, 328, 338, 388, 393, 396, 398, 483, 485, 490, 493, 566, 567, 608, 660, 661, 725, 732, 758, 761, 780, 818, 839, 840, 850, 858, 877, 881, 888, 930, 932, 938], "group_by_dynam": [260, 328, 881, 932], "group_by_partit": [877, 932], "group_col": [483, 732, 818], "group_df": [314, 915], "group_dtyp": [608, 818], "group_index": [673, 1252], "group_to_row": [608, 818], "groupbi": [218, 328, 567, 780, 818], "grouper": [388, 393, 396, 818], "grow": [300, 328], "grown": [223, 328], "gt": [328, 332, 818, 1327], "gte": [483, 732, 818], "guarante": [51, 55, 142, 143, 189, 197, 220, 291, 293, 328, 397, 398, 496, 723, 724, 725, 818, 834, 844, 895, 896, 932, 1000, 1108, 1310, 1312, 1327], "guid": [818, 936, 1358], "gzip": [51, 55, 328, 932], "h": [296, 328, 337, 454, 457, 653, 688, 689, 702, 705, 709, 818, 1267, 1268, 1281, 1284, 1288, 1350, 1351], "ha": [45, 46, 57, 64, 134, 144, 156, 179, 186, 298, 304, 309, 328, 397, 398, 417, 489, 566, 579, 585, 679, 703, 713, 724, 725, 749, 766, 775, 814, 818, 840, 905, 910, 915, 932, 1000, 1013, 1025, 1027, 1258, 1282, 1312, 1327], "half": [290, 328, 452, 473, 474, 475, 476, 818, 1063, 1087, 1088, 1089, 1090, 1327], "half_lif": [473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327], "ham": [41, 43, 45, 47, 48, 51, 190, 193, 194, 195, 199, 200, 201, 202, 203, 204, 210, 215, 220, 221, 223, 233, 237, 239, 241, 243, 246, 250, 255, 257, 258, 261, 264, 265, 266, 273, 276, 277, 279, 283, 284, 286, 287, 288, 293, 299, 300, 328, 401, 582, 583, 814, 836, 841, 842, 846, 847, 848, 849, 854, 862, 875, 879, 882, 883, 896, 904, 932, 1003, 1343, 1344], "ham_a": [283, 328], "ham_b": [283, 328], "ham_right": [233, 328, 862, 932], "hamburg": 814, "hand": [46, 142, 143, 156, 328, 547, 548, 549, 550, 1161, 1162, 1163, 1164], "handi": [425, 744, 1032], "handl": [45, 63, 64, 65, 103, 136, 142, 143, 156, 162, 210, 214, 328, 421, 528, 672, 712, 818, 839, 840, 854, 932, 936, 1028, 1142, 1251, 1291, 1327], "handler": [140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 198, 328, 420, 818, 845, 932], "happen": [144, 430, 615, 818, 1037, 1201, 1327], "hard": [156, 234, 328, 863, 868, 932], "harder": [219, 328, 858, 932], "hardwar": 1358, "has_head": [142, 143, 147, 153, 156], "has_nul": [818, 1107, 1327], "has_prefix": [404, 696], "has_suffix": [400, 670], "has_two": 1345, "has_valid": 1327, "hash": [220, 328, 818, 1327], "hash_row": 328, "hat": [688, 689, 1267, 1268], "have": [11, 20, 36, 46, 56, 57, 72, 97, 130, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 187, 198, 207, 231, 233, 234, 253, 256, 260, 262, 263, 282, 290, 305, 328, 417, 420, 473, 475, 476, 567, 579, 618, 622, 623, 628, 675, 690, 746, 818, 845, 862, 863, 872, 881, 905, 906, 932, 936, 938, 1025, 1027, 1087, 1089, 1090, 1093, 1203, 1207, 1208, 1267, 1269, 1327, 1354, 1356, 1358], "haystack": [674, 1253], "he": 698, "head": [75, 156, 217, 237, 279, 328, 343, 520, 818, 867, 932, 1134, 1299, 1327], "header": [43, 46, 51, 52, 55, 136, 142, 143, 147, 153, 156, 203, 292, 328, 932], "header_format": [46, 328], "header_nam": [292, 328], "headerless": 156, "heap": [205, 328, 818, 936, 1086, 1327], "heatmap": [46, 328], "heavili": 161, "height": [46, 139, 172, 202, 328, 331, 1327, 1332], "hell": [697, 1276], "hello": [1, 26, 697, 698, 699, 938, 1151, 1276, 1277, 1278, 1338, 1341], "hello_": 768, "hello_data": 1341, "hello_world": 1341, "help": [46, 165, 166, 167, 168, 328, 932], "helper": [328, 332, 814], "henc": [688, 1268], "here": [7, 43, 45, 46, 47, 51, 52, 53, 54, 55, 129, 131, 132, 133, 135, 144, 145, 146, 151, 152, 154, 156, 157, 158, 159, 160, 161, 170, 172, 176, 187, 253, 328, 425, 566, 567, 582, 675, 682, 744, 818, 888, 932, 938, 1032, 1261], "hex": [382, 383, 668, 669, 707, 985, 986, 1247, 1248, 1286], "hexadecim": [985, 986], "hf": [7, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 159, 160, 161, 328, 932], "hf_token": [7, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 159, 160, 161, 328, 932], "hi": [1, 1350], "hidden": [46, 328], "hidden_column": [46, 328], "hide": [27, 28, 29, 30], "hide_gridlin": [46, 328], "hide_password": 144, "high": [263, 328, 332, 615, 818, 830, 1201, 1327], "higher": [51, 55, 197, 255, 320, 328, 616, 638, 639, 791, 818, 844, 878, 921, 932, 1027, 1202, 1218, 1327], "highest": [328, 332, 618, 729, 749, 818, 932, 1203, 1327], "highli": [818, 936], "hippopotamu": [686, 687, 1265, 1266], "hist": [818, 1327, 1332], "histogram": [1327, 1332], "hit": [835, 932], "hive": [154, 159, 161], "hive_partit": [154, 159, 161], "hive_schema": [154, 159, 161], "hmm": 938, "hold": [272, 286, 328, 1308, 1327], "holidai": [425, 744, 1032], "home": [710, 1289], "horizont": [26, 65, 105, 212, 223, 240, 242, 247, 278, 296, 328, 735, 737, 746, 747, 748, 753, 754, 756, 764, 767, 782, 784, 787, 792, 802, 904, 932], "host": [62, 142, 148, 150, 161], "hour": [152, 156, 159, 160, 219, 234, 260, 298, 328, 439, 441, 442, 446, 447, 450, 452, 453, 457, 459, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 760, 761, 762, 763, 777, 804, 805, 806, 818, 858, 863, 881, 932, 938, 1058, 1061, 1063, 1070, 1076, 1088, 1327, 1351], "hours_diff": 459, "hous": [290, 328], "how": [7, 17, 43, 45, 46, 47, 51, 52, 53, 54, 55, 57, 65, 105, 145, 152, 154, 156, 159, 160, 161, 202, 210, 233, 234, 253, 296, 297, 328, 361, 421, 450, 451, 502, 527, 528, 608, 621, 640, 702, 705, 744, 760, 808, 818, 854, 862, 863, 899, 904, 932, 936, 965, 1028, 1061, 1062, 1141, 1142, 1219, 1281, 1284, 1327], "howev": [1, 132, 144, 154, 161, 182, 205, 238, 286, 328, 608, 818, 839, 932, 1086, 1327], "hstack": [105, 328], "html": [38, 46, 47, 48, 130, 144, 148, 150, 184, 185, 186, 195, 328, 940, 941], "http": [26, 38, 46, 47, 48, 75, 130, 144, 145, 148, 150, 184, 185, 186, 195, 328, 582, 673, 675, 685, 888, 932, 940, 941, 1252, 1254, 1264], "httpmethod": 75, "hug": [7, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 159, 160, 161, 328, 932], "hut": [688, 689, 1267, 1268], "hvplot": [328, 331, 1327, 1332], "hyperbol": [346, 348, 350, 409, 657, 722, 818, 950, 952, 954, 1017, 1237, 1301, 1327], "hyperloglog": [188, 328, 344, 738, 818, 833, 932, 948, 1327], "hyphen": [664, 1243], "hypothesi": [170, 172, 175, 176, 1358], "i": [1, 2, 3, 4, 5, 6, 7, 18, 20, 23, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 71, 72, 73, 74, 75, 79, 89, 97, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 122, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 187, 188, 189, 190, 192, 193, 197, 198, 201, 202, 204, 205, 207, 210, 214, 218, 219, 220, 221, 224, 225, 229, 231, 232, 233, 234, 235, 236, 237, 238, 244, 245, 249, 251, 252, 253, 257, 258, 260, 261, 262, 263, 264, 267, 268, 269, 271, 273, 274, 275, 276, 279, 280, 285, 286, 287, 290, 291, 292, 293, 295, 297, 298, 299, 303, 305, 306, 314, 328, 331, 332, 337, 340, 342, 343, 344, 354, 357, 364, 365, 372, 377, 385, 397, 398, 399, 402, 403, 417, 418, 420, 423, 424, 425, 426, 429, 437, 444, 445, 447, 452, 454, 457, 465, 473, 474, 475, 476, 479, 483, 487, 496, 498, 501, 504, 516, 522, 529, 530, 533, 535, 537, 546, 551, 552, 554, 558, 560, 563, 566, 567, 571, 573, 574, 575, 577, 578, 579, 581, 590, 608, 613, 615, 618, 620, 621, 622, 623, 624, 627, 628, 629, 631, 633, 635, 637, 639, 640, 641, 642, 644, 645, 646, 649, 650, 651, 652, 654, 655, 658, 659, 660, 661, 663, 664, 665, 666, 667, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 697, 698, 699, 702, 703, 704, 705, 707, 709, 710, 712, 717, 724, 725, 730, 731, 734, 735, 736, 737, 738, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 758, 759, 761, 762, 767, 771, 772, 773, 774, 776, 777, 778, 780, 783, 785, 788, 790, 793, 794, 795, 796, 797, 799, 803, 805, 806, 807, 808, 809, 814, 818, 833, 834, 835, 838, 839, 840, 842, 844, 845, 847, 848, 849, 850, 854, 857, 858, 861, 862, 863, 864, 866, 868, 872, 873, 877, 879, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 895, 896, 898, 899, 900, 901, 903, 906, 907, 915, 925, 932, 936, 938, 945, 946, 947, 948, 961, 968, 969, 976, 981, 988, 1000, 1004, 1005, 1006, 1009, 1014, 1015, 1025, 1026, 1027, 1030, 1031, 1032, 1033, 1036, 1044, 1058, 1063, 1065, 1068, 1076, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1097, 1098, 1108, 1109, 1110, 1112, 1115, 1117, 1127, 1129, 1130, 1131, 1134, 1136, 1143, 1144, 1147, 1149, 1151, 1160, 1165, 1166, 1172, 1180, 1199, 1201, 1203, 1205, 1207, 1208, 1209, 1212, 1213, 1216, 1218, 1219, 1220, 1222, 1225, 1226, 1227, 1228, 1229, 1231, 1234, 1235, 1238, 1239, 1242, 1243, 1244, 1245, 1246, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1271, 1274, 1276, 1277, 1278, 1281, 1282, 1283, 1284, 1286, 1288, 1289, 1291, 1299, 1302, 1306, 1308, 1309, 1311, 1312, 1316, 1317, 1327, 1332, 1336, 1337, 1342, 1346, 1347, 1350, 1353, 1355, 1356, 1358], "i0e0": 1358, "i16": [1, 60, 433, 448, 467, 653, 818, 938, 1059, 1305, 1327, 1358], "i32": [1, 60, 129, 132, 136, 169, 171, 172, 266, 275, 328, 363, 364, 366, 385, 399, 428, 436, 438, 439, 440, 441, 442, 446, 469, 653, 744, 808, 818, 883, 932, 937, 967, 968, 970, 988, 1035, 1045, 1049, 1050, 1051, 1057, 1080, 1178, 1327, 1347, 1351, 1358], "i64": [1, 16, 19, 22, 23, 27, 33, 58, 59, 60, 61, 65, 66, 84, 104, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 144, 151, 152, 156, 187, 189, 190, 191, 192, 194, 198, 199, 202, 203, 206, 207, 209, 210, 213, 214, 216, 217, 218, 219, 221, 223, 224, 226, 228, 230, 233, 234, 235, 237, 238, 239, 245, 246, 251, 252, 253, 254, 257, 258, 259, 260, 264, 266, 268, 271, 273, 274, 275, 277, 279, 281, 288, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 318, 321, 322, 328, 337, 339, 343, 353, 358, 359, 361, 362, 367, 369, 370, 371, 372, 373, 375, 378, 380, 388, 393, 396, 397, 398, 407, 413, 414, 415, 416, 417, 418, 421, 422, 435, 450, 456, 458, 459, 460, 461, 462, 463, 464, 474, 477, 479, 480, 482, 483, 484, 485, 487, 488, 490, 491, 493, 497, 499, 501, 502, 503, 504, 507, 508, 510, 511, 512, 513, 514, 517, 520, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 564, 566, 567, 587, 588, 589, 591, 592, 594, 596, 598, 599, 604, 608, 609, 612, 613, 614, 615, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 649, 651, 652, 653, 654, 659, 660, 661, 679, 688, 689, 703, 707, 712, 713, 715, 716, 717, 718, 719, 720, 724, 725, 726, 727, 729, 732, 739, 742, 745, 746, 747, 748, 753, 754, 755, 756, 757, 760, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 787, 789, 792, 796, 797, 798, 801, 802, 803, 804, 808, 814, 818, 834, 836, 837, 839, 840, 845, 846, 848, 851, 853, 854, 855, 856, 857, 858, 859, 862, 863, 864, 865, 867, 868, 869, 873, 874, 876, 877, 879, 880, 881, 883, 885, 887, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 902, 905, 906, 908, 909, 911, 912, 913, 915, 916, 919, 922, 923, 932, 938, 942, 943, 944, 947, 966, 971, 973, 975, 976, 977, 979, 982, 1000, 1014, 1015, 1021, 1022, 1023, 1024, 1025, 1026, 1042, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1092, 1093, 1094, 1096, 1097, 1101, 1102, 1104, 1109, 1111, 1120, 1134, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1154, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1172, 1173, 1180, 1185, 1193, 1199, 1201, 1204, 1205, 1206, 1207, 1208, 1209, 1211, 1214, 1217, 1221, 1225, 1226, 1228, 1231, 1232, 1234, 1239, 1240, 1286, 1292, 1297, 1299, 1304, 1312, 1313, 1318, 1327, 1336, 1337, 1339, 1343, 1344, 1345, 1346, 1347, 1349, 1352, 1353, 1355, 1356, 1358], "i8": [376, 377, 433, 436, 439, 441, 442, 443, 446, 448, 449, 453, 466, 467, 557, 653, 790, 793, 809, 818, 980, 981, 1028, 1040, 1043, 1053, 1054, 1060, 1064, 1077, 1078, 1171, 1210, 1232, 1315, 1327, 1351], "i_bitand_j": 1346, "i_bitand_op_j": 1346, "i_bitcount": 1346, "i_bitor_j": 1346, "i_bitor_op_j": 1346, "i_bitxor_j": 1346, "i_bitxor_op_j": 1346, "iceberg": [158, 830], "icon": [46, 328], "id": [32, 39, 46, 65, 139, 142, 147, 158, 235, 285, 292, 305, 314, 328, 627, 688, 689, 728, 818, 864, 906, 915, 932, 938, 1212, 1314, 1327, 1355, 1356, 1358], "id_char": 1358, "id_var": [244, 295, 328, 872, 898, 932], "ideal": 138, "ident": [39, 136, 191, 192, 328, 454, 626, 627, 818, 837, 838, 932, 1013, 1015, 1065, 1211, 1212, 1327], "identif": [147, 153], "identifi": [136, 144, 244, 251, 293, 295, 306, 328, 872, 896, 898, 932], "idiograph": 938, "idiomat": [814, 842, 849, 882, 901, 915, 932], "idx": [156, 219, 232, 305, 328, 364, 377, 558, 858, 906, 932, 981, 1172, 1256], "idx_lit": 1256, "idx_rx": 1256, "ieee": [726, 818], "if_set": [11, 36], "if_table_exist": [44, 328], "ifnul": 1348, "ignor": [45, 144, 171, 172, 176, 242, 278, 297, 328, 340, 342, 365, 385, 421, 451, 473, 475, 476, 528, 537, 600, 601, 664, 680, 734, 736, 748, 784, 802, 818, 899, 932, 938, 945, 946, 969, 988, 1028, 1062, 1087, 1089, 1090, 1142, 1151, 1189, 1190, 1243, 1259, 1327], "ignore_error": [142, 143, 152, 156, 160], "ignore_nul": [242, 278, 328, 340, 342, 365, 473, 475, 476, 537, 664, 680, 734, 736, 748, 784, 802, 818, 945, 946, 969, 1087, 1089, 1090, 1151, 1243, 1259, 1327], "ignore_spac": 938, "ij": 689, "ij67": 689, "ijkl": 1350, "ilmsuxu": [665, 673, 674, 677, 688, 689, 1244, 1252, 1253, 1256, 1267, 1268], "imbal": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "imdb_scor": 1336, "immedi": [182, 618, 739, 743, 758, 759, 761, 762, 773, 774, 777, 790, 793, 796, 800, 805, 806, 809, 818, 1203, 1327, 1337], "immut": [286, 328, 1308, 1327], "impact": [219, 328, 858, 932, 1336, 1355], "impl": 158, "implement": [51, 130, 144, 186, 220, 238, 314, 328, 331, 332, 496, 567, 591, 592, 594, 596, 598, 599, 713, 723, 780, 818, 915, 1108, 1180, 1226, 1228, 1310, 1327, 1332], "implic": [420, 818, 845, 932], "implicit": [297, 328, 899, 932], "implicitli": [210, 328, 483, 808, 818, 854, 932, 1355], "implod": [818, 1327, 1345], "import": [16, 22, 34, 41, 43, 45, 46, 47, 48, 51, 57, 72, 75, 129, 130, 133, 134, 142, 144, 145, 151, 152, 156, 162, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 190, 197, 198, 199, 202, 217, 219, 232, 234, 251, 253, 268, 275, 283, 285, 290, 295, 296, 298, 328, 331, 332, 386, 419, 420, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 574, 575, 581, 608, 629, 631, 633, 635, 637, 639, 642, 644, 646, 744, 757, 758, 759, 760, 761, 762, 763, 777, 797, 805, 806, 814, 818, 830, 836, 840, 844, 845, 846, 848, 858, 863, 868, 885, 898, 932, 989, 1016, 1018, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1088, 1118, 1121, 1123, 1124, 1213, 1236, 1300, 1327, 1332, 1337, 1352, 1355, 1358], "improv": [44, 55, 148, 159, 233, 328, 566, 818, 862, 932], "in_plac": [223, 272, 300, 328, 1204, 1233, 1240, 1327], "includ": [13, 26, 36, 43, 45, 46, 52, 62, 134, 144, 146, 147, 152, 153, 154, 156, 157, 158, 159, 160, 161, 172, 173, 182, 193, 197, 205, 210, 235, 251, 253, 263, 274, 290, 292, 296, 297, 328, 418, 453, 483, 487, 498, 504, 574, 615, 630, 632, 634, 636, 638, 640, 641, 643, 645, 688, 689, 693, 694, 697, 698, 744, 753, 794, 795, 818, 844, 854, 864, 890, 899, 932, 938, 1026, 1027, 1064, 1086, 1097, 1110, 1115, 1201, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1267, 1268, 1272, 1273, 1276, 1327, 1355], "include_bom": [43, 52, 328, 932], "include_boundari": [219, 328, 858, 932], "include_break": [418, 615, 818, 1026, 1201, 1327], "include_breakpoint": [498, 818, 1110, 1327], "include_categor": 938, "include_categori": [498, 818, 1110, 1327], "include_col": 172, "include_file_path": [147, 152, 153, 154, 156, 159, 160, 161], "include_head": [43, 46, 52, 143, 292, 328, 932], "include_index": 134, "include_init": 753, "include_kei": [251, 263, 328], "include_nul": [297, 328, 899, 932], "inclus": [187, 219, 260, 328, 457, 504, 628, 631, 633, 635, 637, 639, 642, 644, 646, 693, 694, 739, 758, 759, 761, 762, 773, 774, 777, 805, 806, 818, 858, 881, 932, 1068, 1115, 1272, 1273, 1327], "incom": 144, "incompat": 123, "incomplet": [623, 818, 1208, 1327], "incorpor": 1355, "incorrect": [269, 328, 468, 566, 567, 651, 818, 886, 915, 932, 1079, 1229, 1327], "incorrectli": [142, 558], "increas": [46, 57, 142, 147, 153, 154, 161, 328, 417, 627, 818, 1025, 1212, 1327], "independ": [63, 64, 169, 172, 176, 290, 328, 654, 818, 839, 840, 850, 877, 888, 932], "index": [46, 111, 130, 134, 137, 142, 143, 148, 150, 152, 154, 156, 159, 160, 161, 164, 186, 213, 215, 219, 224, 229, 231, 253, 258, 260, 261, 262, 271, 273, 285, 286, 288, 295, 297, 298, 304, 305, 328, 338, 351, 352, 353, 355, 358, 359, 364, 372, 377, 474, 490, 491, 493, 500, 523, 524, 533, 534, 535, 551, 552, 558, 628, 631, 633, 635, 637, 639, 642, 644, 646, 650, 652, 659, 665, 673, 677, 679, 692, 703, 713, 742, 773, 776, 818, 856, 858, 881, 887, 889, 898, 899, 905, 906, 932, 938, 955, 956, 957, 958, 959, 962, 963, 968, 976, 981, 1088, 1101, 1102, 1112, 1129, 1137, 1138, 1147, 1148, 1149, 1165, 1166, 1172, 1193, 1226, 1227, 1231, 1239, 1252, 1256, 1258, 1271, 1282, 1327, 1332, 1345, 1350], "index_column": [219, 260, 328, 628, 818, 858, 881, 932], "index_of": [818, 1327], "indexord": [285, 286, 328], "indic": [7, 43, 46, 47, 51, 52, 53, 54, 55, 71, 72, 74, 89, 104, 114, 140, 142, 143, 144, 147, 148, 150, 152, 153, 154, 156, 159, 160, 161, 169, 170, 176, 219, 260, 263, 269, 271, 283, 328, 354, 372, 490, 498, 505, 506, 507, 509, 510, 511, 512, 513, 514, 533, 551, 571, 572, 573, 574, 575, 576, 577, 608, 628, 631, 633, 635, 637, 639, 642, 644, 646, 650, 652, 742, 743, 789, 818, 858, 881, 886, 887, 932, 936, 938, 976, 1009, 1101, 1110, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1147, 1165, 1226, 1227, 1231, 1303, 1327, 1358], "indistinguish": [43, 52, 328, 932], "individu": [46, 55, 182, 260, 285, 286, 290, 328, 567, 674, 716, 818, 839, 881, 932, 938, 1012, 1253, 1327], "inequ": [602, 818], "inexact": [165, 166, 167, 168], "inf": [169, 172, 176, 350, 418, 506, 509, 615, 726, 818, 954, 1018, 1026, 1118, 1121, 1178, 1196, 1201, 1315, 1327, 1352], "infer": [7, 43, 47, 51, 52, 53, 54, 55, 73, 88, 104, 129, 131, 132, 133, 134, 135, 142, 143, 144, 147, 151, 152, 153, 154, 156, 159, 160, 161, 238, 328, 566, 567, 624, 681, 702, 704, 705, 706, 709, 763, 778, 793, 818, 932, 1180, 1209, 1260, 1281, 1283, 1284, 1285, 1288, 1327], "infer_schema": [142, 156], "infer_schema_length": [132, 135, 139, 142, 143, 144, 147, 151, 152, 153, 156, 160, 328, 681, 932, 1260], "inference_length": [706, 1285], "inference_s": [238, 328], "infin": [710, 726, 818, 1289], "infinit": [509, 726, 818, 1121, 1327], "influenc": [147, 868, 932], "influxdb": 144, "info": [146, 157, 158, 164], "inform": [7, 25, 29, 43, 44, 47, 51, 52, 53, 54, 55, 62, 146, 152, 154, 156, 157, 158, 159, 160, 161, 165, 167, 184, 195, 197, 328, 332, 516, 567, 658, 665, 673, 674, 677, 688, 689, 818, 839, 844, 877, 932, 936, 940, 1008, 1130, 1238, 1244, 1252, 1253, 1256, 1267, 1268, 1327], "inherit": [261, 328, 420, 818, 845, 932], "init": [182, 1336], "initcap": 1348, "initi": [2, 38, 39, 40, 46, 88, 182, 328, 753, 767, 808, 1355], "initialis": [75, 144, 182, 932], "inject": [46, 57, 328], "inlin": [30, 263, 328, 665, 673, 674, 677, 688, 689, 1244, 1252, 1253, 1256, 1267, 1268, 1345], "inner": [66, 84, 171, 233, 235, 297, 328, 365, 376, 422, 537, 557, 567, 621, 723, 797, 818, 862, 864, 899, 932, 969, 980, 1029, 1151, 1171, 1180, 1310, 1327, 1343, 1355], "inner_dtyp": [171, 174], "innermost": [171, 174], "innter": 968, "inprocessqueri": [839, 932], "input": [0, 57, 63, 104, 132, 134, 142, 143, 189, 199, 218, 235, 238, 242, 251, 253, 257, 266, 267, 271, 274, 278, 291, 302, 303, 307, 328, 337, 398, 400, 404, 407, 474, 477, 489, 504, 562, 566, 567, 579, 608, 622, 623, 655, 661, 679, 690, 692, 698, 699, 700, 701, 703, 705, 717, 725, 733, 735, 737, 739, 742, 745, 746, 747, 748, 756, 763, 765, 773, 774, 778, 779, 780, 782, 784, 787, 796, 800, 802, 808, 814, 818, 830, 834, 846, 857, 864, 879, 883, 884, 887, 890, 895, 902, 903, 908, 932, 936, 1014, 1088, 1115, 1176, 1177, 1180, 1199, 1207, 1208, 1231, 1235, 1258, 1271, 1282, 1284, 1327, 1349, 1350, 1352], "input_wildcard_expans": [818, 936], "insensit": [666, 674, 676, 678, 688, 689, 690, 938, 1244, 1245, 1253, 1255, 1256, 1257, 1267, 1268, 1269], "insensitive_match": [665, 677], "insert": [44, 142, 143, 148, 150, 152, 154, 156, 159, 160, 161, 224, 292, 294, 328, 650, 664, 680, 712, 818, 897, 932, 1227, 1243, 1259, 1291, 1327], "insert_aft": [46, 328], "insert_befor": [46, 328], "insert_chart": [46, 328], "insert_column": 328, "insid": [64, 566, 818, 840, 932], "inspect": [818, 932], "instal": [38, 39, 40, 108, 134, 142, 143, 145, 148, 150, 195, 287, 328, 425, 582, 744, 888, 932, 1032, 1309, 1327], "instanc": [7, 43, 47, 51, 52, 53, 54, 55, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 161, 172, 176, 207, 212, 328, 579, 753, 767, 814, 830, 836, 868, 905, 906, 932, 1093, 1327], "instanti": [44, 46, 144, 174, 266, 284, 285, 302, 328, 883, 902, 932, 937, 1305, 1306, 1327], "instantli": [64, 840, 932], "instead": [43, 45, 49, 50, 57, 64, 65, 131, 132, 135, 142, 143, 144, 147, 153, 154, 156, 161, 162, 169, 170, 171, 172, 176, 188, 189, 217, 230, 231, 234, 238, 244, 249, 251, 261, 262, 263, 266, 267, 268, 271, 285, 286, 287, 291, 303, 304, 328, 331, 332, 353, 372, 398, 399, 402, 403, 418, 432, 457, 474, 477, 487, 551, 581, 615, 622, 652, 664, 672, 683, 684, 697, 698, 699, 700, 701, 712, 725, 732, 739, 741, 743, 750, 758, 759, 761, 762, 763, 773, 774, 777, 790, 793, 796, 797, 800, 805, 806, 809, 818, 833, 834, 840, 850, 863, 872, 883, 884, 885, 887, 895, 903, 904, 905, 907, 932, 938, 957, 976, 985, 1001, 1005, 1006, 1026, 1039, 1047, 1048, 1068, 1088, 1107, 1165, 1201, 1207, 1226, 1228, 1231, 1240, 1243, 1251, 1262, 1263, 1276, 1277, 1278, 1291, 1308, 1309, 1327, 1332, 1336, 1337, 1341, 1355, 1356], "int": [7, 16, 18, 19, 20, 23, 31, 32, 43, 44, 46, 47, 51, 52, 53, 54, 55, 59, 66, 73, 132, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 189, 191, 197, 205, 208, 209, 213, 215, 217, 220, 221, 222, 224, 229, 231, 232, 234, 237, 238, 248, 249, 258, 260, 261, 264, 270, 271, 273, 276, 279, 284, 288, 291, 296, 299, 301, 304, 305, 311, 322, 328, 337, 360, 364, 372, 374, 377, 379, 380, 397, 398, 417, 421, 425, 450, 473, 475, 476, 480, 481, 482, 488, 490, 491, 493, 496, 497, 498, 520, 526, 528, 533, 534, 535, 536, 546, 551, 552, 554, 556, 557, 558, 560, 607, 609, 612, 613, 615, 618, 621, 624, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 659, 663, 673, 679, 681, 686, 687, 688, 692, 694, 695, 703, 706, 707, 712, 720, 724, 725, 731, 733, 739, 749, 751, 757, 760, 763, 769, 771, 773, 774, 777, 789, 790, 793, 794, 795, 799, 800, 803, 804, 807, 809, 818, 834, 837, 844, 852, 853, 856, 859, 863, 867, 877, 887, 889, 892, 894, 895, 900, 901, 905, 906, 907, 912, 923, 932, 937, 938, 955, 956, 964, 968, 976, 978, 981, 983, 1000, 1001, 1012, 1013, 1019, 1025, 1028, 1029, 1032, 1061, 1086, 1087, 1089, 1090, 1094, 1095, 1096, 1101, 1102, 1108, 1109, 1110, 1112, 1129, 1133, 1134, 1140, 1142, 1147, 1148, 1149, 1150, 1160, 1165, 1166, 1168, 1170, 1171, 1172, 1174, 1186, 1187, 1189, 1190, 1193, 1195, 1196, 1199, 1200, 1201, 1203, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1234, 1239, 1242, 1252, 1258, 1260, 1265, 1266, 1267, 1271, 1273, 1274, 1282, 1285, 1286, 1291, 1298, 1299, 1305, 1312, 1317, 1327, 1339, 1342, 1355, 1358], "int16": [1, 60, 290, 328, 415, 416, 448, 719, 818, 938, 1023, 1024, 1059, 1298, 1305, 1327], "int32": [1, 46, 60, 65, 129, 132, 169, 171, 172, 219, 232, 260, 285, 328, 363, 364, 366, 385, 399, 428, 438, 439, 440, 441, 446, 469, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 723, 793, 818, 858, 881, 932, 937, 938, 964, 967, 968, 970, 988, 1035, 1045, 1049, 1050, 1051, 1057, 1080, 1088, 1178, 1310, 1311, 1327], "int64": [1, 45, 46, 59, 60, 65, 66, 88, 106, 142, 151, 193, 203, 212, 219, 252, 260, 265, 266, 280, 287, 328, 358, 359, 361, 362, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 415, 416, 458, 459, 460, 461, 462, 463, 464, 468, 474, 477, 566, 567, 593, 595, 597, 612, 620, 628, 631, 633, 635, 637, 639, 642, 644, 646, 681, 707, 719, 723, 739, 746, 765, 773, 774, 778, 793, 800, 814, 818, 841, 849, 858, 876, 881, 882, 883, 932, 938, 962, 963, 965, 966, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 983, 1023, 1024, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1079, 1081, 1088, 1180, 1205, 1286, 1298, 1308, 1309, 1310, 1311, 1327], "int64arrai": [1302, 1327], "int8": [1, 60, 88, 212, 328, 376, 377, 415, 416, 433, 436, 442, 443, 449, 453, 466, 467, 557, 719, 790, 793, 809, 818, 937, 980, 981, 1023, 1024, 1028, 1040, 1043, 1053, 1054, 1060, 1064, 1077, 1078, 1171, 1210, 1298, 1308, 1315, 1327], "int_rang": [219, 296, 305, 314, 328, 739, 776, 796, 858, 868, 906, 915, 932], "integ": [43, 46, 52, 71, 72, 74, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 163, 170, 172, 175, 177, 202, 219, 260, 283, 286, 328, 341, 406, 453, 486, 487, 607, 613, 615, 620, 627, 628, 640, 679, 703, 707, 733, 739, 769, 773, 774, 793, 818, 848, 858, 881, 932, 938, 1011, 1064, 1100, 1199, 1201, 1205, 1212, 1219, 1226, 1258, 1282, 1286, 1308, 1327, 1349, 1355, 1358], "integer_list": 84, "integr": [46, 290, 328, 631, 633, 635, 637, 639, 642, 644, 646, 818, 1358], "intend": [1, 165, 166, 167, 168, 712, 1291], "intens": [238, 314, 328, 608, 818, 1180, 1327], "interact": [172, 176, 197, 328, 331, 844, 932, 1327, 1332], "interchang": [130, 186], "interest": [143, 454, 457, 1065, 1068], "interfac": [0, 119, 120, 181, 185, 830, 941, 1355], "interleav": 1350, "intermedi": [225, 328, 861, 932, 1358], "intern": [47, 48, 144, 163, 231, 280, 328, 487, 818, 1302, 1327, 1337], "interoper": [184, 940], "interpol": [197, 255, 320, 328, 482, 503, 570, 616, 638, 639, 791, 818, 844, 878, 921, 932, 1027, 1114, 1202, 1218, 1327, 1344], "interpolate_bi": [818, 1327], "interpolationmethod": [502, 818, 1113, 1327], "interpret": [133, 135, 142, 143, 156, 328, 385, 932, 988], "intersect": [46, 328, 548, 938, 1162, 1354], "interv": [219, 260, 298, 328, 418, 452, 465, 498, 504, 615, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 777, 805, 806, 818, 858, 881, 932, 1026, 1040, 1042, 1043, 1049, 1051, 1053, 1054, 1057, 1059, 1060, 1063, 1067, 1076, 1077, 1110, 1115, 1201, 1327, 1344], "intoexpr": [189, 218, 219, 260, 266, 267, 271, 274, 291, 302, 303, 307, 328, 343, 361, 381, 384, 387, 398, 425, 450, 474, 480, 490, 498, 500, 503, 504, 527, 547, 548, 549, 550, 608, 622, 623, 631, 633, 635, 637, 639, 642, 644, 646, 650, 652, 661, 666, 676, 678, 690, 693, 694, 695, 697, 698, 699, 700, 701, 717, 725, 735, 737, 742, 745, 746, 747, 748, 749, 751, 753, 756, 760, 767, 777, 782, 784, 787, 793, 796, 800, 802, 818, 834, 857, 858, 881, 883, 884, 887, 890, 895, 902, 903, 908, 932, 936, 965, 984, 987, 990, 1032, 1088, 1094, 1112, 1114, 1115, 1141, 1207, 1208, 1227, 1231, 1257, 1272, 1273, 1274, 1276, 1277, 1278, 1279, 1280, 1327], "intoexprcolumn": [210, 224, 328, 360, 364, 365, 372, 397, 398, 407, 452, 480, 483, 526, 534, 537, 546, 551, 609, 613, 649, 652, 673, 679, 682, 692, 703, 707, 712, 724, 725, 739, 744, 758, 759, 761, 762, 773, 774, 805, 806, 808, 818, 854, 887, 932, 964, 968, 969, 976, 1014, 1063, 1076, 1094, 1140, 1148, 1151, 1160, 1165, 1196, 1252, 1258, 1261, 1271, 1282, 1291, 1327], "introduc": [56, 97, 702, 704, 705, 1281, 1283, 1284], "introduct": 1354, "intuit": [487, 818, 938], "invalid": [43, 52, 120, 142, 143, 156, 190, 328, 399, 681, 682, 707, 726, 818, 932, 985, 1001, 1260, 1261, 1286, 1327], "invalid_valu": 985, "invalidoperationerror": [623, 818, 1208, 1327, 1353], "invari": [868, 932], "invers": [345, 346, 347, 348, 349, 350, 818, 949, 950, 951, 952, 953, 954, 1308, 1327, 1352], "invert": 938, "invok": [182, 566, 818], "involv": [210, 328, 854, 932], "io": [41, 43, 46, 47, 48, 51, 140, 142, 148, 149, 150, 151, 152, 155, 156, 158, 159, 160, 198, 268, 328, 420, 489, 581, 818, 845, 885, 932], "iobas": [49, 50, 151, 152, 198, 268, 328, 420, 581, 585, 818, 845, 885, 932], "ipc": [47, 48, 53, 148, 149, 150, 159, 162, 328, 830, 932], "ipccompress": [47, 48, 328], "is_between": [818, 1327], "is_dupl": [328, 818, 1327], "is_elementwis": [566, 818, 936], "is_empti": [328, 1327], "is_finit": [818, 1327], "is_first_distinct": [818, 1327], "is_in": [106, 210, 328, 818, 1327], "is_infinit": [818, 1327], "is_last_distinct": [818, 1327], "is_nan": [201, 328, 818, 847, 932, 1327], "is_not_nan": [818, 1327], "is_not_nul": [818, 1327], "is_nul": [202, 328, 818, 848, 932, 1327], "is_numer": 1358, "is_odd": [266, 328, 883, 932, 938], "is_selector": 938, "is_sort": 1327, "is_uniqu": [328, 818, 1327], "isn": 808, "iso": [438, 457, 466, 467, 1045, 1068, 1077, 1078, 1350], "iso8601": [142, 143, 156, 457, 1068], "iso_lang": 1350, "iso_year": 469, "isodow": 1351, "isoweek": 1351, "isoyear": 1351, "issu": [99, 100, 103, 104, 107, 114, 116, 127, 142, 143, 144, 156, 328, 415, 416, 719, 818, 1023, 1024, 1298, 1327, 1355], "ital": [46, 328], "item": [19, 65, 143, 217, 261, 264, 328, 360, 364, 365, 421, 479, 526, 528, 535, 537, 546, 649, 695, 818, 964, 968, 969, 1028, 1092, 1140, 1142, 1149, 1151, 1160, 1225, 1274, 1327], "iter": [63, 64, 65, 75, 129, 132, 144, 175, 177, 189, 199, 210, 218, 219, 230, 231, 232, 235, 260, 261, 262, 263, 266, 267, 274, 291, 292, 302, 303, 306, 307, 328, 398, 417, 425, 483, 608, 661, 717, 725, 735, 737, 742, 744, 745, 746, 747, 748, 756, 782, 784, 787, 796, 800, 802, 808, 814, 818, 834, 846, 854, 857, 858, 864, 881, 883, 884, 890, 895, 902, 903, 908, 932, 936, 937, 938, 1025, 1032, 1097, 1226, 1327, 1358], "iter_batch": 144, "iter_column": 328, "iter_row": [232, 261, 262, 263, 328], "iter_slic": 328, "its": [76, 98, 136, 164, 205, 286, 328, 429, 452, 465, 474, 566, 626, 661, 716, 808, 818, 842, 849, 901, 932, 1008, 1036, 1063, 1076, 1086, 1088, 1211, 1308, 1327, 1357], "itself": [170, 328, 331, 332, 567, 630, 632, 634, 636, 638, 640, 641, 643, 645, 794, 795, 818, 866, 932, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1327, 1332, 1336, 1337, 1355], "ix": [253, 328], "j": [292, 328, 1346], "jax": [285, 328, 1306, 1327], "jax_enable_x64": [285, 328], "jaxexporttyp": [285, 328], "jjk": 938, "jkl": [674, 1253], "jklmn": 1350, "job": [835, 932], "join": [52, 53, 54, 55, 56, 57, 63, 64, 65, 97, 210, 234, 235, 297, 328, 483, 502, 608, 664, 797, 818, 839, 840, 850, 854, 863, 864, 877, 888, 899, 904, 932, 1243, 1337, 1339, 1345, 1354, 1355], "join_asof": [233, 328, 862, 932], "join_nul": [233, 328, 862, 932], "join_wher": [328, 932], "joinstrategi": [57, 233, 328, 862, 932], "joinvalid": [233, 328, 862, 932], "jpy": 1358, "json": [8, 9, 11, 12, 49, 50, 139, 151, 152, 158, 160, 198, 268, 328, 420, 489, 581, 585, 681, 682, 714, 818, 830, 845, 885, 932, 936, 1260, 1261, 1294], "json_path": [682, 1261], "json_path_match": [681, 1260], "json_stat": 11, "json_str": [151, 152], "json_val": [682, 1261], "jsonpath": [681, 682, 1260, 1261], "jst": [136, 938], "jul": [702, 1281, 1350], "juli": [1068, 1350, 1351], "just": [46, 134, 144, 156, 244, 295, 328, 872, 898, 932, 938], "k": [189, 263, 291, 292, 328, 397, 398, 412, 516, 724, 725, 818, 834, 895, 932, 1000, 1020, 1130, 1312, 1327], "k_2": [658, 818, 1238, 1327], "k_3": [658, 818, 1238, 1327], "kadokawa": [685, 1264], "kanji": 938, "karen": [253, 328], "kathmandu": [1038, 1039, 1066], "kb": [205, 328, 386, 989, 1086, 1327], "kde": [1327, 1332], "keep": [57, 142, 143, 152, 156, 159, 160, 210, 293, 297, 298, 328, 489, 566, 584, 592, 622, 745, 818, 854, 896, 899, 932, 1207, 1327], "kei": [7, 43, 45, 46, 47, 51, 52, 53, 54, 55, 57, 62, 65, 146, 152, 154, 156, 157, 158, 159, 160, 161, 187, 219, 231, 233, 234, 245, 251, 257, 259, 262, 263, 297, 328, 483, 567, 622, 623, 690, 758, 761, 800, 818, 858, 862, 863, 873, 879, 880, 899, 932, 938, 942, 1207, 1208, 1269, 1327, 1343], "kept": [293, 328, 896, 932], "keyerror": 22, "keystrok": 814, "keyword": [7, 45, 146, 154, 157, 172, 176, 195, 218, 252, 261, 266, 267, 287, 302, 303, 307, 328, 483, 612, 717, 796, 800, 808, 818, 857, 876, 883, 884, 902, 903, 908, 932, 1309, 1327, 1340], "kl": 689, "kleen": [340, 342, 734, 735, 736, 737, 818, 945, 946, 1327], "klmnoopqrstuvwxyz": [232, 328], "knight": 1336, "know": [57, 144, 253, 295, 328, 558, 566, 818, 898, 932], "known": [148, 377, 558, 915, 981, 1172], "kurtosi": [818, 1327], "kuzu_db_conn": 144, "kwarg": [37, 38, 42, 56, 67, 68, 70, 71, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 141, 144, 145, 172, 174, 176, 195, 210, 252, 287, 328, 331, 612, 818, 854, 876, 907, 932, 936, 1309, 1327, 1332, 1340, 1355], "k\u00f9zudb": 144, "l": 777, "l1": 65, "l2": 65, "label": [219, 285, 290, 328, 331, 332, 418, 615, 629, 630, 632, 634, 636, 638, 641, 643, 645, 818, 858, 877, 932, 1026, 1201, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1327, 1332], "label_column": [290, 328], "labelangl": [328, 331, 1327, 1332], "lag": [271, 328, 372, 551, 652, 747, 818, 887, 932, 976, 1165, 1231, 1327], "lake": [45, 146, 157, 328, 830], "lambda": [156, 212, 238, 252, 253, 257, 314, 328, 377, 475, 476, 558, 566, 567, 592, 593, 753, 754, 767, 779, 780, 792, 818, 868, 876, 879, 915, 932, 981, 1089, 1090, 1172, 1180, 1327], "land": [425, 1032], "languag": [156, 219, 234, 260, 298, 328, 447, 452, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076, 1088, 1327], "larg": [16, 17, 20, 57, 144, 147, 153, 161], "large_str": [232, 280, 287, 328], "larger": [16, 52, 53, 54, 55, 63, 64, 487, 749, 818, 839, 840, 932], "largest": [189, 291, 328, 398, 724, 725, 818, 834, 895, 932, 1312, 1327], "last": [45, 152, 156, 159, 160, 165, 166, 167, 168, 221, 234, 237, 253, 263, 274, 279, 286, 293, 322, 328, 353, 364, 373, 417, 433, 444, 448, 466, 488, 510, 535, 553, 556, 558, 591, 592, 594, 596, 598, 599, 608, 623, 660, 661, 679, 695, 703, 720, 742, 803, 814, 818, 863, 890, 894, 896, 923, 932, 938, 957, 968, 977, 1025, 1040, 1055, 1059, 1077, 1109, 1122, 1134, 1149, 1167, 1170, 1208, 1240, 1258, 1274, 1282, 1299, 1308, 1327, 1348, 1350], "last_column": [46, 328], "later": [234, 268, 328, 581, 863, 885, 932], "latest": [38, 130, 146, 157, 186, 450, 451, 579, 702, 705, 760, 1061, 1062, 1281, 1284], "latt": 938, "latter": [46, 207, 328, 1093, 1327], "lazi": [1, 65, 156, 172, 234, 252, 253, 275, 328, 567, 769, 790, 793, 809, 818, 844, 862, 863, 904, 908, 909, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 932, 938, 1336, 1337, 1338, 1339, 1340, 1342, 1355, 1358], "lazili": [142, 143, 156, 157, 158, 159, 160, 161, 840, 932], "lazy_fram": [63, 64], "lazyfram": [0, 1, 7, 57, 58, 59, 60, 61, 63, 64, 65, 156, 157, 158, 159, 160, 161, 162, 165, 166, 172, 193, 198, 236, 252, 253, 268, 275, 328, 420, 483, 558, 581, 796, 797, 818, 830, 929, 930, 931, 937, 938, 1336, 1337, 1340, 1342, 1355, 1356, 1358], "lazygroupbi": [857, 858, 881, 932], "lbl": [285, 290, 328], "ldf": [1, 908, 909, 911, 913, 916, 917, 918, 919, 920, 921, 922], "ldot": [474, 818, 1088, 1327], "le": [670, 818, 1327], "lead": [20, 51, 136, 162, 242, 269, 271, 278, 328, 372, 490, 493, 551, 558, 566, 567, 651, 652, 697, 699, 749, 784, 802, 818, 868, 886, 887, 915, 932, 976, 1165, 1180, 1229, 1231, 1276, 1278, 1327], "leap": [437, 447, 1044, 1058], "leap_year": 437, "learn": [290, 328], "least": [110, 253, 328, 394, 395, 609, 673, 675, 818, 997, 998, 1196, 1252, 1254, 1327, 1348], "leav": [12, 244, 295, 328, 558, 872, 898, 932], "left": [21, 22, 46, 57, 165, 166, 167, 168, 219, 233, 234, 260, 297, 328, 418, 473, 474, 475, 476, 502, 504, 615, 628, 631, 633, 635, 637, 639, 642, 644, 646, 650, 723, 745, 753, 754, 758, 759, 761, 762, 767, 777, 792, 805, 806, 808, 818, 858, 862, 863, 881, 899, 932, 1026, 1087, 1088, 1089, 1090, 1115, 1201, 1227, 1310, 1327, 1339, 1343, 1348], "left_clos": [418, 615, 818, 1026, 1201, 1327], "left_on": [233, 234, 297, 328, 862, 863, 899, 932], "left_right": [233, 328, 862, 932], "leftmost": [650, 818, 1227, 1327, 1350], "len": [18, 46, 172, 176, 193, 232, 253, 305, 309, 314, 328, 411, 567, 578, 580, 626, 750, 773, 777, 818, 841, 901, 906, 910, 915, 932, 937, 1019, 1211, 1327], "len_byt": [18, 403, 684, 685, 1006, 1263], "len_char": [402, 683, 1005, 1262], "length": [65, 66, 84, 147, 153, 156, 170, 174, 217, 219, 260, 273, 328, 331, 402, 417, 452, 465, 552, 558, 579, 622, 623, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 659, 679, 683, 684, 686, 687, 690, 692, 703, 712, 746, 777, 790, 793, 794, 795, 809, 818, 858, 877, 881, 889, 932, 936, 1005, 1012, 1025, 1036, 1063, 1076, 1166, 1172, 1193, 1207, 1208, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1239, 1258, 1262, 1263, 1265, 1266, 1269, 1271, 1282, 1291, 1327, 1344, 1345, 1348], "leq": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "less": [156, 234, 328, 487, 518, 565, 566, 695, 818, 863, 932, 1274, 1358], "letter": [206, 311, 322, 328, 477, 666, 674, 676, 678, 690, 710, 765, 818, 851, 912, 923, 932, 938, 1245, 1253, 1255, 1257, 1269, 1289, 1350], "level": [16, 46, 47, 48, 51, 55, 139, 156, 159, 160, 161, 212, 238, 249, 275, 280, 328, 332, 483, 818, 830, 891, 932, 1302, 1327, 1355], "lexic": [69, 938, 1009], "lf": [52, 53, 54, 55, 60, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 882, 883, 885, 887, 888, 889, 890, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 904, 905, 906, 910, 914, 932, 1344, 1355, 1358], "lf1": [797, 891, 932, 1340, 1342, 1356], "lf2": [797, 891, 932, 1340, 1342, 1356], "lf3": [932, 1340], "lf4": [932, 1340], "lf5": 932, "lf6": 932, "lf_other": [904, 932], "lib": [818, 1302, 1327], "librari": [1, 112, 144, 147, 566, 818, 936, 1358], "life": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "lifetim": [182, 829, 1342], "light": [46, 328], "like": [41, 43, 45, 47, 48, 49, 50, 51, 64, 130, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 198, 219, 226, 228, 233, 263, 268, 285, 286, 328, 331, 420, 426, 489, 530, 566, 584, 618, 673, 698, 699, 730, 814, 818, 835, 840, 845, 858, 932, 936, 1033, 1144, 1203, 1252, 1316, 1327, 1332], "limit": [16, 17, 55, 144, 145, 178, 209, 328, 380, 482, 488, 818, 853, 932, 1096, 1327, 1345, 1354], "line": [16, 26, 46, 142, 143, 147, 156, 217, 226, 228, 328, 331, 673, 1252, 1327, 1332], "line_termin": [43, 52, 328, 932], "linear": [197, 225, 255, 320, 328, 502, 503, 525, 570, 616, 638, 639, 747, 748, 791, 818, 844, 861, 878, 921, 932, 1027, 1113, 1114, 1139, 1202, 1218, 1327], "lineitem": [138, 143, 145], "list": [1, 4, 5, 6, 19, 39, 45, 46, 57, 58, 60, 63, 64, 66, 72, 88, 104, 129, 131, 132, 133, 135, 136, 138, 140, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 170, 171, 172, 176, 194, 199, 203, 205, 206, 210, 216, 218, 219, 223, 231, 248, 251, 260, 261, 262, 263, 266, 274, 281, 282, 290, 292, 293, 294, 296, 302, 307, 308, 328, 338, 365, 376, 377, 378, 418, 425, 479, 485, 490, 499, 508, 566, 567, 579, 580, 608, 615, 621, 624, 629, 630, 632, 634, 636, 638, 641, 643, 645, 660, 661, 672, 674, 676, 678, 693, 713, 715, 716, 723, 742, 744, 747, 758, 759, 761, 762, 764, 772, 774, 778, 780, 798, 800, 806, 814, 818, 842, 849, 851, 854, 857, 858, 883, 890, 896, 897, 902, 904, 908, 909, 932, 937, 938, 969, 980, 981, 982, 1012, 1026, 1032, 1086, 1092, 1101, 1104, 1110, 1111, 1120, 1180, 1201, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1245, 1251, 1253, 1255, 1257, 1269, 1272, 1307, 1310, 1327, 1336, 1341, 1345, 1347, 1357, 1358], "list_of_seri": 780, "listtostructwidthstrategi": [558, 1172], "lit": [1, 339, 381, 504, 575, 591, 677, 746, 747, 753, 767, 790, 793, 809, 818, 1096, 1327], "liter": [7, 21, 22, 26, 43, 45, 47, 51, 52, 53, 54, 55, 144, 146, 152, 154, 156, 157, 159, 160, 161, 175, 176, 177, 248, 266, 267, 271, 297, 302, 303, 328, 339, 381, 400, 404, 407, 429, 450, 471, 472, 480, 487, 492, 494, 504, 518, 565, 575, 587, 589, 602, 603, 613, 622, 623, 665, 666, 667, 676, 677, 678, 688, 689, 690, 717, 718, 726, 735, 737, 739, 745, 746, 747, 748, 756, 757, 760, 773, 777, 778, 782, 784, 787, 796, 800, 802, 804, 818, 853, 883, 884, 887, 899, 902, 903, 932, 938, 984, 1014, 1036, 1061, 1084, 1094, 1115, 1192, 1207, 1208, 1226, 1228, 1231, 1244, 1245, 1246, 1255, 1256, 1257, 1267, 1268, 1269, 1327, 1350], "littl": [262, 328, 385, 988], "lmn": 938, "ln": [473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327, 1348], "ln_a": 1349, "load": [9, 11, 12, 132, 134, 144, 146, 147, 153, 157, 158, 175, 177, 328, 818, 830, 932, 936, 1358], "load_from_fil": [8, 11, 12], "load_sheet_by_nam": 147, "load_tabl": 147, "load_workbook": 147, "loader": [290, 328], "lobster": [677, 1256], "loc": [328, 332], "local": [10, 45, 144, 146, 157, 158, 161, 328, 465, 610, 611, 818, 1004, 1008, 1038, 1039, 1063, 1066, 1076, 1197, 1198, 1327, 1337], "localhost": 144, "localis": [452, 465, 1076], "locat": [46, 154, 156, 159, 161, 207, 258, 288, 294, 328, 650, 818, 897, 932, 1093, 1101, 1226, 1227, 1327], "lock": 178, "log": [35, 59, 398, 470, 563, 589, 613, 725, 818, 1082, 1327, 1348], "log10": [818, 1327, 1348], "log10_a": 1349, "log16_a": 1349, "log1p": [818, 1327, 1348], "log1p_a": 1349, "log2": 1348, "logarithm": [561, 562, 563, 818, 1175, 1176, 1177, 1327, 1349], "logic": [65, 238, 314, 328, 331, 332, 340, 342, 420, 567, 723, 734, 735, 736, 737, 780, 818, 845, 850, 862, 885, 915, 932, 945, 946, 1180, 1308, 1310, 1327, 1332], "london": [430, 434, 451, 1037, 1041, 1062], "london_timezon": [451, 1062], "london_to_amsterdam": [451, 1062], "long": [206, 244, 253, 295, 296, 328, 385, 851, 872, 898, 932, 988], "longer": [142, 143, 156], "longest": 558, "look": [16, 219, 328, 381, 558, 858, 932, 984], "lookup": 814, "loop": [144, 567, 818], "lose": [427, 1034], "lossi": [142, 143, 156], "love": [666, 690, 1245, 1269], "low": [23, 144, 407, 615, 818, 1201, 1327], "low_memori": [142, 143, 152, 154, 156, 160, 161], "lower": [156, 197, 219, 255, 320, 328, 407, 504, 564, 592, 616, 620, 638, 639, 739, 758, 759, 761, 762, 777, 791, 805, 806, 818, 844, 858, 878, 921, 932, 1014, 1027, 1115, 1178, 1202, 1205, 1218, 1315, 1327, 1345, 1348], "lower_bound": [219, 328, 407, 504, 818, 858, 932, 1014, 1115, 1315, 1327], "lowercas": [598, 708, 710, 1287, 1289, 1350], "lowest": [564, 818], "lru_cach": [238, 328, 567, 818, 1180, 1327], "lst": 171, "lt": [164, 483, 732, 818, 1327], "ltrim": 1348, "lyric": [666, 690, 1245, 1269], "lz4": [47, 48, 51, 53, 55, 328, 932], "lzo": [51, 55, 328, 932], "m": [72, 74, 233, 328, 426, 427, 429, 434, 435, 454, 456, 457, 468, 673, 702, 704, 705, 709, 760, 761, 762, 763, 769, 777, 862, 932, 938, 1033, 1034, 1036, 1041, 1042, 1065, 1067, 1068, 1079, 1252, 1281, 1283, 1284, 1288, 1340, 1350, 1351], "m_2": [658, 818, 1238, 1327], "m_3": [658, 818, 1238, 1327], "m_i": [658, 818, 1238, 1327], "machin": 1358, "maco": 164, "made": [46, 144, 328, 457, 1068], "mai": [1, 2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 65, 73, 75, 79, 129, 131, 132, 133, 135, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 169, 170, 172, 173, 174, 175, 176, 177, 182, 197, 198, 205, 207, 219, 233, 234, 235, 238, 260, 268, 275, 285, 287, 290, 297, 298, 328, 331, 332, 402, 417, 418, 420, 425, 426, 427, 438, 447, 452, 454, 465, 477, 498, 533, 558, 566, 567, 578, 581, 615, 628, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 676, 678, 681, 683, 689, 744, 746, 753, 754, 758, 759, 761, 762, 767, 777, 792, 805, 806, 818, 839, 840, 844, 845, 850, 858, 862, 863, 864, 868, 881, 885, 891, 899, 905, 906, 915, 932, 1005, 1008, 1009, 1025, 1026, 1027, 1032, 1033, 1034, 1045, 1058, 1063, 1065, 1076, 1086, 1093, 1110, 1147, 1180, 1201, 1213, 1216, 1218, 1219, 1255, 1257, 1260, 1262, 1306, 1309, 1311, 1327, 1332, 1358], "main": [164, 840, 932], "maintain": [52, 53, 54, 55, 274, 328, 378, 559, 650, 661, 727, 742, 818, 844, 890, 932, 982, 1173, 1227, 1313, 1327], "maintain_ord": [52, 53, 54, 55, 218, 233, 251, 253, 274, 293, 298, 308, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 338, 378, 388, 393, 396, 398, 490, 493, 559, 567, 661, 725, 727, 742, 818, 840, 850, 857, 862, 877, 888, 890, 896, 909, 911, 913, 916, 917, 918, 919, 920, 921, 922, 932, 982, 1173, 1313, 1327], "maintainorderjoin": [233, 328, 862, 932], "major": [147, 285, 328], "make": [46, 65, 88, 129, 134, 142, 143, 146, 147, 148, 150, 154, 157, 245, 249, 256, 286, 298, 328, 331, 475, 476, 498, 598, 599, 608, 621, 694, 818, 873, 932, 936, 1089, 1090, 1110, 1273, 1308, 1327], "man": [691, 1270], "manag": [56, 96, 97, 829, 830, 1342, 1355], "mandatori": [46, 328], "mango": [400, 404, 670, 696, 1002, 1007, 1249, 1275], "mani": [144, 145, 161, 207, 328, 676, 678, 690, 1093, 1255, 1269, 1327, 1331], "manner": 144, "many_to_mani": [233, 328, 862, 932], "many_to_on": [233, 328, 862, 932], "map": [88, 131, 132, 142, 143, 144, 145, 148, 149, 154, 155, 156, 159, 172, 190, 193, 211, 231, 238, 257, 261, 262, 263, 265, 281, 328, 339, 452, 465, 566, 567, 591, 593, 594, 596, 598, 599, 622, 623, 690, 730, 779, 818, 836, 879, 882, 932, 937, 938, 1027, 1063, 1076, 1180, 1207, 1208, 1269, 1316, 1327, 1337, 1339, 1340, 1355], "map_": 116, "map_batch": [818, 932], "map_el": [107, 238, 328, 566, 733, 818, 1327], "map_field": [595, 597], "map_row": 328, "mapelementsstrategi": [567, 818], "mapping_strategi": [608, 818], "march": [454, 1065], "mariadb": 145, "mark": [46, 139, 328, 399, 818, 1001, 1327], "mark_area": [1327, 1332], "mark_attr": [328, 331, 1327, 1332], "mark_bar": [328, 331, 1327, 1332], "mark_lin": [328, 331], "mark_point": [328, 331], "markdown": [13, 26, 182], "marker": [46, 328], "mask": [161, 172, 176, 226, 228, 328, 382, 505, 507, 510, 515, 610, 611, 665, 668, 677, 818, 985, 1097, 1115, 1116, 1119, 1122, 1128, 1197, 1198, 1228, 1244, 1247, 1256, 1318, 1327], "mass": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "massag": [244, 295, 328, 872, 898, 932], "match": [45, 46, 65, 72, 118, 129, 131, 132, 133, 135, 142, 144, 151, 152, 154, 160, 161, 165, 166, 167, 168, 190, 209, 233, 234, 261, 297, 328, 400, 404, 574, 575, 576, 622, 623, 640, 665, 666, 667, 670, 673, 674, 676, 677, 678, 681, 682, 688, 689, 690, 696, 702, 704, 705, 808, 814, 818, 836, 853, 862, 863, 899, 932, 938, 1002, 1007, 1085, 1207, 1208, 1219, 1244, 1245, 1246, 1249, 1252, 1253, 1255, 1256, 1257, 1260, 1261, 1267, 1268, 1269, 1275, 1281, 1283, 1284, 1327, 1350], "matches_overlap": [676, 678, 1257], "matches_supertyp": [209, 328, 853, 932], "materi": [238, 263, 314, 328, 839, 877, 915, 925, 932, 938, 1180, 1327], "materialis": [231, 232, 261, 262, 328], "math": [1, 16, 61, 253, 328, 419, 818, 1016, 1018, 1236, 1300, 1327, 1348, 1352, 1354], "mathemat": [726, 764, 818, 1348], "mathshortcut": [1, 61], "matplotlib": [164, 582, 877, 888, 932], "matter": [219, 231, 260, 262, 263, 282, 328, 628, 698, 699, 818, 858, 881, 932], "max": [31, 46, 51, 55, 139, 197, 209, 218, 240, 253, 260, 328, 332, 413, 482, 558, 566, 608, 618, 622, 623, 628, 630, 631, 651, 695, 746, 758, 761, 782, 798, 818, 844, 853, 857, 881, 932, 1021, 1027, 1096, 1172, 1203, 1214, 1229, 1274, 1327, 1336, 1345, 1348], "max_a": [260, 328, 628, 818, 881, 932], "max_binary_s": 144, "max_col": [170, 172], "max_colname_length": [217, 328], "max_color": [46, 328], "max_data_s": 176, "max_elem": 1345, "max_horizont": [328, 781], "max_items_per_column": [217, 328], "max_level": 139, "max_siz": [171, 172, 174, 176, 1358], "max_text_s": 144, "max_valu": 1358, "max_width": [558, 1172], "maxim": [315, 351, 818, 916, 955, 1327], "maximum": [16, 32, 43, 51, 52, 55, 73, 132, 135, 142, 143, 144, 147, 151, 152, 153, 156, 160, 162, 170, 171, 172, 174, 176, 217, 219, 239, 240, 328, 358, 403, 523, 568, 600, 610, 618, 679, 681, 684, 692, 703, 781, 782, 818, 858, 869, 932, 962, 1006, 1046, 1137, 1181, 1189, 1197, 1203, 1258, 1260, 1263, 1271, 1282, 1327, 1344], "mb": [205, 328, 386, 1086, 1327], "me": [666, 690, 710, 1245, 1269, 1289], "mean": [51, 55, 142, 143, 148, 154, 156, 159, 182, 197, 209, 218, 219, 234, 242, 253, 260, 298, 307, 328, 447, 452, 465, 479, 482, 487, 628, 631, 632, 633, 635, 637, 639, 642, 644, 646, 658, 664, 673, 680, 758, 759, 761, 762, 763, 784, 805, 806, 808, 818, 844, 853, 857, 858, 863, 868, 881, 908, 932, 1027, 1058, 1063, 1076, 1092, 1096, 1215, 1238, 1243, 1252, 1259, 1327, 1344, 1345], "mean_horizont": [328, 783], "measur": [244, 295, 328, 332, 872, 898, 932], "measure_a": [328, 332], "measure_b": [328, 332], "median": [197, 253, 328, 482, 634, 635, 818, 844, 904, 932, 1027, 1216, 1327, 1348], "mediat": 1355, "medium": [46, 328], "megan": [245, 328, 873, 932], "melt": [295, 328, 898, 932], "member": [219, 328, 858, 932, 1120, 1327], "membership": [360, 526, 964, 1140], "memori": [20, 51, 55, 63, 64, 65, 129, 130, 133, 134, 135, 142, 143, 144, 146, 147, 148, 152, 154, 156, 157, 159, 160, 161, 186, 207, 238, 262, 263, 272, 286, 314, 328, 608, 619, 653, 818, 839, 840, 907, 932, 1093, 1180, 1204, 1232, 1233, 1308, 1327], "memory_map": [148, 154, 159], "memory_resourc": 907, "merg": [45, 233, 234, 245, 328, 862, 863, 873, 932], "merge_sort": [328, 932], "messi": [673, 675, 1252, 1254], "met": 808, "meta": [98, 420, 671, 818, 1250], "metadata": [0, 3, 7, 158, 830], "method": [2, 10, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 128, 130, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 169, 172, 176, 182, 184, 193, 197, 198, 201, 202, 207, 214, 218, 225, 231, 238, 249, 255, 261, 262, 263, 271, 293, 302, 309, 314, 320, 328, 337, 340, 341, 372, 407, 420, 454, 457, 471, 472, 480, 487, 489, 492, 494, 502, 518, 551, 565, 567, 585, 587, 589, 591, 592, 594, 596, 598, 599, 602, 603, 604, 607, 613, 616, 618, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 652, 666, 676, 678, 690, 698, 699, 700, 701, 706, 712, 718, 726, 728, 733, 749, 780, 791, 810, 811, 813, 814, 818, 819, 820, 823, 824, 825, 826, 827, 830, 840, 844, 845, 847, 848, 861, 878, 887, 896, 902, 907, 910, 915, 921, 932, 937, 940, 947, 976, 1014, 1027, 1065, 1068, 1083, 1084, 1093, 1094, 1103, 1105, 1113, 1132, 1165, 1179, 1180, 1191, 1192, 1202, 1203, 1218, 1231, 1245, 1255, 1257, 1269, 1285, 1291, 1310, 1319, 1321, 1323, 1327, 1328, 1331, 1333, 1334, 1335, 1337, 1341], "metric": 144, "micro": [453, 1064], "microsecond": [72, 74, 219, 231, 234, 260, 262, 263, 282, 298, 328, 447, 450, 452, 457, 460, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 760, 761, 762, 763, 804, 805, 806, 818, 858, 863, 877, 881, 932, 938, 1058, 1061, 1063, 1071, 1076, 1088, 1327, 1351], "microsoft": [39, 46, 328], "mid_color": [46, 328], "midnight": 89, "midpoint": [197, 255, 320, 328, 616, 638, 639, 791, 818, 844, 878, 921, 932, 1027, 1202, 1218, 1327], "might": [142, 143, 156, 178, 233, 234, 253, 286, 295, 328, 567, 728, 818, 862, 863, 890, 898, 932], "millennia": 1351, "millennium": 1351, "milli": [453, 1064], "millisecond": [219, 234, 260, 298, 328, 436, 442, 447, 452, 461, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 761, 762, 763, 777, 805, 806, 818, 858, 863, 881, 932, 938, 1058, 1063, 1072, 1076, 1088, 1327, 1351], "milliseconds_diff": [460, 461, 463], "mimic": 747, "min": [46, 51, 55, 197, 209, 247, 253, 260, 328, 414, 482, 567, 608, 618, 628, 636, 637, 758, 761, 787, 796, 818, 844, 853, 881, 932, 936, 1022, 1027, 1096, 1203, 1217, 1327, 1345, 1348, 1351, 1358], "min_a": [260, 328, 628, 818, 881, 932], "min_col": [170, 172], "min_color": [46, 328], "min_elem": 1345, "min_horizont": [328, 786, 796], "min_sampl": [417, 473, 475, 476, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 794, 795, 818, 1025, 1087, 1089, 1090, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1327], "min_siz": [171, 172, 174, 176, 1358], "min_valu": 1358, "mincol": 170, "minim": [318, 352, 359, 524, 653, 661, 818, 919, 956, 963, 1138, 1184, 1232, 1327], "minimum": [51, 55, 170, 171, 172, 174, 176, 212, 246, 247, 328, 473, 475, 476, 586, 601, 611, 618, 786, 787, 818, 874, 932, 1052, 1087, 1089, 1090, 1190, 1198, 1203, 1327, 1344, 1358], "minu": [447, 604, 818, 1058], "minut": [219, 234, 260, 298, 328, 436, 439, 441, 446, 447, 450, 452, 453, 462, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 760, 761, 762, 763, 804, 805, 806, 818, 858, 863, 881, 932, 938, 1058, 1061, 1063, 1073, 1076, 1088, 1327, 1351], "minutes_diff": 462, "misc": 1342, "miscellan": 830, "mismatch": [65, 121, 152, 160, 165, 167], "miss": [65, 142, 143, 156, 208, 214, 328, 380, 473, 475, 476, 481, 488, 511, 512, 558, 818, 852, 932, 1087, 1089, 1090, 1095, 1327], "missing_utf8_is_empty_str": [142, 143, 156], "mix": [17, 234, 286, 328, 746, 797, 863, 891, 932, 938, 1027, 1327], "mixin": 1, "mlnm": 440, "mm": [46, 328], "mn": 1350, "mno": [22, 26], "mnop": 1350, "mo": 763, "mocha": 938, "mod": [818, 1348], "mode": [44, 45, 46, 52, 53, 54, 55, 63, 64, 165, 167, 253, 275, 328, 674, 790, 793, 809, 818, 839, 840, 850, 932, 1253, 1327, 1336, 1337, 1355], "model": [290, 328], "modifi": [142, 143, 156, 178, 182, 207, 223, 230, 231, 300, 328, 354, 451, 468, 665, 673, 674, 677, 688, 689, 708, 710, 711, 818, 947, 1062, 1079, 1093, 1244, 1252, 1253, 1256, 1267, 1268, 1287, 1289, 1290, 1327], "modul": [100, 108, 147, 817, 938, 1358], "modulu": [587, 818], "moment": [51, 195, 328, 516, 658, 818, 1130, 1238, 1327], "mon": [328, 331, 1351], "mondai": [219, 328, 425, 465, 467, 744, 858, 932, 1032, 1076, 1078], "monkei": [686, 687, 1265, 1266], "month": [219, 234, 260, 298, 328, 433, 444, 445, 447, 450, 452, 454, 457, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 757, 758, 759, 760, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 1040, 1055, 1056, 1058, 1061, 1063, 1065, 1068, 1076, 1088, 1327, 1351], "month_nam": [454, 457], "monthbegin": [445, 1056], "monthend": [444, 1055], "moos": 938, "more": [26, 46, 51, 55, 57, 65, 96, 97, 126, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 147, 151, 152, 153, 154, 157, 158, 160, 165, 167, 172, 182, 184, 195, 197, 201, 210, 230, 231, 238, 244, 249, 261, 262, 264, 275, 285, 286, 290, 293, 295, 314, 328, 332, 341, 378, 402, 483, 487, 495, 516, 546, 559, 563, 566, 567, 607, 608, 649, 658, 674, 683, 702, 704, 705, 727, 738, 750, 766, 772, 775, 783, 785, 788, 789, 798, 808, 814, 818, 844, 847, 848, 854, 872, 891, 896, 898, 907, 932, 936, 938, 940, 982, 1005, 1008, 1027, 1106, 1107, 1130, 1160, 1173, 1180, 1225, 1238, 1253, 1262, 1281, 1283, 1284, 1306, 1308, 1313, 1327, 1342, 1343, 1353, 1356, 1357, 1358], "more_bi": [251, 274, 328, 661, 818, 890, 932], "more_column": [206, 294, 328, 477, 765, 818, 851, 897, 932, 938], "more_expr": [608, 742, 745, 746, 747, 748, 818], "more_nam": [713, 814], "most": [46, 129, 142, 143, 145, 156, 165, 166, 167, 168, 286, 328, 391, 392, 579, 588, 609, 623, 695, 818, 994, 995, 1185, 1196, 1208, 1274, 1308, 1327, 1339, 1355], "mostli": [280, 328, 483, 818], "move": [253, 263, 328, 425, 473, 474, 475, 476, 630, 632, 636, 643, 818, 1032, 1087, 1088, 1089, 1090, 1214, 1215, 1217, 1221, 1327], "mr": 907, "mssql": [44, 328], "much": [238, 296, 314, 328, 402, 403, 417, 533, 567, 683, 684, 780, 818, 915, 1005, 1006, 1025, 1147, 1180, 1262, 1263, 1327], "mul": 818, "multi": [14, 46, 142, 143, 290, 328, 477, 673, 818, 1252], "multi_fram": [46, 328], "multicolselector": 187, "multiindexselector": [187, 942], "multipl": [46, 63, 64, 65, 113, 142, 143, 147, 153, 156, 159, 160, 161, 170, 172, 176, 199, 205, 207, 210, 218, 219, 223, 232, 235, 251, 253, 263, 266, 269, 274, 297, 302, 307, 328, 398, 533, 566, 572, 579, 588, 589, 608, 622, 624, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 661, 713, 725, 742, 750, 767, 779, 781, 786, 792, 798, 801, 808, 814, 818, 830, 839, 840, 846, 854, 857, 858, 864, 883, 886, 890, 899, 902, 908, 915, 932, 947, 977, 1086, 1093, 1147, 1167, 1185, 1207, 1209, 1240, 1327, 1340, 1345], "multipli": [566, 629, 630, 632, 634, 636, 638, 641, 643, 645, 717, 818, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1327], "multithread": [274, 328, 661, 742, 818, 890, 932, 977, 1167, 1240, 1327], "must": [46, 75, 130, 131, 142, 146, 154, 157, 158, 161, 162, 197, 206, 219, 234, 235, 245, 253, 260, 261, 328, 418, 558, 567, 582, 615, 622, 623, 628, 690, 746, 758, 759, 808, 818, 844, 851, 858, 863, 864, 868, 873, 881, 888, 907, 932, 936, 1026, 1027, 1201, 1207, 1208, 1269, 1327], "mutual": [261, 328], "my": [158, 162, 328, 331, 1327, 1332], "my_column": 915, "my_column_": [292, 328], "my_column_0": [292, 328], "my_column_1": [292, 328], "my_column_2": [292, 328], "my_custom_aggreg": 780, "my_fil": 148, "my_holidai": [425, 744, 1032], "my_larger_than_ram_fil": [52, 53, 54, 55, 932], "my_long_fil": 156, "my_struct": 800, "mydf": 156, "myrol": 145, "mysql": 145, "n": [1, 18, 19, 23, 31, 43, 50, 52, 58, 59, 60, 61, 72, 74, 138, 142, 143, 147, 152, 156, 172, 191, 207, 213, 219, 221, 231, 232, 237, 238, 262, 263, 264, 271, 276, 279, 282, 284, 299, 311, 313, 322, 328, 344, 372, 377, 386, 388, 393, 396, 397, 398, 402, 403, 417, 421, 425, 427, 429, 435, 456, 468, 474, 480, 483, 491, 497, 520, 528, 534, 536, 546, 547, 551, 554, 556, 558, 560, 609, 612, 621, 641, 642, 645, 646, 649, 652, 658, 663, 679, 683, 684, 688, 689, 694, 695, 697, 698, 703, 705, 720, 724, 725, 726, 730, 731, 733, 751, 760, 761, 762, 763, 769, 771, 790, 793, 794, 795, 796, 799, 803, 807, 809, 818, 837, 856, 858, 859, 867, 887, 892, 894, 900, 912, 914, 923, 932, 938, 976, 981, 989, 1000, 1005, 1006, 1013, 1025, 1028, 1032, 1034, 1036, 1042, 1067, 1079, 1088, 1093, 1094, 1102, 1109, 1134, 1142, 1148, 1150, 1160, 1161, 1165, 1170, 1172, 1196, 1220, 1222, 1225, 1231, 1238, 1242, 1258, 1262, 1263, 1267, 1268, 1273, 1274, 1282, 1284, 1299, 1305, 1312, 1316, 1317, 1327, 1339, 1340, 1347, 1350, 1351, 1353, 1355, 1358], "n0": [377, 558], "n00": [981, 1172], "n01": [981, 1172], "n02": [981, 1172], "n1": [377, 558], "n2": [1, 377], "n3": 1, "n_1": [483, 818], "n_2": [483, 818], "n_3": [483, 818], "n_bar": 1344, "n_bit": 1350, "n_byte": [386, 402, 403, 683, 684, 1350], "n_char": [402, 403, 683, 684, 1350], "n_chunk": [328, 947, 1093, 1204, 1327], "n_elem": 1345, "n_even": 938, "n_field_strategi": [558, 1172], "n_film": 1336, "n_foo_uniqu": 1344, "n_kilobyt": 386, "n_row": [140, 142, 143, 148, 150, 152, 154, 156, 159, 160, 161, 232, 328, 932], "n_thread": [142, 143], "n_uniqu": [328, 344, 818, 1327], "na": [287, 328, 696, 1309, 1327], "naiv": [429, 430, 705, 1036, 1037, 1284], "name": [1, 3, 5, 6, 7, 24, 28, 30, 38, 41, 43, 44, 46, 52, 58, 59, 60, 61, 65, 76, 88, 105, 129, 131, 132, 133, 134, 135, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 167, 168, 169, 170, 172, 175, 176, 177, 189, 190, 193, 194, 199, 200, 201, 202, 206, 210, 211, 214, 215, 217, 218, 229, 230, 231, 233, 234, 235, 238, 240, 242, 244, 245, 247, 251, 253, 257, 261, 262, 263, 265, 266, 267, 274, 275, 278, 281, 283, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 306, 307, 313, 328, 332, 339, 377, 381, 382, 384, 387, 398, 407, 418, 454, 457, 477, 483, 504, 511, 512, 513, 514, 558, 567, 572, 576, 578, 580, 584, 608, 615, 625, 661, 674, 675, 688, 689, 690, 713, 715, 717, 725, 730, 734, 735, 736, 737, 738, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 765, 766, 771, 772, 775, 781, 782, 783, 784, 785, 786, 787, 788, 791, 794, 795, 796, 797, 799, 800, 801, 802, 803, 807, 808, 814, 818, 834, 836, 841, 842, 846, 847, 848, 851, 854, 857, 862, 863, 864, 872, 873, 879, 882, 883, 884, 890, 891, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 908, 914, 932, 936, 937, 938, 944, 981, 1013, 1026, 1065, 1068, 1085, 1172, 1201, 1206, 1252, 1253, 1254, 1267, 1268, 1292, 1295, 1303, 1304, 1309, 1316, 1327, 1332, 1337, 1338, 1339, 1340, 1341, 1342, 1354, 1355, 1358], "name_gener": [292, 328], "named_agg": [307, 908], "named_bi": [218, 328, 857, 932], "named_expr": [266, 267, 302, 303, 328, 717, 796, 800, 883, 884, 902, 903, 932], "named_fram": [1340, 1355], "nameless": 134, "namespac": [1, 144, 327, 328, 331, 713, 797, 817, 830, 930, 931, 1327, 1332, 1358], "nan": [134, 172, 186, 201, 208, 286, 287, 328, 423, 424, 471, 472, 481, 492, 494, 502, 511, 512, 513, 514, 518, 565, 568, 586, 600, 601, 602, 603, 629, 655, 726, 749, 818, 847, 852, 932, 950, 954, 1030, 1031, 1095, 1123, 1124, 1189, 1190, 1213, 1235, 1308, 1309, 1327, 1358], "nan_as_nul": 186, "nan_max": [818, 1327], "nan_min": [818, 1327], "nan_to_nul": [134, 328, 932, 1327], "nana": 1350, "nanmax": [600, 601, 818, 1189, 1190, 1327], "nanosecond": [89, 219, 234, 260, 298, 328, 447, 452, 453, 463, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1064, 1074, 1076, 1088, 1327, 1351], "nansum": [629, 818, 1213, 1327], "nativ": [16, 44, 142, 144, 147, 148, 150, 154, 231, 238, 262, 263, 282, 286, 314, 328, 567, 780, 797, 818, 824, 891, 915, 932, 1180, 1308, 1327, 1331, 1355, 1358], "natur": [563, 818, 1177, 1327, 1343, 1349], "ndarrai": [133, 184, 210, 286, 328, 490, 650, 818, 854, 932, 940, 1101, 1226, 1227, 1308, 1327], "ndjson": [54, 932], "ne": [603, 818, 1192, 1327], "ne_miss": [210, 328, 818, 854, 932, 1084, 1327], "nearest": [59, 197, 234, 255, 320, 328, 406, 486, 502, 616, 638, 639, 791, 818, 844, 863, 878, 921, 932, 1011, 1027, 1100, 1113, 1202, 1218, 1327, 1349], "nearest_pow2": 59, "necessari": [43, 44, 52, 56, 97, 147, 286, 328, 932, 1308, 1327], "need": [65, 99, 108, 136, 142, 143, 145, 154, 156, 159, 161, 182, 219, 260, 263, 272, 328, 331, 558, 628, 653, 688, 689, 690, 706, 763, 790, 793, 809, 818, 858, 881, 932, 1232, 1267, 1268, 1269, 1285, 1327, 1332, 1358], "neg": [19, 71, 72, 73, 74, 142, 143, 148, 150, 154, 163, 221, 237, 260, 271, 273, 279, 305, 328, 372, 551, 552, 612, 613, 628, 652, 659, 679, 692, 703, 818, 881, 887, 889, 905, 906, 932, 938, 976, 1109, 1134, 1165, 1166, 1199, 1231, 1239, 1258, 1271, 1282, 1299, 1327], "negat": [605, 818, 1194, 1327], "neither": [136, 147, 153, 264, 328, 377, 558, 981, 1172], "nest": [56, 136, 139, 173, 174, 205, 328, 830, 1086, 1327, 1355, 1358], "nesting_level": 173, "net": [674, 1253], "netherland": [234, 328, 863, 932], "never": [43, 52, 144, 233, 234, 261, 328, 862, 863, 932], "new": [44, 45, 46, 156, 182, 187, 213, 223, 224, 238, 249, 250, 253, 257, 292, 294, 296, 297, 302, 303, 328, 339, 429, 479, 489, 491, 502, 592, 593, 608, 622, 623, 627, 685, 688, 689, 694, 695, 713, 715, 814, 818, 830, 856, 879, 897, 899, 902, 903, 915, 932, 942, 944, 1036, 1092, 1102, 1193, 1206, 1207, 1208, 1212, 1267, 1268, 1273, 1274, 1292, 1295, 1304, 1327, 1355, 1357], "new_column": [142, 143, 147, 156], "new_dai": 450, "new_dat": 447, "new_df": [297, 328, 899, 932], "new_fil": [41, 43, 47, 48, 51, 328], "new_from_index": 1327, "new_id": [292, 328], "new_lf": [899, 932], "new_tabl": 1357, "new_valu": [753, 754, 767, 792], "new_york": 761, "newli": 57, "newlin": [50, 142, 152, 156, 160, 328], "next": [24, 59, 219, 234, 260, 298, 328, 380, 425, 447, 452, 465, 618, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1032, 1058, 1063, 1076, 1203, 1327], "next_batch": 143, "next_pow2": 59, "nfc": [685, 1264, 1350], "nfd": [685, 1264, 1350], "nfkc": [685, 1264, 1350], "nfkd": [685, 1264, 1350], "nfruit": 703, "nl": [425, 744, 1032], "nnel_id": 136, "no1": 938, "no_default": [214, 328, 622, 623, 690, 818, 1207, 1208, 1269, 1327], "no_optim": [52, 53, 54, 55, 63, 64, 839, 840, 868, 877, 932], "nodataerror": [142, 143, 147, 153, 156], "nodd": [673, 1252], "node": [835, 839, 860, 868, 872, 877, 879, 932], "nodefault": [214, 328, 622, 623, 690, 818, 1207, 1208, 1269, 1327], "non": [10, 11, 43, 45, 46, 52, 57, 72, 73, 134, 163, 189, 196, 232, 244, 260, 266, 267, 271, 291, 292, 295, 297, 302, 303, 328, 380, 397, 398, 402, 407, 411, 412, 425, 451, 488, 504, 558, 566, 567, 573, 608, 609, 622, 623, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 667, 674, 683, 688, 689, 690, 710, 712, 717, 724, 725, 735, 737, 745, 746, 747, 748, 750, 752, 756, 763, 782, 784, 787, 794, 795, 796, 800, 802, 818, 834, 843, 872, 881, 883, 884, 887, 895, 898, 899, 902, 903, 932, 936, 938, 1000, 1005, 1014, 1019, 1020, 1027, 1032, 1062, 1115, 1172, 1180, 1196, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1231, 1246, 1253, 1262, 1267, 1268, 1289, 1291, 1308, 1312, 1327, 1347, 1355], "non_exist": [451, 1062], "non_numer": [43, 52, 328, 932], "none": [1, 2, 7, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 64, 66, 69, 72, 73, 74, 75, 76, 84, 88, 97, 129, 131, 132, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 184, 185, 191, 196, 197, 201, 202, 208, 209, 210, 212, 214, 217, 219, 220, 225, 229, 233, 234, 236, 238, 241, 244, 249, 250, 253, 260, 261, 264, 268, 271, 273, 274, 280, 281, 283, 285, 286, 287, 290, 292, 293, 294, 295, 296, 297, 298, 309, 313, 328, 340, 342, 343, 355, 356, 357, 364, 365, 377, 380, 400, 402, 403, 404, 407, 411, 412, 413, 416, 418, 423, 424, 432, 447, 450, 451, 457, 472, 473, 474, 475, 476, 477, 480, 481, 482, 488, 495, 496, 498, 500, 502, 503, 504, 511, 512, 513, 514, 519, 521, 522, 529, 535, 537, 539, 546, 547, 548, 549, 550, 552, 558, 566, 567, 578, 581, 582, 583, 585, 590, 603, 604, 605, 606, 608, 609, 615, 618, 619, 622, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 652, 653, 654, 655, 659, 660, 664, 665, 667, 669, 670, 671, 674, 677, 679, 680, 681, 682, 683, 684, 686, 687, 692, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 707, 709, 712, 713, 714, 715, 716, 723, 730, 735, 736, 737, 739, 745, 746, 747, 748, 749, 750, 752, 756, 758, 759, 760, 761, 762, 763, 765, 766, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 787, 793, 794, 795, 800, 802, 804, 805, 806, 808, 818, 837, 838, 840, 843, 844, 847, 848, 850, 852, 853, 854, 858, 861, 862, 863, 866, 868, 872, 875, 881, 885, 887, 888, 889, 890, 896, 897, 898, 899, 904, 907, 910, 914, 915, 924, 925, 932, 936, 937, 938, 940, 941, 945, 946, 948, 955, 956, 960, 961, 968, 969, 981, 991, 996, 999, 1002, 1005, 1006, 1007, 1013, 1014, 1019, 1020, 1026, 1027, 1029, 1030, 1031, 1039, 1046, 1047, 1048, 1052, 1061, 1062, 1068, 1082, 1084, 1087, 1088, 1089, 1090, 1094, 1095, 1096, 1098, 1106, 1108, 1110, 1112, 1113, 1114, 1115, 1125, 1126, 1129, 1130, 1131, 1133, 1135, 1136, 1139, 1143, 1149, 1151, 1153, 1160, 1161, 1162, 1163, 1164, 1166, 1172, 1180, 1181, 1182, 1183, 1184, 1192, 1195, 1201, 1202, 1203, 1207, 1208, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1225, 1226, 1227, 1228, 1231, 1234, 1235, 1238, 1239, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1253, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1281, 1282, 1283, 1284, 1286, 1288, 1291, 1294, 1302, 1304, 1305, 1306, 1308, 1309, 1310, 1316, 1317, 1327, 1336, 1338, 1339, 1340, 1342, 1345, 1347, 1351, 1355], "nonexist": [451, 1062], "nor": [147, 153, 264, 328], "normal": [45, 139, 219, 328, 470, 516, 658, 730, 818, 858, 932, 1082, 1130, 1238, 1316, 1327, 1348], "normalised_scor": 144, "norowsreturnederror": [261, 328], "north": 75, "not_": [302, 328, 818, 902, 932, 938, 1327], "not_c": [302, 328, 902, 932], "notabl": 144, "notat": [17, 46, 328], "note": [10, 16, 26, 45, 46, 51, 56, 57, 64, 71, 72, 74, 89, 96, 97, 129, 130, 131, 133, 135, 136, 142, 144, 145, 146, 147, 151, 152, 153, 156, 157, 158, 160, 162, 165, 167, 170, 172, 176, 178, 182, 186, 193, 195, 197, 198, 201, 208, 210, 219, 220, 229, 230, 231, 233, 234, 238, 249, 252, 253, 257, 260, 261, 262, 263, 268, 271, 275, 282, 285, 287, 290, 292, 293, 295, 297, 298, 302, 304, 305, 328, 372, 385, 400, 402, 403, 404, 407, 415, 416, 420, 423, 424, 430, 444, 445, 447, 452, 457, 465, 474, 481, 487, 489, 496, 504, 511, 512, 530, 533, 551, 558, 567, 581, 582, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 622, 623, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 654, 658, 664, 665, 666, 672, 673, 674, 675, 676, 677, 678, 679, 683, 684, 688, 689, 690, 692, 697, 698, 699, 702, 703, 710, 712, 713, 719, 726, 735, 737, 744, 753, 758, 759, 761, 762, 763, 767, 777, 778, 790, 792, 793, 797, 805, 806, 808, 809, 814, 818, 829, 840, 844, 845, 847, 852, 854, 858, 863, 879, 881, 885, 887, 888, 890, 891, 896, 898, 899, 902, 905, 906, 932, 938, 976, 988, 1005, 1006, 1014, 1023, 1024, 1027, 1030, 1031, 1037, 1055, 1056, 1058, 1063, 1068, 1076, 1088, 1095, 1108, 1115, 1144, 1147, 1165, 1180, 1207, 1208, 1212, 1219, 1226, 1228, 1231, 1233, 1238, 1243, 1244, 1245, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1262, 1263, 1267, 1268, 1269, 1271, 1276, 1277, 1278, 1281, 1282, 1289, 1291, 1298, 1309, 1311, 1327, 1336, 1337, 1341, 1342, 1353, 1355], "noth": [26, 673, 682, 1252, 1261], "notic": [144, 210, 328, 854, 932, 1327], "notimplementederror": 186, "now": [57, 147, 260, 286, 328, 575, 881, 932, 1308, 1327], "np": [133, 184, 210, 286, 328, 490, 566, 650, 818, 854, 932, 940, 1101, 1118, 1121, 1123, 1124, 1226, 1227, 1327], "npt": [184, 940], "nr": [311, 322, 912, 923], "nth": [213, 328, 491, 695, 814, 818, 856, 932, 1102, 1274, 1327], "nthe": [673, 1252], "nthose": [673, 1252], "nu": 670, "null": [22, 43, 45, 51, 52, 55, 57, 65, 72, 131, 132, 135, 139, 142, 143, 152, 154, 156, 160, 161, 162, 169, 172, 176, 186, 189, 190, 191, 196, 197, 201, 202, 204, 209, 210, 212, 225, 233, 241, 242, 243, 250, 253, 255, 271, 274, 276, 277, 278, 281, 286, 287, 291, 294, 297, 299, 302, 309, 328, 340, 342, 343, 353, 356, 357, 364, 365, 372, 373, 380, 382, 385, 397, 398, 399, 400, 402, 403, 404, 407, 411, 412, 413, 416, 421, 423, 424, 447, 450, 451, 458, 459, 460, 461, 462, 463, 464, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 488, 495, 500, 502, 503, 511, 512, 513, 514, 519, 521, 522, 528, 529, 532, 533, 535, 537, 538, 539, 547, 548, 549, 550, 551, 553, 558, 566, 567, 590, 603, 604, 605, 606, 608, 609, 619, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 652, 653, 655, 660, 661, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 679, 680, 681, 682, 683, 684, 686, 687, 692, 694, 695, 696, 702, 703, 705, 707, 712, 713, 714, 715, 716, 723, 724, 725, 734, 735, 736, 737, 742, 745, 746, 747, 748, 750, 752, 756, 760, 765, 776, 778, 782, 784, 787, 794, 795, 800, 802, 808, 818, 834, 837, 843, 844, 847, 848, 853, 854, 861, 862, 875, 887, 890, 895, 897, 899, 902, 904, 910, 932, 938, 945, 946, 957, 960, 961, 968, 969, 976, 977, 985, 988, 1000, 1001, 1002, 1005, 1006, 1007, 1013, 1014, 1019, 1020, 1028, 1030, 1031, 1061, 1062, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1084, 1085, 1087, 1088, 1089, 1090, 1094, 1096, 1097, 1106, 1107, 1112, 1113, 1114, 1125, 1126, 1127, 1133, 1135, 1136, 1139, 1142, 1143, 1146, 1147, 1149, 1151, 1152, 1153, 1162, 1164, 1165, 1167, 1172, 1180, 1192, 1195, 1196, 1208, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1231, 1235, 1240, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1265, 1266, 1271, 1273, 1274, 1275, 1281, 1282, 1284, 1286, 1291, 1294, 1305, 1308, 1309, 1310, 1312, 1327, 1339, 1343, 1345, 1347, 1351, 1353, 1355, 1356, 1358], "null_behavior": [421, 528, 818, 1028, 1142, 1327], "null_count": [51, 55, 197, 202, 328, 417, 818, 844, 932, 1025, 1027, 1327], "null_equ": [204, 328, 1085, 1327], "null_on_oob": [364, 533, 535, 968, 1147, 1149], "null_prob": [169, 172, 176], "null_valu": [43, 52, 142, 143, 156, 328, 932], "nullabl": [45, 328], "nullbehavior": [421, 528, 818, 1028, 1142, 1327], "nullif": 1348, "nulls_last": [274, 328, 353, 373, 553, 660, 661, 742, 818, 890, 932, 957, 977, 1127, 1167, 1240, 1327], "num": [19, 46, 289, 328, 504, 818, 1115, 1327], "num_row": 186, "num_sampl": 777, "number": [7, 16, 17, 18, 19, 20, 23, 31, 43, 44, 46, 47, 51, 52, 53, 54, 55, 56, 57, 71, 72, 73, 89, 97, 118, 129, 131, 132, 133, 135, 138, 139, 142, 143, 144, 145, 147, 151, 152, 153, 154, 156, 159, 160, 161, 163, 170, 172, 175, 177, 178, 179, 189, 191, 196, 205, 206, 208, 209, 217, 221, 222, 231, 232, 237, 248, 249, 260, 264, 271, 276, 279, 291, 296, 299, 301, 309, 311, 313, 322, 328, 354, 370, 372, 377, 380, 389, 390, 391, 392, 394, 395, 397, 398, 403, 411, 417, 418, 421, 425, 428, 436, 438, 440, 442, 443, 453, 466, 467, 469, 473, 474, 475, 476, 480, 481, 482, 488, 497, 511, 512, 519, 520, 528, 536, 539, 544, 546, 551, 554, 556, 558, 560, 608, 612, 615, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 654, 663, 679, 681, 683, 684, 688, 692, 694, 695, 703, 706, 720, 724, 725, 731, 744, 749, 750, 751, 763, 771, 776, 777, 794, 795, 799, 803, 807, 818, 834, 837, 843, 851, 852, 853, 859, 867, 877, 887, 892, 894, 895, 900, 901, 910, 912, 914, 923, 932, 937, 974, 976, 981, 992, 993, 994, 995, 997, 998, 1000, 1006, 1013, 1019, 1025, 1026, 1028, 1032, 1035, 1043, 1045, 1050, 1053, 1054, 1064, 1077, 1078, 1080, 1086, 1087, 1088, 1089, 1090, 1094, 1095, 1096, 1109, 1133, 1134, 1142, 1150, 1153, 1158, 1160, 1165, 1170, 1172, 1186, 1187, 1201, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1231, 1234, 1242, 1258, 1260, 1262, 1263, 1267, 1271, 1273, 1274, 1282, 1285, 1299, 1312, 1317, 1327, 1343, 1346, 1349, 1358], "number_of_two": [361, 527], "numbers_decim": 706, "numer": [16, 22, 43, 46, 52, 146, 157, 190, 199, 234, 286, 287, 295, 296, 328, 337, 385, 399, 407, 487, 504, 563, 587, 589, 613, 621, 653, 655, 675, 712, 718, 726, 777, 818, 830, 836, 846, 863, 898, 932, 938, 988, 1001, 1014, 1027, 1115, 1232, 1235, 1254, 1291, 1308, 1327, 1349, 1358], "numeric_dtyp": 1358, "numericliter": [407, 777, 818, 1014, 1327], "numpi": [103, 133, 164, 184, 195, 231, 262, 263, 282, 286, 287, 328, 566, 600, 601, 629, 818, 932, 940, 1118, 1121, 1123, 1124, 1189, 1190, 1213, 1308, 1309, 1327], "nworld": 697, "o": [148, 159, 386, 397, 398, 417, 672, 724, 725, 818, 989, 1000, 1025, 1251, 1276, 1312, 1327, 1340], "oauth": 158, "obj": 938, "object": [41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 65, 88, 106, 130, 131, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 170, 172, 173, 185, 186, 193, 198, 218, 219, 234, 236, 251, 260, 263, 268, 275, 285, 286, 287, 328, 420, 581, 758, 759, 761, 762, 778, 797, 805, 806, 818, 830, 839, 845, 858, 863, 866, 881, 891, 929, 932, 938, 941, 1302, 1327, 1337, 1339, 1342, 1355, 1357], "observ": [233, 328, 418, 473, 474, 475, 476, 615, 818, 862, 932, 1026, 1087, 1088, 1089, 1090, 1201, 1327], "obtain": 558, "obvious": 715, "occur": [46, 63, 64, 104, 113, 119, 235, 328, 361, 527, 588, 618, 818, 839, 840, 850, 864, 877, 888, 932, 965, 1141, 1185, 1203, 1308, 1327], "occurr": [498, 500, 507, 510, 730, 818, 1110, 1112, 1119, 1122, 1316, 1327], "oct": 1350, "octet_length": 1348, "octob": [457, 1068, 1350], "od": [153, 830], "odbc": [44, 144, 328], "odd": 673, "odi": [676, 678, 1257], "off": [52, 53, 54, 55, 63, 64, 142, 143, 156, 233, 234, 328, 425, 744, 839, 840, 850, 862, 863, 868, 877, 932, 1032], "offer": [252, 328, 612, 818, 876, 932, 1351, 1355], "offic": [46, 328], "offset": [74, 142, 143, 148, 150, 152, 154, 156, 159, 160, 161, 213, 219, 260, 273, 304, 305, 328, 425, 426, 434, 444, 445, 447, 452, 465, 491, 534, 552, 628, 659, 677, 678, 692, 705, 818, 856, 858, 881, 889, 905, 906, 932, 1032, 1033, 1041, 1055, 1056, 1058, 1063, 1076, 1102, 1148, 1166, 1239, 1256, 1257, 1271, 1284, 1327, 1354], "offset_bi": 763, "often": [145, 182, 219, 260, 328, 361, 527, 621, 628, 818, 858, 881, 932, 965, 1141, 1342, 1355], "ok": 558, "old": [45, 257, 328, 622, 623, 818, 879, 932, 1207, 1208, 1327], "old_tabl": 1357, "older": [51, 55, 328, 932], "oldw": 698, "omit": [33, 132, 136, 147, 153, 170, 182, 249, 263, 285, 290, 328, 758, 761, 773, 774, 805, 806, 938, 1356], "onc": [142, 143, 178, 238, 262, 264, 307, 328, 546, 566, 567, 649, 700, 701, 818, 835, 908, 932, 1160, 1180, 1225, 1279, 1280, 1327, 1340], "one": [26, 43, 44, 46, 52, 57, 110, 129, 131, 132, 133, 134, 135, 142, 143, 147, 151, 152, 153, 156, 160, 175, 177, 182, 190, 198, 201, 209, 210, 217, 218, 219, 231, 235, 236, 244, 253, 260, 261, 262, 268, 269, 271, 286, 289, 295, 308, 328, 338, 372, 418, 420, 482, 483, 487, 490, 493, 495, 551, 558, 563, 581, 591, 592, 594, 596, 598, 599, 608, 627, 628, 652, 660, 673, 674, 675, 690, 713, 758, 761, 780, 798, 808, 814, 818, 836, 845, 847, 848, 853, 854, 857, 858, 864, 872, 881, 885, 886, 887, 898, 904, 909, 932, 947, 976, 981, 1026, 1096, 1106, 1107, 1165, 1172, 1177, 1201, 1212, 1231, 1252, 1253, 1254, 1269, 1292, 1308, 1327, 1342, 1343, 1345, 1349, 1350, 1357], "one_to_mani": [233, 328, 862, 932], "one_to_on": [233, 328, 862, 932], "oneormoredatatyp": [46, 170, 328], "ones": [631, 633, 635, 637, 639, 642, 644, 646, 818, 938], "onf": [692, 1271], "onli": [1, 7, 11, 16, 19, 26, 36, 43, 44, 46, 52, 56, 57, 62, 65, 97, 142, 143, 144, 147, 148, 150, 152, 154, 156, 159, 160, 161, 162, 165, 166, 167, 168, 172, 176, 182, 201, 202, 207, 219, 220, 231, 234, 235, 238, 253, 260, 262, 263, 282, 284, 285, 286, 297, 298, 314, 328, 338, 340, 342, 354, 406, 407, 420, 425, 447, 455, 457, 477, 486, 496, 566, 567, 574, 575, 591, 592, 593, 594, 595, 596, 597, 598, 599, 608, 620, 666, 676, 678, 690, 728, 744, 780, 818, 842, 845, 847, 848, 849, 858, 863, 864, 881, 882, 899, 901, 915, 932, 936, 938, 945, 946, 947, 1011, 1014, 1032, 1058, 1068, 1093, 1100, 1108, 1180, 1205, 1245, 1255, 1257, 1269, 1302, 1305, 1308, 1327, 1336, 1339, 1355, 1356, 1358], "onlin": [207, 328, 1093, 1327], "ont": [676, 678, 1255, 1257], "onto": 172, "oof": [691, 1270, 1345, 1350], "op": [26, 142, 143, 176, 257, 328, 574, 621, 818, 866, 879, 932, 1327], "opac": [328, 331, 1327, 1332], "opaqu": 915, "open": [46, 140, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 198, 328, 420, 818, 845, 932], "openoffic": 153, "openpyxl": [147, 164], "oper": [10, 46, 56, 65, 97, 106, 109, 116, 123, 129, 131, 132, 133, 134, 135, 142, 144, 192, 207, 210, 212, 218, 224, 236, 238, 245, 249, 251, 252, 253, 256, 258, 260, 263, 264, 269, 271, 280, 286, 287, 292, 295, 296, 306, 307, 328, 337, 338, 341, 372, 412, 413, 414, 415, 416, 417, 471, 472, 487, 489, 492, 494, 518, 546, 547, 548, 549, 550, 551, 558, 565, 584, 587, 589, 590, 591, 592, 594, 596, 598, 599, 602, 603, 604, 607, 608, 613, 620, 649, 652, 718, 726, 733, 734, 736, 747, 748, 752, 764, 797, 808, 818, 830, 838, 842, 844, 849, 854, 857, 862, 872, 873, 882, 886, 887, 891, 898, 901, 908, 932, 936, 976, 1015, 1020, 1021, 1022, 1023, 1024, 1025, 1083, 1084, 1093, 1103, 1105, 1132, 1160, 1161, 1162, 1163, 1164, 1165, 1179, 1191, 1192, 1205, 1225, 1231, 1267, 1302, 1307, 1308, 1309, 1327, 1346, 1354, 1355], "operand": [726, 818], "opp": 938, "oppos": 744, "opposit": [271, 328, 372, 551, 652, 818, 887, 932, 976, 1165, 1231, 1327], "opt": [290, 328], "optim": [52, 53, 54, 55, 63, 64, 154, 156, 159, 160, 161, 231, 236, 252, 256, 262, 293, 328, 835, 839, 840, 850, 868, 877, 888, 896, 905, 906, 915, 932, 1010, 1226, 1327], "optimis": [144, 238, 263, 314, 328, 932, 1180, 1228, 1327, 1358], "optimist": 20, "option": [7, 8, 9, 10, 11, 12, 13, 36, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 73, 75, 142, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 164, 169, 170, 171, 172, 175, 176, 177, 198, 214, 219, 229, 234, 244, 268, 275, 281, 292, 295, 297, 328, 385, 420, 425, 516, 574, 575, 581, 608, 629, 630, 632, 634, 636, 638, 641, 643, 645, 658, 666, 676, 678, 690, 692, 730, 800, 808, 818, 830, 839, 845, 858, 862, 863, 872, 885, 891, 898, 899, 907, 932, 938, 988, 1032, 1130, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1238, 1245, 1255, 1257, 1269, 1271, 1304, 1316, 1327, 1345, 1350], "optional_memb": [508, 818, 1120, 1327], "or_": 818, "oracl": 145, "orang": [194, 309, 310, 312, 313, 315, 316, 318, 320, 321, 328, 398, 725, 818, 910, 911, 913, 914, 916, 917, 919, 921, 922, 1350], "order": [16, 46, 52, 53, 54, 55, 57, 63, 69, 132, 142, 144, 163, 165, 166, 167, 168, 189, 193, 194, 201, 202, 203, 210, 218, 219, 233, 235, 251, 252, 253, 260, 262, 264, 265, 269, 274, 285, 286, 291, 293, 298, 328, 353, 373, 378, 397, 398, 423, 424, 483, 529, 546, 553, 559, 608, 613, 618, 628, 649, 650, 651, 660, 661, 691, 698, 699, 700, 701, 715, 724, 725, 727, 728, 730, 742, 797, 808, 818, 829, 834, 842, 847, 848, 849, 854, 857, 858, 862, 864, 872, 881, 882, 886, 890, 891, 895, 896, 932, 937, 938, 957, 977, 982, 1000, 1009, 1030, 1031, 1097, 1127, 1143, 1160, 1167, 1173, 1199, 1203, 1210, 1225, 1227, 1229, 1240, 1270, 1295, 1312, 1313, 1314, 1316, 1327, 1336, 1339, 1345, 1354, 1355, 1358], "order_bi": [608, 818], "order_by_descend": [608, 818], "order_by_nulls_last": [608, 818], "ordin": [448, 618, 818, 1059, 1203, 1327, 1356], "ordinal_dai": [433, 467], "org": [26, 47, 48, 130, 144, 145, 148, 150, 184, 185, 186, 195, 328, 582, 685, 888, 932, 940, 941, 1264], "orient": [58, 60, 104, 133, 135, 249, 328, 932, 1336], "origin": [57, 142, 143, 156, 201, 202, 210, 293, 328, 423, 424, 451, 452, 465, 483, 529, 567, 591, 608, 620, 621, 622, 623, 624, 626, 667, 673, 682, 740, 741, 818, 847, 848, 854, 896, 932, 1030, 1031, 1062, 1063, 1076, 1097, 1143, 1207, 1208, 1209, 1211, 1246, 1252, 1261, 1327], "orld": 1277, "other": [1, 26, 42, 46, 51, 64, 141, 142, 143, 144, 147, 156, 161, 165, 166, 167, 168, 202, 204, 207, 210, 233, 234, 235, 244, 245, 253, 261, 263, 266, 267, 290, 295, 297, 300, 302, 303, 326, 328, 331, 337, 341, 343, 353, 354, 407, 422, 457, 471, 472, 483, 487, 492, 494, 504, 508, 518, 525, 547, 548, 549, 550, 565, 571, 577, 587, 589, 602, 603, 607, 622, 623, 654, 661, 690, 717, 718, 723, 726, 733, 735, 737, 742, 745, 746, 747, 748, 756, 763, 782, 784, 787, 796, 800, 802, 818, 830, 840, 854, 862, 863, 864, 872, 873, 883, 884, 898, 899, 902, 903, 904, 932, 938, 947, 1014, 1029, 1068, 1083, 1084, 1085, 1093, 1103, 1105, 1120, 1132, 1139, 1161, 1162, 1163, 1164, 1179, 1191, 1192, 1207, 1208, 1310, 1318, 1326, 1327, 1332, 1342, 1355], "other_df": [233, 328], "other_lf": [862, 932], "otherwis": [44, 144, 147, 154, 159, 171, 174, 178, 214, 238, 245, 263, 266, 285, 290, 314, 328, 377, 382, 403, 407, 418, 473, 474, 475, 476, 558, 567, 578, 608, 612, 613, 615, 620, 655, 665, 668, 672, 677, 679, 684, 688, 689, 692, 703, 730, 734, 763, 766, 775, 780, 808, 818, 873, 883, 915, 932, 937, 981, 985, 1006, 1014, 1026, 1087, 1088, 1089, 1090, 1172, 1180, 1199, 1201, 1205, 1226, 1228, 1235, 1244, 1247, 1251, 1256, 1258, 1263, 1267, 1268, 1271, 1282, 1316, 1327, 1347], "our": 187, "out": [14, 20, 44, 52, 53, 54, 55, 111, 136, 161, 164, 172, 176, 210, 260, 263, 328, 364, 382, 533, 535, 665, 668, 677, 808, 854, 881, 932, 968, 985, 1147, 1149, 1244, 1247, 1256, 1353], "outcom": [608, 818], "outer": [57, 65, 297, 328, 899, 932], "outermost": 56, "outlin": 13, "output": [0, 14, 36, 43, 46, 47, 48, 49, 50, 51, 52, 189, 197, 231, 238, 242, 245, 251, 253, 262, 266, 268, 278, 291, 298, 302, 328, 340, 342, 365, 397, 398, 403, 418, 457, 537, 558, 566, 567, 578, 581, 592, 615, 622, 664, 680, 684, 724, 725, 730, 734, 735, 736, 737, 747, 748, 749, 777, 779, 780, 784, 802, 818, 830, 834, 844, 850, 868, 872, 873, 883, 885, 895, 902, 915, 932, 945, 946, 969, 1000, 1006, 1026, 1068, 1151, 1180, 1201, 1243, 1259, 1263, 1312, 1316, 1327], "output_path": [582, 888, 932], "outsid": [407, 818, 1014, 1327], "over": [138, 142, 143, 144, 147, 153, 156, 161, 172, 173, 189, 207, 230, 231, 232, 238, 261, 262, 263, 275, 291, 292, 306, 314, 328, 332, 397, 398, 417, 420, 474, 482, 566, 567, 578, 580, 581, 582, 583, 584, 592, 593, 618, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 724, 725, 753, 754, 767, 779, 780, 792, 797, 818, 834, 839, 891, 895, 907, 915, 929, 932, 938, 1000, 1025, 1088, 1093, 1180, 1214, 1215, 1217, 1221, 1312, 1327, 1355], "overflow": [399, 415, 416, 707, 719, 818, 836, 932, 1001, 1023, 1024, 1286, 1298, 1327], "overhead": [56, 97, 156, 159, 160, 161], "overlap": [667, 674, 676, 678, 1246, 1253, 1255, 1257], "overrid": [1, 46, 129, 131, 132, 133, 134, 135, 142, 144, 145, 147, 151, 152, 153, 160, 169, 170, 176, 178, 328, 932], "overridden": [46, 129, 131, 133, 135, 151, 152, 160, 178, 328, 932], "overview": [328, 818, 830, 932, 1327, 1354, 1358], "overwrit": [20, 44, 45, 129, 131, 132, 133, 135, 139, 142, 143, 151, 152, 156, 160, 186, 297, 328, 339, 717, 818, 899, 932], "overwrite_schema": [45, 328], "ow": 697, "own": [808, 1308, 1327, 1358], "p": [59, 252, 328, 612, 800, 818, 876, 932, 938, 1256, 1258, 1340], "p13dt14h0": 457, "p1dt42": 457, "pa": [45, 129, 162, 328, 797], "pa_tabl": 797, "pacif": [426, 1033], "pack": [249, 328], "packag": [38, 39, 40, 144, 328, 332, 425, 744, 936, 1032], "pad": [686, 687, 712, 1265, 1266, 1291], "pad_end": [687, 1266], "pad_start": [686, 712, 1265, 1291], "page": [51, 55, 148, 154, 159, 161, 328, 818, 830, 932, 1327, 1354], "pair": [129, 131, 132, 133, 135, 151, 152, 160, 257, 328, 879, 932, 1358], "pairwis": [195, 328], "panda": [44, 130, 134, 139, 164, 210, 219, 287, 293, 295, 328, 444, 445, 723, 797, 818, 854, 858, 896, 898, 932, 1055, 1056, 1309, 1310, 1327, 1337, 1339, 1355], "pandas_df": 1355, "pane": [46, 328], "panic": 112, "pap": 1258, "papa": 679, "papai": [679, 1258], "papaya": [679, 692, 703, 1258, 1271, 1282], "parallel": [63, 65, 138, 145, 154, 161, 219, 234, 236, 252, 267, 303, 328, 417, 530, 730, 808, 818, 830, 858, 862, 863, 884, 903, 915, 932, 1025, 1144, 1316, 1327], "parallelis": [238, 314, 328, 1180, 1327], "parallelstrategi": [154, 161], "param": [46, 129, 131, 132, 133, 135, 142, 143, 151, 152, 156, 160, 171, 172, 176, 261, 328, 932], "paramet": [2, 3, 5, 6, 7, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 73, 74, 75, 76, 84, 88, 98, 104, 113, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 186, 187, 189, 190, 191, 195, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 223, 224, 229, 231, 232, 233, 234, 235, 237, 238, 242, 244, 245, 248, 249, 251, 252, 253, 255, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 307, 311, 313, 314, 320, 322, 328, 337, 339, 340, 341, 342, 343, 353, 360, 361, 364, 365, 372, 373, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 397, 398, 399, 400, 404, 407, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 425, 427, 429, 430, 435, 447, 450, 451, 452, 453, 454, 456, 457, 465, 468, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 500, 502, 503, 504, 508, 516, 518, 520, 525, 526, 527, 528, 530, 533, 534, 535, 536, 537, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 565, 566, 567, 574, 575, 581, 582, 583, 587, 589, 592, 593, 594, 595, 596, 597, 602, 603, 607, 608, 609, 612, 613, 615, 616, 618, 620, 621, 622, 623, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 654, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 712, 713, 715, 717, 718, 720, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 834, 836, 837, 839, 840, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 856, 857, 858, 859, 862, 863, 864, 867, 868, 872, 873, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 908, 912, 914, 915, 921, 923, 932, 936, 937, 938, 942, 944, 945, 946, 947, 957, 964, 965, 968, 969, 976, 977, 981, 982, 984, 985, 986, 987, 988, 990, 1000, 1001, 1002, 1007, 1013, 1014, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1034, 1036, 1037, 1042, 1058, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1076, 1079, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1101, 1102, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1127, 1130, 1134, 1139, 1140, 1141, 1142, 1144, 1147, 1148, 1149, 1150, 1151, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1170, 1171, 1172, 1173, 1180, 1192, 1196, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1231, 1234, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1265, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1288, 1291, 1292, 1295, 1299, 1302, 1303, 1304, 1305, 1306, 1308, 1309, 1312, 1313, 1316, 1317, 1318, 1327, 1336, 1337, 1338, 1339, 1340, 1342, 1347, 1350, 1355], "parameteris": 144, "parametr": 830, "paramount": [868, 932], "parent": [46, 76, 212, 328], "parenthes": 24, "parquet": [51, 55, 154, 155, 161, 328, 830, 932], "parquetcompress": [51, 328], "pars": [43, 52, 141, 142, 143, 145, 147, 152, 153, 154, 156, 159, 160, 161, 189, 218, 266, 267, 271, 274, 291, 302, 303, 307, 328, 398, 407, 504, 608, 622, 623, 661, 681, 690, 706, 707, 717, 725, 735, 737, 742, 745, 746, 747, 748, 756, 769, 782, 784, 787, 796, 798, 800, 802, 808, 818, 834, 857, 883, 884, 887, 890, 895, 902, 903, 908, 932, 1014, 1115, 1207, 1208, 1231, 1260, 1285, 1286, 1327, 1336], "parseerror": [707, 1286], "parser": [142, 147], "part": [129, 147, 182, 187, 285, 290, 328, 608, 674, 694, 695, 818, 850, 877, 888, 904, 932, 942, 1253, 1273, 1274, 1351], "parti": [566, 818], "partial": [132, 142, 156, 328, 932], "particip": [46, 328], "particular": [142, 147, 148, 150, 189, 205, 291, 328, 397, 398, 724, 725, 818, 834, 895, 932, 1000, 1086, 1312, 1327], "partit": [51, 145, 154, 157, 159, 161, 162, 232, 251, 328, 608, 818], "partition_bi": [51, 143, 232, 328, 608, 818], "partition_chunk_size_byt": [51, 328], "partition_col": [51, 145, 328], "partition_df": 143, "partition_num": 145, "partition_on": 145, "partition_rang": 145, "partitioned_object": [51, 328], "pass": [38, 39, 40, 42, 44, 45, 46, 51, 57, 104, 131, 139, 141, 144, 145, 147, 154, 156, 159, 162, 165, 167, 170, 172, 174, 176, 189, 195, 199, 218, 219, 221, 234, 237, 251, 252, 253, 257, 260, 266, 271, 274, 279, 287, 290, 291, 298, 302, 307, 328, 372, 398, 425, 435, 447, 451, 457, 480, 501, 551, 566, 567, 582, 608, 612, 622, 623, 628, 652, 661, 690, 697, 698, 699, 725, 734, 742, 744, 769, 800, 808, 814, 818, 834, 846, 857, 858, 860, 863, 868, 876, 879, 881, 883, 887, 888, 890, 895, 902, 907, 908, 915, 932, 936, 937, 976, 1032, 1042, 1062, 1068, 1094, 1109, 1134, 1165, 1180, 1207, 1208, 1231, 1269, 1276, 1277, 1278, 1299, 1309, 1327, 1340, 1355], "pass_nam": [567, 818], "pass_name_to_appli": [818, 936], "password": [142, 145, 148, 150], "past": [42, 328, 868, 932], "pat": [677, 1256], "patch": 75, "path": [9, 12, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 198, 268, 328, 420, 581, 582, 585, 651, 818, 845, 885, 888, 932, 936, 1229, 1261, 1327, 1358], "pathlib": [41, 43, 47, 48, 51, 156, 328], "pattern": [65, 100, 142, 143, 147, 156, 159, 160, 161, 231, 328, 400, 404, 576, 665, 666, 667, 670, 673, 674, 675, 676, 677, 678, 688, 689, 690, 696, 915, 938, 1002, 1007, 1226, 1228, 1244, 1245, 1246, 1249, 1252, 1253, 1254, 1255, 1256, 1257, 1267, 1268, 1269, 1275, 1327, 1350], "paya": 703, "pct": 172, "pct_chang": [818, 1327], "pd": [130, 134, 723, 797, 818, 1309, 1310, 1327, 1337, 1355], "pd_df": 134, "pd_frame": 797, "pd_seri": 134, "pdsh": [138, 143], "pea": 679, "peak": [262, 328, 610, 611, 818, 1197, 1198, 1327], "peak_max": [818, 1327], "peak_min": [818, 1327], "pear": [679, 692, 703, 1258, 1271, 1282], "pearson": [195, 328, 516, 658, 749, 818, 1130, 1238, 1327], "penalti": [702, 704, 705, 1281, 1283, 1284], "per": [20, 43, 46, 52, 147, 170, 172, 189, 217, 249, 250, 253, 267, 274, 291, 303, 317, 319, 320, 328, 364, 398, 530, 533, 535, 566, 567, 591, 592, 594, 596, 598, 599, 661, 725, 730, 742, 818, 834, 884, 890, 895, 903, 918, 920, 921, 932, 936, 968, 1144, 1147, 1149, 1316, 1327], "percent": [609, 818, 1196, 1327], "percentag": [169, 172, 176, 609, 818, 1196, 1327], "percentil": [197, 328, 844, 932, 1027, 1327], "perform": [44, 51, 53, 55, 57, 102, 107, 109, 114, 116, 123, 130, 142, 143, 144, 148, 152, 154, 156, 159, 160, 161, 186, 210, 218, 219, 233, 234, 235, 238, 256, 260, 262, 263, 286, 314, 328, 388, 393, 396, 402, 403, 487, 558, 566, 567, 608, 628, 666, 676, 678, 683, 684, 690, 702, 704, 705, 818, 854, 858, 862, 863, 864, 881, 890, 905, 906, 932, 991, 996, 999, 1005, 1006, 1180, 1245, 1255, 1257, 1262, 1263, 1269, 1281, 1283, 1284, 1308, 1327], "perhap": [292, 328], "period": [142, 143, 156, 219, 260, 328, 452, 465, 473, 475, 476, 609, 628, 758, 759, 761, 762, 805, 806, 818, 858, 881, 932, 1063, 1076, 1087, 1089, 1090, 1196, 1327], "persist": 1342, "phase": [44, 296, 328], "philadelphia": [688, 689], "phone": [710, 1289], "physic": [56, 69, 97, 142, 143, 234, 253, 328, 723, 818, 835, 862, 863, 932, 1008, 1310, 1327], "pi": [16, 419, 818, 1016, 1018, 1236, 1300, 1327, 1348, 1352], "pick": [173, 808], "pickl": [420, 818, 845, 932], "pip": [425, 744, 1032], "pipe": [328, 818, 932], "pipelin": [147, 290, 328], "pitfal": 114, "pivot": [296, 328, 938], "pivot_long": [295, 328, 898, 932], "pivot_wid": [253, 328], "pivotagg": [253, 328], "pixel": [46, 328], "pk": [470, 818, 1082, 1327], "pl": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 75, 84, 88, 96, 97, 101, 104, 105, 106, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 156, 157, 158, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 178, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 937, 938, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327, 1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1358], "pl_frame": 797, "place": [16, 17, 43, 52, 182, 200, 207, 223, 224, 253, 258, 263, 274, 300, 328, 332, 353, 365, 373, 537, 553, 660, 661, 742, 818, 890, 932, 947, 957, 969, 977, 1093, 1151, 1167, 1204, 1240, 1327], "placehold": 768, "plai": [18, 748], "plain": [850, 932], "plan": [234, 236, 328, 420, 818, 835, 839, 845, 850, 862, 863, 885, 888, 932, 1357], "plane": [740, 741], "platform": 164, "ple": 1350, "pleas": [134, 144, 145, 210, 219, 244, 328, 332, 474, 750, 763, 818, 854, 858, 872, 932, 1088, 1327], "plenti": 938, "plot": [328, 877, 888, 932, 1327], "plu": [418, 563, 818, 1026, 1177, 1201, 1327, 1349], "plugin": [0, 818, 830], "plugin_path": 936, "point": [2, 3, 4, 5, 6, 7, 16, 17, 37, 38, 39, 40, 43, 45, 46, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 77, 78, 79, 139, 146, 152, 154, 156, 157, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 201, 208, 219, 235, 236, 275, 285, 290, 297, 328, 331, 332, 406, 417, 418, 423, 452, 453, 481, 486, 487, 498, 511, 512, 546, 567, 615, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 647, 649, 746, 777, 818, 839, 840, 847, 850, 852, 858, 864, 868, 879, 891, 899, 932, 1009, 1011, 1025, 1026, 1030, 1063, 1064, 1095, 1100, 1110, 1160, 1201, 1213, 1216, 1218, 1219, 1223, 1225, 1306, 1311, 1327, 1332, 1355], "poison": [600, 601, 818, 1189, 1190, 1327], "pola": 328, "polar": [1, 328, 331, 332, 817, 818, 824, 830, 932, 936, 937, 938, 1327, 1331, 1332, 1354, 1355, 1357], "polars_df": 1355, "polars_file_cache_ttl": [152, 156, 159, 160], "polars_hypothesis_profil": [175, 177], "polars_max_thread": 178, "polars_seri": 1355, "polars_verbos": [839, 932], "polarsdatafram": 186, "polarsdataset": [290, 328], "polarsdatatyp": [66, 76, 84, 142, 143, 156, 169, 170, 171, 172, 173, 176, 190, 238, 285, 290, 328, 385, 399, 477, 566, 567, 622, 623, 681, 765, 778, 779, 780, 790, 793, 809, 814, 818, 836, 932, 938, 988, 1001, 1180, 1207, 1208, 1260, 1327], "polarsintegertyp": [739, 773, 774], "polarstemporaltyp": [702, 1281], "polarstyp": 65, "pool": [20, 64, 178, 179, 840, 932], "poor": 144, "pop2": [234, 328, 863, 932], "popul": [234, 328, 863, 932], "port": [44, 142, 144, 145, 148, 150, 328], "portion": 1350, "pos_a": 1350, "posit": [46, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 187, 199, 206, 218, 251, 266, 267, 271, 274, 294, 302, 303, 307, 328, 372, 473, 475, 476, 477, 551, 608, 613, 615, 652, 661, 675, 688, 689, 707, 717, 740, 741, 742, 745, 746, 747, 748, 765, 796, 800, 814, 818, 846, 851, 857, 883, 884, 887, 890, 897, 902, 903, 908, 932, 938, 976, 1087, 1089, 1090, 1165, 1199, 1201, 1231, 1254, 1286, 1327, 1356], "position": 1327, "possibl": [46, 51, 55, 104, 106, 131, 132, 135, 142, 147, 169, 172, 176, 218, 231, 238, 262, 293, 314, 328, 564, 567, 578, 629, 695, 729, 818, 839, 857, 890, 896, 932, 1180, 1213, 1274, 1327], "post": [57, 75], "postgresql": [44, 144, 145, 328, 608, 818, 1353], "potenti": [114, 116, 156, 159, 160, 231, 261, 263, 328, 591, 688, 689, 842, 844, 849, 882, 901, 932, 936, 1267, 1268], "pow": [818, 1327, 1348], "pow_n": 59, "power": [798, 1199, 1327, 1349], "powersofn": 59, "pre": [558, 567, 615, 790, 793, 809, 818, 1201, 1327], "preced": [172, 938], "precis": [16, 17, 43, 46, 52, 73, 144, 231, 262, 263, 282, 285, 290, 328, 427, 706, 777, 932, 938, 1034, 1285], "predefin": [253, 328], "predic": [45, 52, 53, 54, 55, 63, 64, 156, 159, 160, 161, 162, 190, 210, 229, 234, 235, 261, 328, 399, 483, 732, 767, 808, 818, 839, 840, 850, 854, 863, 864, 868, 877, 879, 888, 905, 906, 932, 1097, 1226, 1228, 1327], "predicate_pushdown": [52, 53, 54, 55, 63, 64, 839, 840, 850, 868, 877, 888, 932], "predict": [256, 298, 328], "prefer": [142, 143, 147, 156, 177, 189, 207, 231, 238, 261, 262, 291, 314, 328, 397, 398, 477, 567, 724, 725, 818, 834, 895, 932, 1000, 1093, 1180, 1312, 1327, 1337, 1358], "prefilt": 161, "prefix": [45, 142, 143, 156, 182, 328, 339, 387, 404, 457, 576, 592, 595, 596, 598, 599, 696, 699, 700, 712, 818, 938, 990, 1007, 1275, 1279, 1291], "prefix_": 595, "prefix_a": 595, "prefix_b": 595, "prefix_field": [593, 597], "presenc": [766, 775, 938], "present": [132, 172, 214, 328, 508, 582, 698, 699, 818, 888, 932], "preserv": [201, 202, 210, 218, 233, 235, 238, 286, 287, 328, 423, 424, 425, 444, 445, 483, 529, 608, 622, 655, 672, 818, 847, 848, 854, 862, 864, 932, 1030, 1031, 1032, 1097, 1143, 1207, 1235, 1251, 1309, 1327], "pressur": [55, 142, 143, 152, 154, 156, 160, 161, 653, 818, 932, 1232, 1327], "presum": [566, 818], "prev_pow2": 59, "prevent": [286, 328, 339, 415, 416, 591, 719, 818, 932, 1023, 1024, 1298, 1327], "preview": [217, 328], "previou": [59, 182, 328, 331, 425, 591, 592, 594, 596, 598, 599, 609, 715, 818, 1032, 1196, 1327, 1332], "previous": [8, 9], "price": [328, 331, 1358], "primari": [147, 1355, 1358], "primarili": 1, "primit": [45, 328, 508, 818], "print": [15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 31, 33, 34, 143, 164, 165, 167, 203, 217, 218, 232, 236, 284, 306, 328, 501, 583, 758, 761, 818, 839, 860, 932, 938, 1120, 1305, 1327, 1358], "prior": [134, 328, 331, 1327, 1332], "prioriti": 173, "probabl": [470, 615, 818, 1082, 1201, 1327], "process": [20, 43, 52, 53, 54, 55, 63, 64, 142, 143, 144, 156, 178, 262, 328, 839, 840, 932], "process_index": [285, 328], "produc": [8, 9, 172, 176, 190, 233, 328, 361, 399, 527, 578, 777, 779, 818, 862, 868, 932, 965, 1141], "product": [57, 195, 233, 328, 415, 422, 818, 862, 932, 1023, 1029, 1327], "profil": [38, 175, 177, 839, 932], "profile_nam": 38, "programmat": [197, 328, 844, 932], "progress": [73, 75, 79], "project": [52, 53, 54, 55, 63, 64, 156, 158, 159, 160, 161, 660, 661, 818, 839, 840, 850, 868, 877, 879, 888, 932], "projection_pushdown": [52, 53, 54, 55, 63, 64, 839, 840, 850, 868, 877, 888, 932], "prompt": 136, "propag": [365, 472, 537, 600, 601, 603, 664, 680, 747, 748, 818, 969, 1084, 1151, 1189, 1190, 1192, 1243, 1259, 1327], "propagate_nan": 749, "proper": [235, 328, 864, 932], "properti": [46, 186, 193, 194, 203, 211, 222, 265, 270, 301, 305, 328, 331, 332, 841, 842, 849, 882, 901, 906, 932, 937, 938, 1081, 1099, 1188, 1230, 1327, 1332, 1358], "proport": [730, 818, 1316, 1327], "protocol": [45, 130, 144, 145, 186, 328], "prototyp": 814, "provid": [7, 37, 38, 39, 40, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 142, 143, 145, 146, 147, 152, 154, 156, 157, 158, 159, 160, 161, 172, 176, 210, 214, 229, 275, 285, 328, 331, 382, 383, 457, 477, 498, 558, 566, 567, 668, 669, 673, 681, 682, 698, 699, 700, 701, 769, 800, 818, 830, 839, 854, 891, 907, 929, 932, 985, 986, 1068, 1110, 1129, 1180, 1247, 1248, 1252, 1260, 1261, 1306, 1327, 1340, 1347, 1350, 1355, 1358], "provis": 831, "prune": [154, 159, 161, 868, 932], "pt0": 457, "public": [145, 328, 818, 830, 932, 1327, 1354], "pulp": 1336, "pure": [46, 328], "purpos": [590, 818, 932], "push": [156, 159, 160, 161, 162, 190, 328, 399, 818], "pushdown": [52, 53, 54, 55, 63, 64, 839, 840, 850, 868, 877, 879, 888, 905, 906, 932, 1226, 1228, 1327], "put": [43, 52, 75, 328, 332, 932], "pwd": 144, "py": 158, "pyarrow": [45, 51, 129, 134, 142, 145, 146, 148, 150, 154, 157, 162, 164, 280, 286, 287, 328, 797, 830, 1302, 1308, 1309, 1327, 1337, 1339, 1355], "pyarrow_opt": [51, 146, 154, 157, 328], "pyarrow_t": 1355, "pycapsul": [185, 941], "pycapsuleinterfac": [185, 941], "pydant": 164, "pyiceberg": [158, 164], "pyodbc": [44, 328], "pyodbc_uri": [44, 328], "pyspark": 178, "pytest": [165, 167], "python": [0, 38, 39, 40, 47, 48, 75, 86, 100, 130, 142, 143, 148, 150, 164, 165, 167, 186, 231, 238, 262, 263, 282, 314, 328, 420, 425, 429, 487, 566, 567, 675, 744, 758, 759, 761, 762, 805, 806, 808, 818, 824, 845, 915, 932, 937, 1032, 1036, 1046, 1047, 1048, 1052, 1180, 1254, 1307, 1327, 1331, 1354], "pythondatatyp": [66, 84, 190, 328, 814, 836, 932, 938], "pythonliter": [948, 991, 996, 999, 1098, 1131, 1181, 1182, 1183, 1184, 1226, 1327], "pytorch": [290, 328, 1311, 1327], "q": [263, 328, 800, 1327, 1332, 1340], "q1": [46, 328], "q2": [46, 328], "q3": [46, 328], "q4": [46, 328], "qcut": [418, 818, 1026, 1327], "qhoo": 1358, "qmark": 144, "qqr": 938, "quad": [474, 818, 1088, 1327], "qualifi": [44, 328], "quantifi": [674, 1253], "quantil": [328, 615, 638, 639, 818, 932, 1201, 1218, 1327, 1344], "quantile_cont": 1348, "quantile_disc": 1348, "quarter": [219, 234, 260, 298, 328, 447, 452, 465, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076, 1351], "queri": [52, 53, 54, 55, 63, 64, 144, 145, 148, 156, 159, 160, 161, 207, 236, 252, 275, 328, 558, 566, 567, 682, 797, 818, 839, 840, 850, 877, 888, 891, 905, 906, 907, 915, 924, 932, 1093, 1180, 1261, 1327, 1336, 1337, 1339, 1343, 1354, 1356, 1357], "quick": [814, 1027, 1327, 1358], "quit": [234, 328, 863, 932], "quot": [43, 44, 52, 142, 143, 145, 156, 328, 710, 932, 1289], "quota_project_id": 40, "quote_char": [43, 52, 142, 143, 156, 328, 932], "quote_plu": 145, "quote_styl": [43, 52, 328, 932], "quotes_titl": 710, "quotient": 1349, "r": [142, 143, 156, 328, 573, 612, 667, 672, 673, 674, 675, 688, 689, 818, 938, 1246, 1251, 1252, 1253, 1254, 1267, 1268, 1282, 1340, 1350], "r1": 65, "r2": 65, "r3": 65, "rab": [665, 691, 1244, 1270, 1345], "rad": 1352, "radian": [419, 740, 818, 1348], "radix": [707, 1286], "rai": [740, 741], "raini": [688, 689, 1267, 1268], "rais": [1, 21, 22, 26, 45, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 142, 143, 147, 153, 154, 156, 161, 165, 167, 186, 190, 214, 234, 253, 261, 286, 328, 364, 382, 399, 425, 450, 451, 533, 535, 578, 613, 615, 623, 665, 668, 677, 702, 704, 705, 707, 709, 760, 778, 818, 863, 907, 932, 968, 985, 1032, 1061, 1062, 1147, 1149, 1199, 1201, 1208, 1244, 1247, 1256, 1281, 1283, 1284, 1286, 1288, 1308, 1327], "raise_if_empti": [142, 143, 147, 153, 156], "raise_if_undetermin": 578, "raise_on_fail": 907, "raker": 139, "ram": [52, 53, 54, 55, 932], "ran": [818, 936], "random": [46, 47, 148, 163, 170, 220, 264, 328, 496, 546, 618, 649, 654, 730, 818, 830, 1108, 1160, 1203, 1225, 1234, 1316, 1327], "randomli": 171, "rang": [23, 46, 144, 145, 197, 205, 219, 232, 328, 344, 419, 425, 433, 443, 448, 449, 450, 452, 465, 466, 502, 739, 744, 747, 757, 758, 759, 760, 761, 762, 773, 774, 777, 804, 805, 806, 818, 844, 858, 932, 938, 1027, 1032, 1040, 1054, 1059, 1060, 1061, 1063, 1076, 1077, 1086, 1196, 1327, 1350], "rank": [353, 530, 742, 749, 764, 818, 957, 1144, 1327], "rankmethod": [618, 818, 1203, 1327], "rare": [426, 1033], "rather": [234, 328, 489, 566, 583, 615, 627, 712, 818, 863, 932, 1201, 1212, 1291, 1327], "raw": 145, "raw_output": [582, 888, 932], "re": [214, 219, 230, 293, 295, 328, 444, 445, 454, 457, 858, 896, 898, 932, 1055, 1056, 1065, 1068, 1355], "reach": [686, 687, 712, 1265, 1266, 1291], "read": [7, 42, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 198, 207, 328, 331, 420, 489, 808, 818, 845, 932, 1093, 1327, 1332], "read_arrow_batches_from_odbc": 144, "read_clipboard": [42, 328], "read_csv": [141, 147, 156], "read_csv_batch": 138, "read_databas": 145, "read_database_uri": 144, "read_excel": 153, "read_ndjson": 151, "read_od": 147, "read_opt": 147, "read_parquet": 161, "read_tabl": 154, "readabl": 814, "reader": [51, 55, 138, 142, 143, 148, 150, 154, 328, 932], "readi": 925, "readthedoc": [46, 328], "real": [674, 1253], "realli": [417, 666, 690, 818, 1025, 1245, 1269, 1327], "realloc": [152, 156, 159, 160, 207, 328, 1093, 1327], "rearrang": [238, 328], "reason": [178, 197, 328, 558, 566, 818, 844, 932], "receiv": [57, 144, 156, 238, 252, 314, 328, 567, 612, 818, 876, 932, 1358], "recent": [165, 166, 167, 168, 286, 328, 609, 623, 818, 1196, 1208, 1308, 1327, 1339, 1355], "rechunk": [65, 129, 134, 142, 143, 146, 148, 150, 152, 154, 156, 157, 159, 160, 161, 207, 328, 818, 1012, 1093, 1104, 1186, 1327], "recognis": [21, 22, 26, 938], "recommend": [46, 178, 197, 231, 236, 252, 328, 558, 835, 844, 932, 938], "record": [43, 48, 52, 139, 150, 162, 328, 932], "record_batch": [232, 328], "recordbatch": [129, 232, 328, 797, 1337, 1339, 1355], "recurs": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "red": [56, 96, 97, 314, 730, 818, 915, 1316, 1327], "redempt": 1336, "redshift": 145, "reduc": [55, 142, 143, 152, 154, 156, 159, 160, 161, 262, 315, 316, 318, 321, 328, 653, 754, 767, 818, 916, 917, 919, 922, 932, 1182, 1200, 1232, 1298, 1327], "reduct": [212, 328, 567, 818], "ref": [673, 675, 1252, 1254], "refer": [0, 38, 46, 100, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 195, 198, 328, 332, 420, 454, 457, 618, 673, 688, 689, 702, 704, 705, 709, 818, 845, 932, 1065, 1068, 1203, 1267, 1268, 1281, 1283, 1284, 1288, 1327], "referenc": [46, 328, 566, 688, 689, 715, 818, 1267, 1268, 1337, 1355], "reg": 139, "regard": [142, 749], "regardless": [134, 189, 218, 234, 291, 328, 398, 430, 682, 725, 808, 818, 834, 863, 895, 932, 1037, 1261], "regex": [98, 477, 573, 574, 576, 665, 667, 673, 674, 675, 677, 688, 689, 713, 765, 818, 938, 1244, 1246, 1252, 1253, 1254, 1256, 1267, 1268], "regexp_lik": 1348, "region": [46, 158, 328], "region_nam": 38, "regist": [1, 58, 59, 60, 61, 175, 177, 275, 328, 818, 891, 932, 936, 1336, 1337, 1339, 1340, 1341, 1342, 1355, 1357], "register_dataframe_namespac": [1, 59, 60, 61], "register_expr_namespac": [1, 58, 60, 61], "register_glob": [1338, 1340, 1342, 1355], "register_lazyframe_namespac": [1, 58, 59, 61], "register_mani": [1338, 1339, 1342], "register_plugin": 818, "register_plugin_funct": [818, 936], "register_series_namespac": [1, 58, 59, 60], "registr": [275, 328, 797, 830, 891, 932, 1342, 1355], "regrid": [502, 818], "regular": [137, 231, 261, 262, 298, 305, 328, 477, 665, 666, 667, 671, 673, 674, 675, 676, 677, 678, 688, 689, 690, 744, 765, 814, 818, 906, 932, 938, 1244, 1245, 1246, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1267, 1268, 1269, 1353], "reinterpret": [818, 1327], "rel": [46, 145, 146, 157, 158, 165, 166, 167, 168, 328, 447, 473, 475, 476, 730, 818, 1058, 1087, 1089, 1090, 1316, 1327], "relat": [144, 182, 688, 689, 938, 1267, 1268, 1343], "releas": [64, 233, 328, 567, 818, 840, 862, 932, 1358], "release_year": 1336, "relev": 65, "reli": [233, 328, 862, 932], "reliabl": [96, 97], "remain": [142, 143, 156, 201, 202, 205, 210, 253, 328, 423, 424, 483, 529, 622, 694, 695, 818, 847, 848, 854, 868, 932, 1030, 1031, 1086, 1097, 1143, 1207, 1273, 1274, 1327, 1342], "remaind": [385, 695, 988, 1274, 1349], "remap": 99, "remot": [142, 143, 148, 150], "remov": [10, 142, 143, 156, 186, 199, 283, 328, 477, 592, 697, 698, 699, 700, 701, 765, 818, 846, 932, 1276, 1277, 1278, 1279, 1280, 1303, 1327, 1357], "removes_pronoun": 690, "renam": [1, 132, 142, 143, 179, 218, 266, 267, 302, 303, 307, 309, 328, 339, 489, 584, 585, 591, 592, 593, 594, 596, 598, 599, 715, 717, 796, 800, 818, 857, 883, 884, 902, 903, 908, 910, 932, 944, 1256, 1295, 1304, 1327, 1355], "rename_field": [694, 695, 1273, 1274], "render": [582, 888, 932], "render_as_str": 144, "reoconstruct": [263, 328], "repeat": [148, 159, 619, 621, 790, 809, 818], "repeat_bi": 818, "replac": [44, 45, 142, 143, 156, 208, 209, 258, 292, 295, 302, 303, 328, 331, 429, 451, 481, 566, 567, 623, 689, 690, 705, 818, 852, 898, 902, 903, 932, 1036, 1062, 1095, 1208, 1226, 1228, 1268, 1269, 1284, 1327, 1332, 1348], "replace_al": [623, 688, 818, 1207, 1208, 1267, 1327], "replace_column": 328, "replace_strict": [622, 818, 1207, 1327], "replace_time_zon": [426, 432, 434, 1038, 1039, 1066], "replace_with": [690, 1269], "replic": [723, 818, 1310, 1327], "report": [144, 685, 1264], "repr": [136, 400, 404, 457, 1002, 1007, 1068], "repres": [43, 46, 52, 71, 72, 74, 85, 89, 94, 129, 131, 133, 134, 135, 144, 253, 275, 276, 285, 286, 299, 306, 328, 403, 487, 511, 512, 554, 560, 566, 663, 679, 684, 688, 689, 692, 703, 731, 734, 751, 763, 765, 778, 779, 780, 789, 794, 795, 799, 807, 814, 818, 891, 892, 900, 932, 938, 1006, 1226, 1242, 1258, 1263, 1267, 1268, 1271, 1282, 1308, 1317, 1327, 1355], "represent": [16, 49, 50, 71, 72, 74, 89, 136, 268, 284, 328, 400, 402, 403, 404, 428, 433, 436, 438, 439, 440, 441, 442, 443, 446, 448, 449, 453, 466, 467, 469, 581, 723, 818, 850, 866, 885, 932, 1002, 1005, 1006, 1007, 1008, 1035, 1040, 1043, 1044, 1045, 1049, 1050, 1051, 1053, 1054, 1057, 1059, 1060, 1064, 1077, 1078, 1080, 1305, 1310, 1327, 1346], "request": 40, "requested_schema": [185, 941], "requir": [1, 38, 39, 40, 45, 46, 57, 134, 144, 145, 165, 166, 167, 168, 195, 201, 261, 285, 286, 287, 290, 328, 378, 400, 404, 473, 475, 476, 559, 567, 608, 631, 633, 635, 637, 639, 642, 644, 646, 653, 702, 704, 705, 727, 793, 818, 842, 847, 848, 849, 890, 901, 932, 982, 1085, 1087, 1089, 1090, 1173, 1232, 1267, 1281, 1283, 1284, 1308, 1309, 1313, 1327], "require_al": 938, "rerais": [64, 840, 932], "rerun": [207, 328, 1093, 1327], "resampl": [219, 328, 858, 932], "reset": [10, 182], "reset_index": [134, 219, 328, 858, 932], "reshap": [253, 286, 328, 531, 746, 818, 1145, 1327], "resolv": [429, 558, 841, 842, 849, 882, 901, 932], "resourc": [907, 936], "respect": [46, 142, 156, 328, 666, 676, 678, 690, 938, 1245, 1255, 1257, 1269, 1311, 1327], "respons": [145, 245, 328, 873, 932], "rest": [710, 1289], "restor": [182, 328, 331, 1327, 1332], "restore_default": 182, "restrict": [36, 695, 1274], "result": [19, 43, 49, 50, 51, 52, 53, 54, 55, 57, 65, 133, 134, 135, 144, 145, 147, 156, 159, 161, 162, 176, 207, 210, 219, 220, 233, 234, 235, 249, 253, 260, 263, 268, 269, 271, 285, 286, 287, 298, 305, 307, 313, 328, 425, 452, 454, 457, 465, 473, 474, 475, 476, 480, 487, 496, 504, 516, 557, 558, 566, 567, 581, 608, 613, 615, 622, 623, 624, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 651, 652, 672, 689, 693, 694, 705, 726, 730, 753, 754, 758, 760, 761, 762, 763, 778, 779, 790, 793, 794, 795, 797, 809, 818, 835, 839, 844, 854, 858, 862, 863, 864, 868, 877, 881, 885, 886, 887, 906, 908, 914, 925, 926, 932, 938, 947, 1063, 1065, 1068, 1076, 1087, 1089, 1090, 1093, 1094, 1108, 1115, 1130, 1171, 1180, 1199, 1201, 1207, 1208, 1209, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1229, 1231, 1251, 1272, 1273, 1284, 1308, 1309, 1316, 1327, 1337, 1343, 1355, 1356, 1358], "resultset": 144, "retri": [7, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 159, 160, 161, 328, 932], "retriev": [2, 3, 7, 214, 285, 328, 358, 359, 523, 524, 713, 789, 962, 963, 1137, 1138, 1292, 1306, 1327, 1343], "return": [1, 7, 11, 12, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 107, 110, 118, 126, 129, 131, 132, 133, 134, 135, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 178, 179, 184, 187, 189, 191, 194, 195, 196, 200, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 221, 222, 223, 227, 229, 230, 231, 232, 233, 236, 237, 238, 240, 242, 247, 248, 249, 251, 252, 253, 257, 260, 261, 262, 263, 264, 268, 275, 278, 279, 285, 286, 287, 290, 291, 292, 293, 298, 301, 302, 303, 309, 311, 313, 314, 317, 322, 328, 340, 342, 345, 346, 347, 348, 349, 350, 353, 354, 358, 359, 360, 362, 364, 365, 376, 381, 382, 383, 384, 385, 386, 387, 397, 398, 402, 403, 408, 409, 410, 411, 412, 418, 419, 425, 426, 428, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 474, 479, 487, 490, 491, 493, 497, 498, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 519, 520, 523, 524, 526, 531, 533, 535, 536, 537, 539, 546, 556, 557, 564, 566, 567, 579, 581, 582, 583, 588, 612, 615, 617, 621, 622, 623, 624, 626, 627, 649, 650, 655, 656, 657, 664, 665, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 691, 692, 693, 694, 695, 703, 707, 712, 720, 721, 722, 724, 725, 726, 728, 729, 730, 733, 734, 739, 740, 741, 742, 743, 744, 750, 752, 757, 758, 759, 760, 761, 762, 763, 766, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 790, 793, 796, 797, 800, 803, 804, 805, 806, 808, 809, 818, 834, 837, 839, 840, 842, 843, 844, 849, 850, 856, 858, 859, 862, 866, 867, 868, 876, 877, 879, 881, 885, 888, 894, 895, 896, 901, 902, 903, 910, 912, 914, 918, 923, 925, 932, 936, 937, 938, 940, 942, 945, 946, 947, 955, 956, 958, 959, 960, 961, 962, 963, 964, 966, 968, 969, 980, 982, 984, 985, 986, 988, 989, 1000, 1004, 1005, 1006, 1013, 1019, 1020, 1026, 1027, 1032, 1033, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1063, 1064, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1086, 1088, 1092, 1093, 1098, 1102, 1109, 1110, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1145, 1147, 1149, 1150, 1151, 1153, 1160, 1170, 1171, 1178, 1180, 1185, 1194, 1201, 1207, 1208, 1209, 1210, 1211, 1212, 1225, 1227, 1235, 1243, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1270, 1271, 1272, 1273, 1274, 1282, 1286, 1291, 1299, 1302, 1309, 1312, 1314, 1315, 1316, 1318, 1327, 1336, 1337, 1341, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1353, 1355, 1356, 1357, 1358], "return_as_str": [217, 328, 583], "return_dtyp": [46, 238, 328, 566, 567, 622, 623, 733, 779, 780, 818, 1180, 1207, 1208, 1327], "return_typ": [285, 290, 328], "returns_scalar": [566, 567, 780, 818, 936], "reus": [63, 64, 182, 839, 840, 850, 877, 888, 932], "reusabl": 182, "rev": [235, 328, 864, 932], "revers": [189, 205, 291, 328, 398, 412, 413, 414, 415, 416, 592, 594, 596, 725, 746, 752, 818, 834, 895, 932, 1020, 1021, 1022, 1023, 1024, 1327, 1345, 1348], "reverse_": 594, "reverse_a": 594, "reverse_b": 594, "revert": [13, 15, 16], "rhap": [676, 678, 1257], "rhapsodi": [676, 678, 1257], "right": [15, 16, 21, 22, 24, 33, 46, 73, 142, 143, 165, 166, 167, 168, 219, 233, 234, 260, 297, 328, 418, 473, 474, 475, 476, 504, 547, 548, 549, 550, 615, 628, 631, 633, 635, 637, 639, 642, 644, 646, 650, 658, 745, 758, 759, 761, 762, 777, 805, 806, 818, 858, 862, 863, 881, 899, 932, 1026, 1087, 1088, 1089, 1090, 1115, 1161, 1162, 1163, 1164, 1201, 1227, 1238, 1327, 1343, 1348], "right_left": [233, 328, 862, 932], "right_on": [233, 234, 297, 328, 862, 863, 899, 932], "rightmost": [650, 818, 1227, 1327, 1350], "rld": [697, 699, 1278], "rle": [627, 818, 1212, 1327], "rle_id": [626, 818, 1327], "rle_id_a": [627, 818], "rle_id_ab": [627, 818], "rmm": 907, "rn": [142, 143, 156], "role": [38, 145], "roll": [219, 328, 425, 444, 445, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 747, 794, 795, 818, 858, 932, 1032, 1055, 1056, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1327], "rollback": [445, 1056], "rolled_forward": 425, "rollforward": [444, 1055], "rolling_map": [818, 1327], "rolling_max": [818, 1327], "rolling_max_bi": 818, "rolling_mean": [818, 1327], "rolling_mean_bi": 818, "rolling_median": [818, 1327], "rolling_median_bi": 818, "rolling_min": [818, 1327], "rolling_min_bi": 818, "rolling_quantil": [818, 1327], "rolling_quantile_bi": 818, "rolling_row_max": [631, 818], "rolling_row_mean": [633, 818], "rolling_row_median": [635, 818], "rolling_row_min": [637, 818], "rolling_row_quantil": [639, 818], "rolling_row_std": [642, 818], "rolling_row_sum": [644, 818], "rolling_row_var": [646, 818], "rolling_skew": [818, 1327], "rolling_std": [818, 1327], "rolling_std_bi": 818, "rolling_sum": [629, 818, 1213, 1327], "rolling_sum_bi": 818, "rolling_var": [818, 1327], "rolling_var_bi": 818, "rollinggroupbi": [260, 328], "rollinginterpolationmethod": [197, 255, 320, 328, 616, 638, 639, 791, 818, 844, 878, 921, 932, 1027, 1202, 1218, 1327], "ronaldo": [673, 1252], "root": [146, 157, 405, 580, 591, 592, 594, 596, 598, 599, 662, 817, 818, 1010, 1241, 1327, 1349], "rotat": [328, 331, 1327, 1332], "round": [26, 46, 59, 136, 144, 328, 406, 410, 486, 648, 721, 818, 1011, 1100, 1224, 1327, 1348], "round_sig_fig": [818, 1327], "round_str": 1063, "round_td": 1063, "rounded_corn": 26, "row": [20, 26, 31, 43, 44, 46, 51, 52, 55, 57, 58, 60, 65, 104, 110, 118, 126, 132, 133, 134, 135, 136, 139, 142, 143, 144, 147, 148, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 165, 166, 172, 187, 189, 190, 191, 201, 202, 207, 210, 212, 213, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 244, 249, 253, 260, 263, 264, 273, 279, 282, 284, 285, 290, 291, 293, 295, 296, 297, 304, 305, 309, 311, 313, 314, 322, 328, 332, 353, 354, 362, 377, 398, 399, 479, 487, 491, 497, 520, 531, 558, 608, 609, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 654, 659, 661, 672, 681, 720, 725, 739, 742, 748, 750, 767, 771, 773, 774, 776, 792, 794, 795, 803, 808, 818, 834, 837, 847, 848, 854, 855, 856, 858, 859, 862, 863, 864, 865, 867, 868, 872, 889, 894, 895, 896, 898, 899, 905, 906, 910, 912, 914, 915, 923, 932, 942, 957, 966, 1092, 1093, 1102, 1109, 1134, 1145, 1196, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1239, 1251, 1260, 1299, 1327, 1336, 1343, 1345, 1356, 1358], "row_group": [154, 161], "row_group_s": [51, 55, 328, 932], "row_height": [46, 328], "row_index": [46, 328], "row_index_nam": [142, 143, 148, 150, 152, 154, 156, 159, 160, 161], "row_index_offset": [142, 143, 148, 150, 152, 154, 156, 159, 160, 161], "row_nr": [304, 328, 905, 932], "row_tot": [46, 328], "rowname_col": [328, 332], "rows_by_kei": [231, 262, 281, 328], "rowserror": [261, 328], "rowtotalsdefinit": [46, 328], "rstrip": 592, "rtol": [165, 166, 167, 168], "rtrim": 1348, "ru": 1350, "rule": [142, 154, 156, 161, 212, 328, 666, 690, 705, 1245, 1269, 1284], "run": [52, 53, 54, 55, 63, 64, 72, 144, 172, 175, 176, 177, 218, 233, 236, 238, 267, 293, 303, 314, 328, 403, 417, 530, 566, 567, 626, 627, 684, 796, 818, 839, 840, 850, 857, 862, 868, 872, 877, 884, 888, 896, 903, 907, 932, 938, 1006, 1025, 1144, 1180, 1211, 1212, 1263, 1327, 1355, 1358], "runtimeerror": [286, 328, 1308, 1327], "rust": [43, 51, 52, 100, 112, 147, 148, 150, 154, 238, 314, 328, 675, 932, 936, 1180, 1254, 1327], "s1": [56, 96, 97, 167, 168, 212, 328, 981, 1084, 1085, 1104, 1129, 1139, 1172, 1192, 1204, 1318, 1327], "s2": [1, 56, 96, 97, 167, 168, 212, 328, 981, 1012, 1029, 1084, 1085, 1104, 1120, 1129, 1139, 1172, 1186, 1192, 1204, 1318, 1327], "s3": [1, 45, 146, 157, 158, 161, 162, 328, 981, 1172, 1327], "s_": 457, "s_bar": 1345, "s_dt": [457, 1350, 1351], "s_dt1": 1350, "s_dt2": 1350, "s_dtm": 457, "s_foo": 1345, "s_from_str_repr": [1305, 1327], "s_head_5": 679, "s_head_n": 679, "s_tail_5": 703, "s_tail_n": 703, "s_td": 457, "s_tm": [457, 1350, 1351], "safe": [620, 818, 1205, 1327], "sale": [608, 818], "sam": 18, "same": [26, 45, 46, 56, 57, 63, 64, 65, 96, 97, 113, 148, 156, 165, 166, 167, 168, 170, 182, 210, 218, 234, 238, 253, 262, 263, 274, 293, 302, 303, 307, 314, 328, 336, 343, 376, 402, 423, 424, 457, 483, 487, 489, 490, 493, 557, 571, 577, 608, 622, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 654, 661, 672, 683, 715, 814, 818, 839, 840, 854, 857, 863, 866, 868, 890, 896, 902, 903, 908, 932, 938, 943, 980, 1005, 1030, 1031, 1036, 1068, 1171, 1180, 1207, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1251, 1262, 1318, 1327, 1341, 1343, 1351], "samoa": [426, 1033], "sampl": [142, 143, 314, 328, 654, 658, 777, 818, 915, 1238, 1327, 1344], "sample_s": [142, 143], "sampled_from": 1358, "sandwich": [215, 328], "sat": [328, 331], "satisfi": [504, 818, 1115, 1327], "saturdai": [219, 328, 858, 932], "save": [8, 9, 12, 219, 234, 260, 298, 328, 426, 434, 447, 452, 465, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 763, 805, 806, 814, 818, 830, 858, 863, 881, 932, 1041, 1058, 1063, 1076], "save_to_fil": 11, "say\u014dnara": 1, "scalar": [187, 229, 238, 261, 328, 403, 566, 650, 679, 684, 692, 703, 778, 780, 818, 936, 942, 1006, 1129, 1227, 1258, 1263, 1271, 1282, 1327], "scale": [34, 73, 205, 328, 386, 567, 612, 706, 818, 938, 1086, 1285, 1327], "scale_negative_even": [612, 818], "scan": [7, 132, 135, 142, 143, 144, 147, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 328, 681, 932, 1260], "scan_csv": [52, 53, 54, 55, 142, 143, 932], "scan_parquet": [154, 162], "scan_pyarrow_dataset": [154, 161], "scatter": [328, 331, 1327, 1332], "scenario": 1327, "schedul": [64, 840, 932], "schema": [0, 1, 3, 5, 6, 7, 20, 34, 41, 44, 45, 58, 59, 60, 65, 104, 121, 122, 129, 131, 132, 133, 135, 139, 142, 143, 144, 145, 147, 149, 151, 152, 153, 154, 155, 156, 159, 160, 161, 191, 192, 193, 199, 203, 205, 232, 236, 238, 245, 249, 257, 286, 290, 328, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 432, 557, 558, 567, 578, 593, 595, 597, 681, 733, 800, 818, 830, 837, 838, 841, 842, 846, 849, 868, 873, 879, 901, 915, 932, 938, 1015, 1260, 1327, 1336], "schema_mod": [45, 328], "schema_nam": [3, 6, 7], "schema_overrid": [129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 147, 151, 152, 153, 156, 160, 232, 286, 328, 932, 938], "schemadefinit": [129, 131, 132, 133, 135, 151, 152, 160, 328, 932], "schemadict": [88, 129, 131, 132, 133, 134, 135, 142, 144, 145, 147, 153, 154, 156, 159, 161, 328, 800, 868, 915, 932], "schemainfo": 5, "schemainitdatatyp": 937, "schindler": 1336, "scientif": [17, 43, 52, 328, 932], "scikit": [290, 328], "scipi": [516, 658, 818, 1130, 1238, 1327], "scope": [39, 40, 182, 829, 938, 1339, 1342, 1355], "score": [46, 253, 328], "script": [328, 331, 1327, 1332], "scroll": [46, 328], "sdiff": 549, "sdk": 2, "search": [234, 328, 558, 666, 676, 678, 690, 863, 890, 932, 1112, 1245, 1255, 1257, 1269, 1327], "search_sort": [818, 1327], "searchsortedsid": [650, 818, 1227, 1327], "searchstrategi": [169, 171, 172, 173, 174, 176], "season": [688, 689], "sec": [1351, 1358], "second": [43, 52, 152, 156, 159, 160, 165, 166, 167, 168, 219, 234, 260, 298, 328, 436, 439, 441, 442, 446, 447, 450, 452, 457, 464, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 688, 689, 702, 705, 760, 761, 762, 763, 804, 805, 806, 808, 818, 858, 863, 881, 932, 938, 1058, 1061, 1063, 1075, 1076, 1088, 1267, 1268, 1281, 1284, 1327, 1350, 1351, 1356, 1358], "second_part": [694, 695, 1273, 1274], "seconds_diff": 464, "secret": [158, 161], "section": [253, 328, 665, 673, 674, 677, 688, 689, 758, 759, 761, 762, 805, 806, 1244, 1252, 1253, 1256, 1267, 1268], "secur": [420, 818, 845, 932], "see": [7, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 63, 64, 72, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 165, 166, 167, 168, 172, 176, 184, 195, 210, 219, 233, 252, 253, 328, 332, 391, 392, 394, 395, 407, 457, 482, 516, 566, 658, 665, 673, 674, 677, 679, 688, 689, 703, 758, 759, 761, 762, 792, 805, 806, 814, 818, 839, 840, 854, 858, 907, 932, 936, 938, 940, 994, 995, 997, 998, 1008, 1014, 1068, 1130, 1238, 1244, 1252, 1253, 1256, 1258, 1267, 1268, 1282, 1327, 1358], "seed": [163, 220, 264, 328, 496, 546, 618, 649, 654, 818, 1108, 1160, 1203, 1225, 1234, 1327], "seed_1": [220, 328, 496, 818, 1108, 1327], "seed_2": [220, 328, 496, 818, 1108, 1327], "seed_3": [220, 328, 496, 818, 1108, 1327], "seen": [457, 1068], "seen_group": 143, "select": [1, 14, 44, 57, 58, 59, 60, 101, 140, 142, 143, 144, 145, 146, 148, 150, 154, 156, 162, 171, 187, 188, 229, 230, 234, 238, 249, 252, 261, 267, 273, 275, 288, 294, 298, 305, 328, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 362, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 388, 393, 396, 397, 398, 401, 405, 406, 408, 409, 410, 411, 417, 419, 421, 422, 423, 424, 427, 429, 430, 438, 444, 445, 447, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 470, 473, 475, 476, 477, 478, 479, 480, 484, 486, 488, 491, 495, 496, 497, 498, 499, 500, 501, 502, 505, 506, 509, 515, 516, 517, 519, 520, 530, 531, 558, 561, 562, 563, 564, 566, 567, 568, 569, 570, 574, 586, 588, 590, 591, 593, 595, 597, 600, 601, 605, 606, 607, 608, 610, 611, 614, 616, 617, 618, 619, 620, 621, 624, 625, 626, 629, 640, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 672, 673, 674, 675, 676, 677, 678, 680, 685, 702, 713, 715, 716, 719, 720, 721, 722, 724, 725, 727, 728, 729, 730, 731, 734, 736, 738, 741, 742, 743, 746, 747, 749, 750, 751, 752, 755, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 781, 783, 785, 786, 788, 789, 792, 793, 797, 798, 799, 800, 801, 803, 807, 814, 818, 833, 839, 842, 863, 876, 884, 889, 891, 897, 904, 906, 907, 932, 938, 942, 1062, 1101, 1144, 1226, 1228, 1239, 1257, 1261, 1281, 1327, 1336, 1337, 1338, 1339, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357], "select_from": [171, 174, 176], "select_seq": [328, 932], "selector": [0, 46, 190, 199, 201, 202, 206, 244, 251, 253, 274, 283, 285, 290, 293, 295, 296, 328, 332, 457, 477, 574, 818, 830, 836, 846, 847, 848, 851, 872, 890, 896, 898, 932], "selectortyp": [46, 328, 938], "self": [1, 58, 59, 60, 61, 63, 64, 275, 306, 328, 797, 818, 839, 840, 850, 877, 888, 891, 904, 932, 947, 992, 993, 994, 995, 997, 998, 1001, 1015, 1020, 1093, 1097, 1111, 1178, 1180, 1193, 1197, 1198, 1204, 1207, 1208, 1226, 1228, 1229, 1240, 1315, 1318, 1327, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355], "semi": [139, 233, 328, 862, 932, 1343], "semigraph": 26, "sens": [142, 148, 150, 245, 298, 328, 608, 818, 873, 932], "sensit": [665, 674, 677, 688, 689, 1244, 1253, 1256, 1267, 1268], "sep": 139, "separ": [15, 16, 30, 33, 42, 43, 52, 138, 139, 141, 142, 143, 147, 156, 251, 253, 283, 292, 294, 328, 362, 365, 457, 531, 537, 567, 672, 748, 753, 754, 818, 897, 932, 966, 969, 1068, 1145, 1151, 1251, 1297, 1303, 1327, 1350], "seq": 32, "seq1": 32, "seq2": 32, "sequenc": [46, 51, 57, 88, 129, 131, 132, 133, 135, 139, 142, 143, 144, 147, 151, 152, 153, 156, 160, 170, 171, 172, 173, 174, 189, 197, 206, 207, 233, 234, 244, 249, 251, 252, 253, 263, 274, 283, 285, 290, 291, 295, 296, 297, 298, 328, 377, 398, 418, 490, 508, 558, 566, 612, 615, 622, 623, 661, 690, 700, 701, 715, 725, 742, 753, 754, 767, 769, 777, 779, 780, 789, 792, 798, 818, 834, 844, 851, 862, 863, 872, 876, 890, 895, 898, 899, 932, 938, 981, 1026, 1027, 1093, 1172, 1201, 1207, 1208, 1269, 1295, 1327], "sequenti": [63, 64, 267, 303, 328, 839, 840, 850, 877, 884, 888, 903, 932], "ser": [1038, 1039, 1066], "seri": [0, 1, 17, 31, 46, 56, 58, 59, 60, 61, 65, 66, 75, 88, 96, 97, 106, 129, 131, 134, 136, 167, 168, 172, 187, 200, 210, 212, 214, 216, 219, 220, 223, 224, 226, 228, 230, 240, 242, 247, 258, 260, 264, 278, 281, 284, 286, 288, 289, 308, 328, 343, 354, 377, 381, 400, 401, 402, 403, 404, 406, 451, 480, 483, 486, 490, 491, 501, 506, 508, 509, 511, 512, 513, 514, 525, 531, 533, 558, 564, 566, 567, 618, 619, 620, 621, 622, 623, 628, 629, 640, 651, 653, 679, 690, 702, 703, 704, 705, 709, 713, 724, 729, 739, 743, 746, 753, 754, 758, 759, 761, 762, 767, 769, 773, 774, 777, 778, 779, 780, 790, 792, 793, 796, 797, 800, 805, 806, 809, 818, 830, 854, 858, 881, 909, 932, 936, 1319, 1321, 1323, 1326, 1328, 1331, 1332, 1333, 1334, 1335, 1337, 1339, 1350, 1355, 1358], "serial": [49, 50, 198, 328, 420, 585, 818, 845, 932], "serializ": [818, 936], "serializationformat": [198, 268, 328, 420, 581, 818, 845, 885, 932], "seriesplot": [1327, 1332], "server": [44, 144, 145, 328], "servic": 38, "service_account": [146, 157], "service_account_json_absolute_path": [146, 157], "session": 144, "set": [2, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 26, 31, 32, 33, 36, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 69, 72, 73, 75, 130, 131, 132, 135, 142, 143, 144, 147, 148, 150, 151, 152, 153, 154, 156, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 186, 194, 201, 202, 211, 214, 218, 220, 231, 233, 234, 242, 244, 262, 264, 266, 268, 273, 278, 283, 285, 286, 290, 292, 293, 295, 296, 297, 302, 328, 331, 340, 342, 364, 365, 377, 389, 391, 392, 394, 395, 407, 418, 450, 451, 468, 496, 508, 533, 535, 537, 546, 547, 548, 549, 550, 552, 558, 566, 567, 574, 575, 581, 612, 615, 622, 623, 629, 630, 632, 634, 636, 638, 641, 643, 645, 649, 654, 658, 659, 664, 680, 681, 688, 689, 692, 697, 698, 699, 700, 701, 702, 704, 705, 709, 730, 734, 736, 739, 743, 748, 758, 759, 760, 761, 762, 763, 773, 774, 777, 778, 784, 790, 793, 794, 795, 796, 800, 802, 805, 806, 808, 809, 818, 830, 839, 840, 847, 848, 850, 857, 862, 863, 868, 872, 883, 885, 889, 896, 898, 899, 902, 915, 932, 936, 945, 946, 968, 969, 981, 985, 992, 994, 995, 997, 998, 1014, 1026, 1061, 1062, 1079, 1099, 1108, 1120, 1127, 1147, 1149, 1151, 1160, 1161, 1162, 1163, 1164, 1166, 1172, 1180, 1201, 1207, 1208, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1225, 1226, 1227, 1234, 1238, 1239, 1243, 1259, 1260, 1267, 1268, 1271, 1276, 1277, 1278, 1281, 1283, 1284, 1288, 1308, 1316, 1327, 1346, 1354, 1358], "set_": 182, "set_auto_structifi": [266, 302, 328, 883, 902, 932], "set_decimal_separ": 33, "set_environ": 175, "set_except": [64, 840, 932], "set_fmt_float": 36, "set_fmt_str_length": [666, 676, 678, 690, 1245, 1257, 1269], "set_index": [219, 328, 858, 932], "set_legend": [46, 328], "set_sort": [260, 298, 328, 628, 818, 881, 932, 1327], "set_stat": 36, "set_streaming_chunk_s": [839, 932], "set_styl": [46, 328], "set_tbl_column_data_type_inlin": 30, "set_tbl_format": [13, 57], "set_tbl_row": 182, "set_tbl_width_char": 690, "set_thousands_separ": 15, "set_titl": [46, 328], "set_verbos": 182, "setosa": [328, 331], "setup": 1358, "seventeen": [500, 818], "sever": [129, 131, 132, 133, 135, 151, 152, 160, 328, 932, 1358], "sfu": 145, "shape": [1, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 56, 57, 58, 59, 60, 61, 65, 66, 84, 88, 96, 97, 104, 123, 129, 130, 131, 132, 133, 134, 135, 136, 139, 142, 151, 152, 156, 162, 169, 172, 176, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 264, 266, 268, 271, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 586, 587, 588, 589, 590, 591, 592, 594, 596, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 836, 837, 839, 840, 843, 844, 845, 846, 847, 848, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 937, 938, 942, 943, 944, 947, 949, 950, 951, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1084, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1102, 1104, 1108, 1109, 1110, 1111, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1185, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1234, 1235, 1236, 1237, 1239, 1240, 1241, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1297, 1299, 1300, 1301, 1303, 1304, 1305, 1310, 1312, 1313, 1314, 1315, 1316, 1318, 1327, 1336, 1337, 1338, 1339, 1341, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1355, 1356], "share": [165, 166, 167, 168, 205, 328, 1086, 1327], "shawshank": 1336, "sheet": [46, 147, 153, 328], "sheet1": [46, 328], "sheet_id": [147, 153], "sheet_nam": [147, 153], "sheet_zoom": [46, 328], "sheetnam": [147, 153], "shift": [219, 328, 380, 421, 488, 528, 609, 747, 818, 858, 932, 1028, 1142, 1196, 1327], "short": [165, 167, 385, 988], "shorten": [165, 167], "shorter": [142, 143, 156, 558, 773, 774], "shorthand": [328, 331, 1327, 1332], "should": [16, 44, 46, 51, 52, 53, 54, 55, 65, 129, 131, 133, 135, 139, 147, 151, 152, 156, 160, 162, 169, 170, 172, 176, 199, 231, 233, 234, 238, 261, 262, 263, 274, 282, 283, 294, 314, 328, 338, 417, 420, 468, 474, 477, 511, 512, 530, 567, 581, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 650, 658, 661, 688, 689, 730, 742, 763, 765, 778, 780, 794, 795, 808, 814, 818, 839, 845, 846, 862, 863, 868, 885, 890, 897, 932, 938, 1025, 1079, 1088, 1144, 1180, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1227, 1238, 1267, 1268, 1316, 1327, 1337], "show": [36, 46, 197, 202, 217, 236, 250, 328, 498, 582, 818, 844, 877, 888, 932, 1110, 1327, 1341, 1354], "show_graph": [236, 328, 932], "show_plot": [877, 932], "shrink": [272, 328, 653, 818, 1232, 1233, 1327], "shrink_dtyp": [818, 1327], "shrink_to_fit": [328, 1327], "shuffl": [163, 264, 290, 314, 328, 546, 649, 818, 915, 1160, 1225, 1327], "side": [46, 219, 260, 328, 504, 547, 548, 549, 550, 628, 631, 633, 635, 637, 639, 642, 644, 646, 650, 758, 759, 761, 762, 777, 805, 806, 818, 858, 881, 932, 936, 1115, 1161, 1162, 1163, 1164, 1227, 1327], "sign": [71, 72, 74, 79, 80, 81, 82, 83, 89, 447, 620, 688, 689, 712, 818, 938, 1058, 1205, 1267, 1268, 1291, 1327, 1348], "sign_x": 1349, "signed_integ": 938, "signific": [161, 231, 238, 328, 391, 392, 394, 395, 567, 648, 818, 994, 995, 997, 998, 1180, 1224, 1327], "significantli": [147, 238, 314, 328, 1180, 1327, 1358], "silenc": 104, "silent": [707, 1286], "similar": [42, 51, 141, 178, 212, 234, 271, 293, 295, 328, 372, 454, 457, 551, 608, 652, 717, 776, 808, 818, 863, 887, 896, 898, 932, 976, 1065, 1068, 1165, 1231, 1327], "similarli": [46, 132, 219, 234, 260, 298, 328, 447, 452, 465, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 1058, 1063, 1076], "simpl": [46, 249, 328], "simpler": [938, 1267], "simpli": [156, 753, 767], "simplifi": [52, 53, 54, 55, 63, 64, 839, 840, 850, 877, 888, 932], "simplify_express": [52, 53, 54, 55, 63, 64, 839, 840, 850, 877, 888, 932], "sin": [818, 1327, 1348], "sinc": [45, 71, 72, 89, 142, 143, 144, 146, 152, 156, 157, 159, 160, 169, 170, 171, 172, 176, 179, 188, 244, 286, 304, 309, 328, 432, 435, 468, 489, 566, 585, 622, 664, 672, 732, 741, 749, 769, 818, 833, 850, 872, 890, 904, 905, 910, 932, 1039, 1042, 1047, 1048, 1079, 1107, 1207, 1243, 1251, 1308, 1327], "sind": 1348, "sine": [347, 348, 566, 656, 657, 818, 951, 952, 1236, 1237, 1327, 1352], "singl": [46, 51, 57, 63, 64, 65, 76, 141, 142, 143, 144, 145, 146, 147, 154, 156, 157, 159, 170, 190, 199, 200, 201, 202, 207, 214, 220, 229, 238, 251, 261, 263, 274, 285, 286, 328, 361, 403, 407, 425, 447, 490, 493, 496, 527, 533, 566, 567, 619, 622, 624, 626, 661, 664, 679, 680, 684, 692, 703, 732, 742, 746, 747, 748, 774, 779, 780, 798, 806, 814, 818, 836, 839, 840, 846, 847, 848, 890, 932, 938, 965, 1006, 1014, 1032, 1058, 1093, 1108, 1141, 1147, 1204, 1207, 1209, 1211, 1243, 1258, 1259, 1263, 1271, 1282, 1302, 1308, 1327, 1338], "singlecolselector": 187, "singleindexselector": [187, 942], "sinh": [818, 1327], "sink_csv": 932, "sink_ipc": 932, "sink_ndjson": 932, "sink_parquet": 932, "site_id": [328, 332], "six": [650, 818], "size": [20, 51, 55, 142, 143, 144, 169, 170, 171, 172, 176, 178, 205, 296, 328, 558, 624, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 739, 773, 774, 794, 795, 818, 839, 932, 1086, 1209, 1219, 1327, 1358], "sizeunit": [205, 328, 386, 989, 1086, 1327], "skew": [640, 818, 1219, 1327], "skewtest": [658, 818, 1238, 1327], "skip": [142, 143, 147, 154, 156, 161, 234, 296, 328, 863, 932, 1180, 1327, 1343], "skip_empty_lin": 147, "skip_lin": [142, 156], "skip_nul": [567, 818, 1180, 1327], "skip_row": [142, 143, 156], "skip_rows_after_head": [142, 143, 156], "sklearn": [290, 328], "slice": [52, 53, 54, 55, 58, 63, 64, 205, 221, 232, 279, 328, 536, 556, 567, 578, 580, 629, 630, 632, 634, 636, 638, 641, 643, 645, 679, 703, 818, 839, 840, 850, 868, 877, 888, 932, 936, 1086, 1109, 1150, 1170, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1258, 1282, 1299, 1327, 1350], "slice_pushdown": [52, 53, 54, 55, 63, 64, 839, 840, 850, 868, 877, 888, 932], "slide": [417, 818, 1025, 1327], "slightli": [52, 53, 54, 55, 100, 487, 818, 932, 1351], "slot": [417, 421, 528, 818, 1025, 1028, 1142, 1327], "slow": [116, 132, 135, 142, 143, 144, 147, 151, 152, 153, 156, 160, 161, 328, 417, 567, 629, 681, 818, 915, 932, 1025, 1213, 1260, 1327], "slower": [133, 135, 147, 218, 238, 251, 298, 314, 328, 567, 780, 818, 857, 915, 932, 1180, 1327], "small": [17, 145, 452, 932, 1358], "smaller": [51, 55, 205, 328, 932, 1086, 1327], "smallest": [189, 291, 328, 397, 398, 725, 818, 834, 895, 932, 1000, 1327, 1344, 1347], "smooth": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "snappi": [41, 51, 55, 328, 932], "snapshot": 158, "snapshot_id": 158, "snowflak": [144, 145], "snowi": [688, 689], "so": [1, 46, 145, 147, 156, 178, 182, 217, 219, 235, 253, 260, 328, 354, 364, 420, 487, 504, 535, 558, 567, 628, 688, 689, 690, 697, 698, 699, 713, 818, 845, 858, 864, 881, 932, 938, 968, 1149, 1267, 1268, 1269, 1276, 1277, 1278], "softwar": [42, 141, 328], "solut": [44, 328], "some": [20, 36, 46, 56, 97, 132, 142, 143, 144, 156, 186, 202, 253, 263, 286, 328, 332, 688, 689, 814, 1120, 1267, 1268, 1327, 1358], "some_account": [674, 1253], "some_t": 1357, "someth": [566, 818], "sometim": [763, 817], "somewher": [674, 1253], "sort": [57, 58, 189, 219, 234, 245, 252, 253, 260, 269, 291, 298, 311, 322, 328, 353, 397, 398, 474, 483, 567, 608, 628, 651, 661, 724, 725, 730, 732, 742, 758, 761, 780, 818, 834, 850, 858, 863, 873, 876, 877, 881, 886, 888, 895, 912, 923, 932, 938, 957, 1000, 1088, 1127, 1229, 1312, 1313, 1316, 1327, 1343, 1356, 1358], "sort_bi": 818, "sort_column": [253, 328], "sorted": [234, 328, 863, 932], "sorted_asc": [1099, 1327], "sorted_desc": [1099, 1327], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 331, 332, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 818, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 932, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327, 1332, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1355], "source_ac": 136, "source_actor_id": 136, "source_alia": [45, 328], "source_cha": 136, "source_channel_id": 136, "south": 75, "space": [26, 219, 328, 457, 777, 858, 932, 938, 1068], "spam": [241, 328, 674, 1253], "span": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "spanner": [328, 332], "spark": [51, 328], "sparklin": [46, 328], "speak": [658, 818, 1238, 1327], "spearman": 749, "speci": [328, 331], "special": [44, 142, 143, 145, 156, 290, 305, 328, 629, 674, 688, 689, 818, 906, 932, 1180, 1213, 1253, 1267, 1268, 1327], "specif": [1, 36, 45, 46, 47, 48, 100, 129, 131, 133, 135, 142, 145, 146, 147, 151, 152, 153, 157, 158, 160, 190, 231, 233, 280, 285, 328, 454, 457, 702, 704, 705, 709, 730, 818, 836, 862, 932, 937, 938, 1065, 1068, 1281, 1283, 1284, 1288, 1302, 1306, 1316, 1327, 1343, 1355, 1358], "specifi": [3, 5, 6, 7, 43, 44, 45, 46, 51, 52, 57, 101, 104, 107, 122, 125, 142, 147, 153, 154, 156, 161, 173, 189, 190, 205, 206, 209, 214, 218, 219, 233, 234, 251, 253, 260, 261, 263, 266, 267, 271, 274, 285, 291, 294, 302, 303, 307, 328, 398, 407, 450, 457, 473, 475, 476, 477, 482, 608, 621, 623, 630, 632, 634, 636, 638, 641, 643, 645, 652, 661, 717, 725, 742, 745, 746, 747, 748, 758, 759, 761, 762, 763, 765, 796, 800, 805, 806, 814, 818, 834, 836, 851, 853, 857, 858, 862, 863, 881, 883, 884, 887, 890, 895, 897, 902, 903, 908, 932, 938, 1014, 1061, 1068, 1086, 1087, 1089, 1090, 1096, 1208, 1231, 1306, 1327, 1343, 1350, 1357], "speed": [55, 269, 328, 567, 818, 886, 932, 1358], "speedup": [57, 161, 231, 238, 328, 567, 818, 1180, 1327], "split": [1, 46, 51, 58, 232, 328, 672, 694, 695, 1251, 1273, 1274], "split_by_column_dtyp": 60, "split_inclus": 693, "splitfram": [1, 58], "spreadsheet": [42, 141, 147, 153, 253, 328], "spring": [688, 689], "sql": [0, 44, 119, 120, 128, 144, 145, 233, 271, 328, 372, 551, 652, 776, 798, 818, 830, 887, 932, 976, 1165, 1231, 1327, 1336, 1337, 1339, 1341, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1356, 1357], "sql_expr": 1355, "sqlalchemi": [44, 144, 164, 328], "sqlcontext": [275, 328, 797, 891, 932, 1354], "sqlite": [44, 144, 328], "sqrt": [567, 658, 717, 818, 1180, 1238, 1327, 1348], "sqrt_x": 1349, "squar": [1, 61, 314, 516, 624, 662, 818, 915, 1130, 1209, 1241, 1327, 1349], "st": [38, 1358], "stabil": [220, 328, 496, 818, 1108, 1327], "stabl": [154, 184, 195, 197, 198, 220, 264, 268, 275, 328, 420, 496, 563, 581, 723, 818, 844, 845, 872, 885, 890, 891, 932, 940, 1108, 1310, 1327], "stack": [65, 223, 300, 328, 331, 1337], "stai": [566, 654, 818], "standalon": [170, 938], "standard": [13, 16, 46, 144, 276, 285, 290, 328, 438, 475, 641, 642, 658, 663, 682, 685, 799, 814, 818, 892, 932, 1045, 1084, 1089, 1192, 1238, 1242, 1261, 1264, 1327, 1344, 1358], "standardis": [46, 328], "start": [46, 140, 142, 143, 145, 147, 148, 150, 152, 153, 154, 156, 159, 160, 161, 178, 213, 218, 219, 236, 273, 298, 304, 305, 328, 381, 384, 387, 400, 404, 425, 433, 443, 448, 452, 465, 466, 477, 491, 534, 552, 627, 631, 633, 635, 637, 639, 642, 644, 646, 659, 665, 670, 674, 678, 687, 692, 696, 697, 699, 700, 703, 712, 739, 744, 753, 757, 758, 759, 760, 761, 762, 765, 767, 773, 774, 777, 805, 806, 808, 814, 818, 856, 857, 858, 877, 889, 905, 906, 932, 938, 990, 1002, 1007, 1032, 1034, 1037, 1040, 1042, 1043, 1049, 1051, 1053, 1054, 1057, 1059, 1063, 1067, 1076, 1077, 1102, 1148, 1166, 1212, 1239, 1249, 1253, 1257, 1266, 1271, 1275, 1276, 1278, 1282, 1291, 1327, 1343, 1350, 1358], "start_bi": [219, 328, 858, 932], "startbi": [219, 328, 858, 932], "starts_a": 1350, "starts_with": [58, 253, 328, 332, 381, 384, 400, 574, 665, 670, 797, 891, 932, 938, 1002, 1249, 1348], "starts_with_expr": 387, "starts_with_lit": 387, "startup": [285, 328], "stat": [516, 658, 818, 1130, 1238, 1327], "state": [10, 11, 112, 753, 830, 850, 877, 888, 932, 1355], "statement": [608, 808, 818, 1341, 1356], "static": [94, 915], "statist": [51, 55, 142, 143, 154, 159, 161, 197, 328, 475, 476, 516, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 658, 818, 844, 932, 1027, 1089, 1090, 1130, 1219, 1238, 1327], "std": [197, 328, 641, 642, 818, 844, 932, 1027, 1220, 1327], "std_dev": [46, 328], "stddev": 1348, "stddev_samp": 1344, "stdev": [46, 328, 1344], "stdev_samp": 1344, "stdout": [182, 217, 328, 583], "step": [296, 328, 487, 739, 773, 774, 818], "steve": [245, 328, 873, 932], "still": [144, 145], "stock": [328, 331], "stop": [140, 142, 143, 148, 150, 152, 154, 156, 159, 160, 161, 631, 633, 635, 637, 639, 642, 644, 646, 818, 1034, 1037, 1042, 1043, 1049, 1051, 1053, 1057, 1063, 1067], "storag": [7, 43, 45, 47, 51, 52, 53, 54, 55, 142, 146, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 328, 932], "storage_opt": [7, 43, 45, 47, 51, 52, 53, 54, 55, 142, 146, 148, 150, 152, 154, 156, 157, 158, 159, 160, 161, 328, 932], "store": [45, 142, 158, 207, 231, 262, 328, 401, 626, 818, 1003, 1093, 1211, 1327], "store_id": [608, 818], "str": [1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 15, 16, 18, 21, 22, 23, 26, 27, 32, 33, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 72, 75, 76, 98, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 169, 170, 172, 175, 176, 177, 182, 189, 190, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 210, 211, 212, 214, 215, 217, 218, 219, 221, 223, 226, 228, 229, 231, 233, 234, 235, 237, 239, 241, 243, 244, 245, 246, 249, 251, 253, 255, 257, 258, 259, 260, 261, 262, 264, 268, 269, 273, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 337, 338, 339, 360, 365, 377, 381, 382, 383, 384, 387, 388, 393, 396, 398, 400, 401, 404, 412, 418, 420, 422, 430, 447, 451, 452, 454, 457, 465, 474, 477, 483, 485, 489, 490, 493, 501, 504, 525, 526, 535, 536, 537, 552, 556, 558, 567, 578, 580, 581, 582, 583, 585, 592, 593, 594, 595, 596, 597, 598, 599, 605, 608, 612, 615, 621, 622, 623, 625, 627, 628, 631, 633, 635, 637, 639, 642, 644, 646, 653, 660, 661, 713, 714, 715, 716, 725, 730, 732, 733, 734, 735, 736, 737, 738, 740, 741, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 814, 818, 825, 834, 836, 839, 840, 842, 844, 845, 846, 847, 848, 850, 851, 854, 857, 858, 860, 862, 863, 864, 872, 873, 876, 877, 879, 880, 881, 885, 886, 888, 889, 890, 891, 895, 896, 897, 898, 899, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 932, 936, 937, 938, 944, 964, 969, 981, 986, 1001, 1002, 1003, 1007, 1026, 1027, 1037, 1058, 1062, 1063, 1065, 1068, 1076, 1088, 1096, 1099, 1139, 1140, 1151, 1172, 1188, 1189, 1190, 1201, 1206, 1207, 1208, 1228, 1292, 1294, 1295, 1303, 1304, 1305, 1306, 1316, 1327, 1333, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1350, 1351, 1355, 1356, 1358], "str_date": 1350, "str_timestamp": 1350, "strategi": [43, 52, 57, 65, 142, 161, 169, 170, 171, 172, 173, 174, 176, 209, 219, 233, 234, 248, 297, 328, 482, 558, 567, 818, 853, 858, 862, 863, 899, 932, 1096, 1172, 1327], "stream": [20, 47, 48, 52, 53, 54, 55, 63, 64, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 218, 233, 293, 328, 566, 818, 839, 840, 850, 857, 862, 868, 872, 877, 888, 890, 896, 932], "streamabl": [868, 872, 898, 932], "strftime": [100, 457, 1068, 1348, 1350], "strict": [131, 132, 135, 139, 190, 199, 257, 328, 382, 399, 457, 665, 668, 677, 702, 704, 705, 707, 709, 818, 836, 846, 879, 932, 938, 985, 1001, 1068, 1244, 1247, 1256, 1281, 1283, 1284, 1286, 1288, 1327], "strictli": [43, 52, 56, 97, 234, 328, 863, 932], "string": [1, 8, 9, 11, 12, 18, 20, 21, 22, 26, 41, 43, 44, 45, 46, 49, 50, 52, 56, 69, 72, 75, 88, 95, 96, 97, 98, 100, 106, 124, 132, 136, 139, 142, 143, 144, 145, 156, 165, 166, 167, 168, 169, 176, 180, 189, 190, 193, 198, 203, 205, 212, 214, 217, 218, 219, 234, 251, 253, 260, 263, 265, 266, 267, 268, 274, 284, 285, 291, 292, 296, 298, 302, 303, 307, 328, 337, 360, 365, 382, 383, 384, 398, 400, 402, 403, 404, 407, 420, 447, 452, 454, 457, 465, 474, 477, 485, 489, 504, 537, 581, 583, 608, 612, 622, 623, 628, 631, 633, 635, 637, 639, 642, 644, 646, 661, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 717, 725, 733, 735, 737, 742, 745, 746, 747, 748, 756, 758, 759, 761, 762, 768, 782, 784, 787, 796, 800, 802, 805, 806, 808, 814, 818, 830, 834, 836, 841, 845, 849, 850, 857, 858, 863, 881, 882, 883, 884, 885, 890, 895, 902, 903, 908, 932, 937, 938, 969, 985, 986, 987, 1002, 1004, 1005, 1006, 1007, 1058, 1063, 1065, 1068, 1076, 1088, 1115, 1151, 1207, 1208, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1294, 1305, 1306, 1327, 1336, 1337, 1345, 1348, 1351, 1354, 1358], "stringcach": [96, 97, 233, 328, 830, 1004, 1008], "stringio": [151, 152, 489, 818], "strings_hex": 669, "strip": [34, 697, 698, 699, 700, 701, 1276, 1277, 1278, 1350], "strip_chars_end": [699, 701], "strip_chars_start": [698, 700], "strip_prefix": [699, 701], "strip_suffix": [698, 700], "strongli": [46, 178, 238, 261, 314, 328, 567, 818, 1180, 1327], "strpo": 1348, "strpost": 1350, "strptime": [260, 328, 451, 628, 818, 881, 932, 1062, 1348], "struct": [14, 76, 125, 136, 249, 266, 289, 294, 302, 328, 377, 418, 498, 558, 566, 567, 593, 595, 597, 615, 626, 627, 675, 681, 694, 695, 723, 730, 753, 754, 756, 779, 818, 883, 897, 902, 915, 932, 981, 1026, 1172, 1180, 1201, 1211, 1254, 1260, 1273, 1274, 1308, 1310, 1327], "struct_col": [713, 715, 716], "struct_seri": 915, "structarrai": [205, 328, 1086, 1327], "structfieldnotfounderror": 715, "structur": [46, 47, 48, 106, 109, 123, 139, 207, 252, 263, 280, 286, 328, 612, 818, 876, 932, 1093, 1302, 1327, 1355], "student": [253, 328], "style": [13, 26, 46, 144, 253, 328], "sub": [314, 358, 359, 360, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 379, 537, 544, 818, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 978, 979, 983, 1151, 1158], "subarrai": [356, 357, 960, 961], "subclass": [1, 328], "subexpress": [63, 64, 839, 840, 850, 877, 888, 932], "subinterv": 1344, "subject": [51, 253, 328], "sublist": [364, 523, 524, 526, 528, 532, 533, 534, 535, 536, 537, 538, 547, 552, 556, 558, 968, 1120, 1137, 1138, 1140, 1142, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1161, 1166, 1170, 1172, 1327], "subplan": [63, 64, 839, 840, 850, 877, 888, 932], "subsequ": [46, 154, 161, 256, 287, 328, 558, 797, 808, 850, 932, 1309, 1327, 1342], "subset": [201, 202, 249, 293, 328, 847, 848, 896, 932], "substr": [381, 384, 387, 400, 404, 665, 670, 677, 688, 689, 692, 693, 694, 695, 696, 938, 984, 987, 990, 1002, 1007, 1244, 1249, 1256, 1267, 1268, 1271, 1272, 1273, 1274, 1275, 1348], "subtl": [46, 328], "subtli": [487, 818], "subtract": [516, 718, 818, 1130, 1327], "succe": [142, 143, 156], "success": [667, 674, 1246, 1253], "successfulli": [839, 932], "suffix": [233, 234, 235, 266, 302, 307, 328, 339, 384, 398, 400, 511, 512, 513, 514, 572, 592, 594, 597, 598, 599, 625, 670, 698, 701, 725, 818, 862, 863, 864, 883, 902, 904, 908, 932, 938, 987, 1002, 1249, 1280], "suffix_field": [593, 595], "sugar": [297, 328, 622, 623, 690, 734, 736, 738, 750, 752, 755, 765, 770, 771, 772, 781, 783, 785, 786, 788, 790, 791, 796, 799, 801, 803, 807, 809, 818, 899, 932, 1207, 1208, 1241, 1269, 1327], "suggest": [328, 331, 1327, 1332], "suitabl": [57, 65, 144, 170, 238, 328, 567, 650, 818, 1180, 1227, 1327], "sum": [46, 205, 212, 218, 219, 229, 253, 260, 278, 307, 328, 415, 416, 420, 470, 483, 558, 567, 578, 580, 581, 582, 583, 584, 622, 623, 628, 643, 644, 732, 734, 746, 753, 755, 756, 767, 780, 792, 802, 818, 839, 840, 845, 850, 857, 858, 875, 877, 881, 885, 888, 908, 932, 936, 938, 1023, 1024, 1082, 1086, 1221, 1327, 1336, 1343, 1345, 1348, 1355], "sum_": [658, 818, 1238, 1327], "sum_a": [260, 328, 628, 818, 881, 932], "sum_horizont": [57, 328, 801], "summari": [197, 328, 844, 932, 1027, 1327, 1343], "summer": [688, 689], "sun": [328, 331, 702, 1281], "sundai": [219, 328, 425, 454, 457, 467, 744, 858, 932, 1032, 1065, 1068, 1078], "sunni": [688, 689, 1267, 1268], "supercast": [212, 328], "supertyp": [65, 209, 286, 290, 328, 343, 747, 818, 853, 932, 936, 1327], "suppli": [44, 46, 129, 131, 132, 133, 135, 144, 151, 152, 160, 210, 261, 285, 328, 483, 612, 818, 854, 932, 1306, 1327], "support": [1, 7, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 65, 129, 130, 131, 132, 133, 134, 135, 136, 144, 145, 146, 147, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 169, 173, 176, 182, 231, 232, 233, 234, 262, 263, 273, 274, 282, 287, 290, 328, 457, 474, 552, 608, 622, 623, 659, 661, 666, 676, 678, 679, 688, 689, 690, 692, 703, 814, 818, 824, 839, 862, 863, 889, 890, 932, 938, 1068, 1088, 1166, 1207, 1208, 1239, 1245, 1255, 1257, 1258, 1267, 1268, 1269, 1271, 1282, 1309, 1311, 1327, 1331, 1345, 1350, 1351, 1353, 1354, 1355], "supportsinterchang": 130, "suppos": [187, 253, 328, 567, 818, 1180, 1327], "sure": [65, 129, 134, 142, 143, 146, 148, 150, 154, 157, 256, 328, 818, 936], "surreal_query_to_fram": 144, "surrealdb": 144, "surrealql": 144, "suscept": 932, "swap": [879, 932], "swim": 748, "switch": [426, 839, 932, 1033], "sy": 182, "sydnei": 760, "symbol": [42, 43, 52, 328, 818, 932], "symmetr": [549, 938, 1163], "symmetri": [842, 849, 882, 901, 932], "synchron": [144, 926], "syntact": [297, 328, 622, 623, 690, 734, 736, 738, 750, 752, 755, 765, 770, 771, 772, 781, 783, 785, 786, 788, 790, 791, 796, 799, 801, 803, 807, 809, 818, 899, 932, 1207, 1208, 1241, 1269, 1327], "syntax": [46, 120, 210, 238, 249, 328, 582, 665, 673, 674, 677, 688, 689, 773, 774, 814, 854, 888, 932, 1244, 1252, 1253, 1256, 1267, 1268, 1327, 1351, 1353], "system": [42, 142, 143, 328, 430, 839, 932, 1037], "t": [42, 43, 45, 52, 65, 141, 142, 147, 153, 156, 219, 234, 238, 252, 293, 296, 328, 417, 426, 434, 451, 457, 470, 473, 475, 476, 530, 567, 608, 612, 673, 677, 688, 689, 699, 702, 705, 710, 808, 818, 858, 863, 876, 896, 932, 938, 1025, 1062, 1068, 1082, 1087, 1089, 1090, 1144, 1180, 1252, 1256, 1267, 1268, 1277, 1278, 1281, 1284, 1289, 1327, 1339, 1340, 1350], "t_": [294, 328, 474, 818, 897, 932, 1088, 1327], "t_0": [260, 328, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 818, 881, 932, 1088, 1327], "t_1": [260, 328, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 818, 881, 932, 1088, 1327], "t_a": [294, 328, 897, 932], "t_b": [294, 328, 897, 932], "t_c": [294, 328, 897, 932], "t_d": [294, 328, 897, 932], "t_i": [474, 818, 1088, 1327], "t_id": [235, 328, 864, 932], "t_n": [260, 328, 628, 631, 633, 635, 637, 639, 642, 644, 646, 818, 881, 932], "t_struct": [294, 328, 897, 932], "tab_spann": [328, 332], "tab_stub": [328, 332], "tab_styl": [328, 332], "tabl": [3, 6, 7, 13, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 44, 45, 46, 129, 136, 139, 146, 147, 153, 157, 158, 233, 235, 253, 275, 280, 287, 296, 297, 328, 332, 797, 830, 862, 864, 891, 899, 932, 1337, 1338, 1339, 1340, 1342, 1343, 1354, 1355], "table_nam": [3, 7, 44, 46, 147, 275, 328, 891, 932], "table_path": [45, 146, 157, 158, 328], "table_styl": [46, 328], "tableinfo": [3, 6], "tablemerg": [45, 328], "tablenotfounderror": [45, 328], "tables_scale_100": [138, 143], "tail": [217, 221, 328, 343, 658, 818, 932, 1109, 1238, 1327], "take": [46, 139, 147, 153, 172, 173, 182, 212, 213, 219, 242, 245, 252, 253, 257, 328, 353, 425, 447, 483, 490, 491, 533, 534, 566, 593, 595, 597, 661, 742, 744, 764, 766, 775, 818, 856, 858, 873, 879, 932, 957, 1032, 1058, 1101, 1102, 1147, 1148, 1318, 1327, 1345], "taken": [552, 692, 1166, 1271], "talkin": [710, 1289], "tan": [818, 1327, 1348], "tand": 1348, "tangent": [349, 350, 721, 722, 818, 953, 954, 1300, 1301, 1327, 1352], "tanh": [253, 328, 818, 1327], "target": [1, 44, 45, 46, 62, 147, 290, 328, 673, 688, 689, 702, 704, 705, 938, 1252, 1267, 1268, 1281, 1283, 1284, 1350], "target_alia": [45, 328], "target_t": [44, 328], "task": [64, 840, 932], "tau": [473, 474, 818, 1087, 1088, 1327], "tb": [165, 167, 205, 328, 386, 1086, 1327], "tbl": [138, 143, 1357], "tbl0": 1342, "tbl1": [1340, 1342], "tbl2": [1340, 1342], "tbl3": 1340, "tbl4": 1340, "tbl_cell_numeric_align": [15, 16, 33], "tbl_col": 23, "tbl_format": [26, 182], "tbl_hide_column_data_typ": 26, "tbl_hide_dataframe_shap": 26, "tbl_row": [31, 197, 328, 844, 932], "tbl_width_char": 763, "td": 457, "td1": 938, "td2": 938, "td3": 938, "tdf": [252, 328], "technic": 814, "tell": [666, 690, 1245, 1269], "tempor": [100, 190, 219, 231, 260, 262, 263, 282, 328, 407, 457, 504, 628, 631, 633, 635, 637, 639, 642, 644, 646, 777, 818, 830, 836, 858, 881, 932, 938, 1014, 1068, 1115, 1327, 1348, 1354], "temporalliter": [407, 777, 818, 1014, 1047, 1048, 1327], "temporari": [44, 328], "temporarili": [178, 182, 219, 260, 328, 628, 818, 858, 881, 932], "tenant": 39, "tenant_id": 39, "tend": [165, 167], "tensor": [290, 328, 1311, 1327], "tensordataset": [290, 328], "term": [473, 475, 476, 679, 692, 703, 818, 1087, 1089, 1090, 1258, 1271, 1282, 1327], "termin": [43, 52, 328, 932], "test": [0, 44, 144, 145, 147, 153, 204, 253, 328, 830, 1085, 1327, 1350], "test1": 1342, "test2": 1342, "test3": 1342, "test_1": [253, 328], "test_1_math": [253, 328], "test_1_phys": [253, 328], "test_2": [253, 328], "test_2_math": [253, 328], "test_2_phys": [253, 328], "test_data": 144, "test_df_height": 172, "test_func": 779, "test_lf": [904, 932], "test_miscellan": 1358, "test_numer": 1358, "test_price_calcul": 1358, "test_series_len": 176, "test_tabl": 145, "test_unique_xyz": 170, "testdb": 145, "testing1234": 1342, "text": [141, 144, 402, 403, 671, 679, 683, 684, 685, 688, 689, 691, 692, 703, 798, 1005, 1006, 1258, 1262, 1263, 1270, 1271, 1282, 1342, 1358], "text1": 689, "text2": 689, "textclaus": 144, "texttt": [658, 818, 1238, 1327], "th": [213, 328, 491, 534, 547, 658, 679, 703, 818, 856, 932, 1102, 1148, 1161, 1238, 1258, 1282, 1327], "than": [46, 52, 53, 54, 55, 63, 64, 103, 126, 133, 135, 142, 143, 144, 147, 153, 156, 162, 191, 218, 231, 233, 234, 238, 251, 261, 262, 264, 296, 314, 328, 402, 487, 489, 492, 494, 504, 518, 546, 565, 566, 567, 583, 615, 627, 649, 658, 679, 683, 686, 687, 695, 703, 712, 749, 780, 818, 839, 840, 857, 862, 863, 915, 932, 1005, 1115, 1160, 1180, 1201, 1212, 1225, 1238, 1258, 1262, 1265, 1266, 1274, 1282, 1291, 1308, 1327, 1358], "the_aws_access_key_id": [45, 146, 157, 158, 328], "the_aws_region": [45, 328], "the_aws_secret_access_kei": [45, 146, 157, 158, 328], "thei": [43, 46, 52, 56, 64, 65, 96, 97, 132, 156, 182, 234, 236, 263, 328, 608, 690, 698, 699, 818, 839, 863, 932, 936, 938, 1269], "them": [64, 129, 131, 132, 133, 135, 144, 145, 147, 151, 152, 153, 154, 156, 159, 160, 161, 182, 206, 207, 219, 234, 245, 253, 260, 290, 298, 328, 365, 474, 504, 537, 600, 601, 608, 628, 747, 758, 759, 761, 762, 805, 806, 818, 840, 851, 858, 863, 873, 881, 932, 938, 969, 1088, 1093, 1151, 1189, 1190, 1327, 1345, 1355], "therebi": [156, 159, 160], "therefor": [205, 328, 567, 808, 818, 1086, 1327], "theta": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "thi": [1, 2, 3, 4, 5, 6, 7, 10, 11, 16, 18, 20, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 63, 64, 65, 71, 72, 73, 74, 75, 79, 89, 97, 104, 129, 131, 132, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 186, 187, 188, 189, 192, 193, 195, 197, 198, 201, 202, 205, 207, 211, 212, 217, 218, 219, 220, 224, 226, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 273, 275, 276, 277, 280, 282, 285, 286, 287, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 309, 314, 327, 328, 331, 332, 340, 343, 344, 353, 365, 371, 372, 373, 378, 397, 398, 401, 407, 417, 418, 420, 426, 427, 438, 444, 445, 447, 451, 454, 457, 468, 472, 479, 489, 496, 498, 501, 502, 504, 508, 530, 531, 537, 546, 547, 548, 549, 550, 551, 553, 558, 559, 563, 564, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 585, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 608, 615, 618, 619, 620, 621, 622, 623, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 651, 652, 653, 654, 659, 660, 661, 664, 666, 673, 676, 678, 680, 681, 685, 686, 687, 690, 697, 698, 699, 700, 701, 706, 710, 712, 714, 717, 724, 725, 727, 728, 729, 730, 734, 738, 746, 747, 750, 752, 753, 766, 767, 769, 771, 772, 775, 776, 777, 780, 783, 785, 788, 790, 796, 799, 803, 807, 808, 809, 814, 818, 830, 833, 834, 835, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 850, 857, 858, 860, 862, 863, 864, 866, 868, 872, 873, 877, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 896, 898, 899, 901, 902, 903, 904, 905, 906, 907, 910, 915, 929, 930, 931, 932, 936, 937, 938, 940, 947, 948, 957, 969, 975, 976, 977, 982, 1000, 1003, 1008, 1009, 1014, 1015, 1025, 1026, 1033, 1034, 1036, 1045, 1055, 1056, 1058, 1062, 1065, 1068, 1079, 1081, 1084, 1086, 1092, 1093, 1102, 1104, 1108, 1110, 1120, 1129, 1144, 1145, 1151, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1173, 1178, 1180, 1181, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1192, 1195, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1239, 1240, 1242, 1243, 1245, 1252, 1255, 1257, 1259, 1260, 1264, 1265, 1266, 1269, 1276, 1277, 1278, 1285, 1289, 1291, 1292, 1294, 1297, 1298, 1302, 1304, 1306, 1307, 1308, 1309, 1311, 1312, 1313, 1315, 1316, 1317, 1327, 1332, 1336, 1337, 1338, 1342, 1350, 1353, 1354, 1355, 1356, 1358], "thing": [156, 163], "think": [444, 445, 1055, 1056], "third": [566, 818], "thoma": [245, 328, 873, 932], "those": [11, 36, 46, 142, 147, 263, 287, 297, 328, 487, 618, 673, 780, 818, 899, 932, 938, 1203, 1252, 1309, 1327], "though": [44, 144, 219, 328, 814, 858, 932], "thousand": [15, 33], "thousands_separ": [15, 16, 33], "thread": [20, 43, 52, 64, 138, 142, 143, 145, 178, 179, 274, 328, 530, 567, 661, 742, 818, 840, 890, 932, 977, 1144, 1167, 1240, 1327], "thread_loc": [567, 818], "thread_pool_s": 179, "threadpool": 63, "three": [46, 187, 260, 289, 328, 418, 615, 628, 650, 679, 688, 703, 818, 881, 932, 981, 1026, 1172, 1201, 1258, 1268, 1282, 1327], "threshold": [266, 328, 883, 932], "through": [130, 144, 814, 938, 1327, 1342], "throughout": 182, "throw": [45, 131, 132, 135, 199, 257, 328, 681, 682, 836, 846, 879, 932, 1260, 1261, 1327], "thu": [46, 207, 328, 331, 749, 1093, 1327], "thursdai": [219, 328, 425, 744, 858, 932, 1032], "ti": [618, 818, 1203, 1327], "time": [7, 18, 43, 45, 47, 51, 52, 53, 54, 55, 62, 63, 64, 72, 74, 113, 146, 152, 154, 156, 157, 159, 160, 161, 172, 173, 176, 197, 207, 219, 234, 235, 260, 298, 328, 360, 397, 398, 426, 427, 429, 430, 431, 434, 435, 444, 445, 447, 450, 451, 452, 454, 456, 457, 465, 468, 474, 525, 526, 558, 627, 628, 631, 633, 635, 637, 639, 642, 644, 646, 654, 702, 705, 709, 723, 724, 725, 747, 748, 758, 759, 760, 761, 762, 763, 769, 777, 805, 806, 818, 839, 840, 844, 858, 863, 864, 877, 881, 932, 938, 964, 1000, 1033, 1034, 1036, 1037, 1041, 1042, 1058, 1061, 1062, 1063, 1065, 1067, 1068, 1076, 1079, 1088, 1093, 1139, 1140, 1212, 1234, 1281, 1284, 1288, 1310, 1312, 1327, 1336, 1342, 1351, 1358], "time_column": [298, 328], "time_format": [43, 52, 328, 932], "time_unit": [72, 74, 427, 429, 435, 456, 468, 705, 760, 761, 762, 763, 769, 937, 938, 1034, 1036, 1042, 1067, 1079, 1284], "time_unit_m": [427, 1034], "time_unit_n": [427, 1034], "time_unit_u": 468, "time_zon": [72, 430, 432, 451, 705, 760, 761, 762, 937, 938, 1033, 1037, 1041, 1062, 1284], "timedelta": [219, 234, 260, 298, 328, 447, 452, 457, 465, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 758, 759, 761, 762, 805, 806, 818, 858, 863, 881, 932, 937, 938, 1046, 1052, 1058, 1063, 1076, 1088, 1189, 1190, 1242, 1317, 1327], "timeout": [64, 840, 932], "timestamp": [136, 146, 157, 219, 328, 451, 452, 465, 769, 858, 932, 1062, 1063, 1076, 1348], "timestamp_m": 456, "timestamp_n": 1067, "timestamp_u": [456, 1067], "timestep": 769, "timeunit": [43, 52, 72, 74, 328, 427, 429, 456, 468, 705, 760, 761, 762, 763, 932, 938, 1034, 1036, 1067, 1079, 1284], "timezon": [72, 146, 157, 432, 938, 1351], "tip": [567, 818], "titl": [46, 328, 331, 1327, 1332, 1336], "titlecas": [710, 1289], "tm": [429, 457, 938, 1351], "to_arrow": [232, 328, 1308, 1327, 1355], "to_batch": [232, 328], "to_dict": [190, 263, 328, 836, 932, 938], "to_dummi": [285, 290, 328, 1327], "to_fram": [401, 435, 452, 456, 465, 702, 937, 1026, 1201, 1226, 1228, 1273, 1274, 1281, 1327, 1332], "to_init_repr": [136, 328, 1327], "to_jax": [290, 328, 1327], "to_list": [136, 260, 328, 1244, 1256, 1327], "to_lowercas": 599, "to_numpi": [285, 290, 328, 566, 818, 1327], "to_panda": [328, 1327], "to_phys": [818, 1008, 1327], "to_python": 937, "to_seri": [58, 214, 328, 702, 743, 793, 1281, 1350], "to_sql": [44, 328], "to_str": [454, 1065], "to_struct": [328, 674], "to_torch": [285, 328, 1327], "to_uppercas": [339, 598, 675, 818], "togeth": 1350, "token": [2, 7, 43, 47, 51, 52, 53, 54, 55, 152, 154, 156, 158, 159, 160, 161, 328, 932], "tokyo": [136, 938], "tokyo_tz": 938, "toler": [165, 166, 167, 168, 234, 328, 863, 932], "tone": [46, 328], "tonight": [666, 690, 1245, 1269], "too": [20, 253, 328, 385, 608, 818, 932, 988], "tooltip": [328, 331, 1327, 1332], "toomanyrowsreturnederror": [261, 328], "top": [46, 275, 291, 328, 331, 725, 818, 891, 895, 932, 1327, 1332, 1355], "top_col": [46, 328], "top_k": [189, 328, 397, 398, 725, 818, 834, 932, 1000, 1327], "top_k_bi": [397, 398, 724, 818], "top_row": [46, 328], "tor_id": 136, "torch": [164, 290, 328, 1311, 1327], "torchexporttyp": [290, 328], "total": [46, 205, 309, 328, 458, 459, 460, 461, 462, 463, 464, 519, 539, 818, 910, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1086, 1133, 1153, 1327], "total_gross": 1336, "toward": [309, 519, 539, 818, 910, 1133, 1153, 1327], "tp": [1, 60], "tpu": [285, 328, 1306, 1327], "tr15": [685, 1264], "trace": 75, "traceback": [165, 166, 167, 168, 286, 328, 623, 818, 1208, 1308, 1327], "tracebacktyp": 1355, "track": [146, 157, 158, 238, 328, 558, 1355], "trail": [34, 217, 328, 697, 698, 1276, 1277], "train": [290, 328], "train_lf": [904, 932], "transfer": 145, "transferencod": [382, 383, 668, 669, 985, 986, 1247, 1248], "transform": [238, 275, 328, 566, 710, 797, 818, 891, 932, 1289], "transform_dens": [1327, 1332], "transit": [210, 328, 854, 932], "translat": 144, "transpar": [839, 932], "transpos": [253, 328], "travel": [146, 157], "travers": [630, 632, 634, 636, 638, 641, 643, 645, 818, 1214, 1215, 1217, 1220, 1221, 1222, 1327], "treat": [142, 143, 156, 184, 474, 665, 667, 677, 688, 689, 808, 818, 940, 1088, 1244, 1246, 1256, 1267, 1268, 1327], "tree": [583, 850, 932], "tree_format": [850, 932], "trend": [46, 328], "tri": [238, 328], "triangl": [314, 915], "trigger": [45, 236, 287, 328, 818, 936, 1309, 1327], "trigonometri": [1348, 1354], "trim": [136, 1350], "trim_decimal_zero": 34, "trip": 144, "true": [13, 14, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 43, 44, 45, 46, 51, 52, 53, 54, 55, 63, 64, 65, 129, 130, 131, 132, 134, 135, 136, 138, 139, 142, 143, 144, 146, 147, 148, 150, 153, 154, 156, 157, 159, 161, 162, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 182, 186, 190, 191, 192, 197, 199, 204, 209, 210, 212, 214, 216, 217, 218, 219, 224, 226, 227, 228, 231, 233, 234, 235, 236, 241, 242, 248, 249, 251, 253, 254, 257, 261, 262, 263, 264, 266, 274, 275, 278, 281, 283, 285, 286, 287, 290, 292, 293, 294, 296, 297, 298, 302, 308, 310, 312, 315, 316, 317, 318, 319, 320, 321, 328, 331, 338, 339, 340, 341, 342, 343, 354, 356, 357, 360, 364, 365, 373, 377, 381, 382, 384, 387, 388, 393, 396, 398, 399, 400, 404, 412, 413, 414, 415, 416, 418, 425, 427, 430, 433, 435, 437, 444, 445, 447, 448, 451, 452, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 475, 476, 483, 490, 492, 493, 494, 495, 498, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 518, 521, 522, 526, 533, 535, 537, 553, 558, 565, 566, 567, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 602, 603, 605, 607, 610, 611, 615, 620, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 653, 654, 658, 660, 661, 664, 665, 666, 667, 668, 670, 676, 677, 678, 680, 681, 682, 688, 689, 693, 694, 696, 702, 704, 705, 707, 709, 713, 715, 716, 725, 727, 730, 733, 734, 735, 736, 737, 739, 742, 743, 744, 749, 758, 761, 767, 773, 777, 780, 784, 790, 793, 796, 797, 800, 802, 805, 808, 809, 818, 836, 837, 838, 839, 840, 844, 846, 850, 853, 854, 857, 858, 862, 863, 864, 866, 868, 872, 877, 879, 883, 888, 890, 891, 896, 897, 898, 899, 902, 907, 909, 911, 913, 916, 917, 918, 919, 920, 921, 922, 931, 932, 936, 937, 938, 945, 946, 958, 960, 961, 964, 968, 969, 977, 984, 985, 987, 990, 1001, 1002, 1004, 1007, 1009, 1012, 1013, 1026, 1032, 1033, 1034, 1037, 1040, 1041, 1042, 1043, 1044, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1082, 1084, 1085, 1087, 1089, 1090, 1097, 1106, 1110, 1112, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1135, 1136, 1140, 1147, 1149, 1151, 1167, 1180, 1186, 1192, 1194, 1197, 1198, 1201, 1204, 1205, 1219, 1238, 1240, 1243, 1244, 1245, 1246, 1247, 1249, 1255, 1256, 1257, 1259, 1260, 1261, 1267, 1268, 1272, 1273, 1275, 1281, 1283, 1284, 1286, 1288, 1303, 1308, 1309, 1316, 1318, 1327, 1332, 1336, 1337, 1339, 1341, 1345, 1347, 1350, 1355, 1358], "truediv": [487, 818], "truncat": [26, 136, 142, 143, 156, 217, 219, 231, 262, 263, 282, 328, 858, 877, 932, 1354], "truncate_nod": [877, 932], "truncate_ragged_lin": [142, 143, 156], "truncate_str": 465, "truncate_td": 465, "trust": [420, 818, 845, 932], "try": [7, 43, 47, 51, 52, 53, 54, 55, 63, 64, 123, 142, 143, 148, 152, 154, 156, 159, 160, 161, 328, 839, 840, 850, 877, 888, 932], "try_cast": 1348, "try_parse_d": [138, 142, 143, 156], "try_parse_hive_d": [154, 159, 161], "ts_local": [451, 1062], "tseri": [444, 445, 1055, 1056], "tstamp": 938, "tstamp_tokyo": 938, "tstamp_utc": 938, "tue": [328, 331], "tuesdai": [219, 328, 858, 932], "tupl": [46, 66, 145, 147, 153, 187, 231, 238, 251, 261, 262, 263, 270, 290, 306, 328, 582, 624, 818, 877, 888, 932, 937, 938, 1209, 1230, 1327], "turn": [14, 52, 53, 54, 55, 63, 64, 142, 143, 156, 233, 234, 328, 839, 840, 850, 862, 863, 868, 877, 932], "twice": [46, 328], "two": [46, 56, 96, 97, 131, 133, 135, 145, 187, 210, 212, 234, 235, 244, 245, 262, 289, 295, 308, 314, 328, 332, 338, 422, 429, 487, 490, 493, 558, 615, 660, 740, 741, 747, 749, 751, 758, 761, 794, 795, 797, 818, 854, 863, 864, 872, 873, 898, 909, 915, 932, 938, 981, 1029, 1036, 1172, 1201, 1327, 1342, 1343, 1344, 1347, 1356], "two_a": 1355, "tworld": [699, 1276, 1278], "txt": [1, 18, 156, 665, 677, 1256, 1350], "type": [0, 1, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 46, 52, 53, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 129, 131, 132, 133, 134, 135, 137, 142, 143, 144, 146, 147, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 184, 187, 193, 203, 206, 212, 217, 219, 220, 232, 233, 238, 260, 265, 268, 280, 285, 286, 289, 290, 293, 305, 328, 340, 342, 345, 346, 347, 348, 349, 350, 353, 358, 359, 360, 362, 365, 376, 377, 381, 382, 383, 384, 385, 386, 387, 399, 401, 402, 403, 407, 408, 409, 410, 411, 418, 419, 425, 426, 428, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 477, 479, 490, 493, 496, 504, 505, 506, 507, 508, 509, 510, 519, 523, 524, 526, 531, 537, 539, 557, 558, 566, 567, 581, 615, 617, 621, 622, 623, 624, 626, 627, 628, 631, 633, 635, 637, 639, 642, 644, 646, 655, 656, 657, 664, 667, 668, 669, 672, 673, 674, 675, 678, 679, 680, 682, 683, 684, 692, 693, 694, 695, 702, 703, 707, 721, 722, 723, 730, 739, 747, 750, 757, 758, 759, 760, 761, 762, 763, 765, 773, 774, 776, 777, 778, 779, 780, 790, 793, 804, 805, 806, 809, 814, 818, 830, 839, 840, 849, 850, 851, 858, 862, 877, 881, 882, 888, 896, 906, 932, 937, 940, 945, 946, 958, 960, 961, 962, 963, 964, 966, 968, 969, 980, 981, 982, 984, 985, 986, 988, 989, 1001, 1003, 1005, 1006, 1014, 1026, 1027, 1032, 1033, 1035, 1037, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1085, 1088, 1092, 1108, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1135, 1136, 1137, 1138, 1140, 1145, 1151, 1153, 1171, 1172, 1194, 1201, 1207, 1208, 1209, 1211, 1212, 1233, 1235, 1243, 1244, 1246, 1247, 1248, 1250, 1251, 1252, 1253, 1254, 1257, 1258, 1259, 1261, 1262, 1263, 1271, 1272, 1273, 1274, 1281, 1282, 1286, 1307, 1308, 1310, 1318, 1327, 1336, 1343, 1348, 1350, 1354, 1355], "type_coercion": [52, 53, 54, 55, 63, 64, 839, 840, 850, 877, 888, 932], "typeerror": [45, 328], "typenam": [46, 328], "typic": [132, 144, 161, 238, 328, 434, 655, 818, 938, 1041, 1180, 1235, 1327], "tz": [705, 1284], "tzinfo": [146, 157, 938], "u": [46, 72, 74, 161, 174, 234, 328, 427, 429, 435, 456, 468, 702, 705, 735, 737, 760, 761, 762, 763, 769, 863, 932, 937, 938, 1034, 1036, 1042, 1067, 1079, 1281, 1284, 1340, 1351], "u1": [286, 328], "u16": [156, 1353, 1358], "u32": [18, 144, 188, 190, 196, 250, 304, 305, 309, 313, 319, 321, 328, 338, 344, 351, 352, 353, 354, 355, 358, 359, 361, 370, 386, 402, 403, 411, 412, 498, 500, 519, 523, 524, 527, 539, 544, 590, 606, 618, 626, 627, 631, 633, 635, 637, 639, 642, 644, 646, 650, 667, 677, 678, 683, 684, 685, 723, 728, 730, 734, 738, 742, 743, 750, 752, 773, 776, 788, 818, 833, 836, 843, 875, 905, 906, 910, 914, 920, 922, 932, 938, 957, 958, 959, 962, 963, 965, 974, 1001, 1005, 1006, 1008, 1020, 1110, 1137, 1138, 1141, 1153, 1158, 1203, 1211, 1212, 1227, 1246, 1256, 1257, 1262, 1263, 1310, 1314, 1316, 1327, 1336, 1344, 1345, 1346, 1350, 1355], "u64": [220, 305, 328, 496, 620, 818, 877, 906, 932, 938, 1108, 1205, 1327], "u8": [190, 283, 284, 296, 328, 623, 733, 818, 836, 932, 938, 1208, 1303, 1327, 1358], "udf": [178, 238, 252, 314, 328, 420, 567, 612, 780, 818, 845, 876, 915, 932, 1180, 1327], "ufunc": 103, "uid": 144, "uint": 1358, "uint16": [156, 415, 416, 719, 818, 938, 1023, 1024, 1298, 1308, 1311, 1327], "uint2": 1353, "uint32": [137, 164, 190, 205, 260, 305, 328, 353, 358, 359, 386, 402, 403, 411, 474, 490, 493, 519, 523, 524, 539, 621, 626, 627, 628, 631, 633, 635, 637, 639, 642, 644, 646, 667, 678, 683, 684, 723, 750, 773, 776, 818, 836, 881, 906, 932, 938, 958, 962, 963, 989, 1001, 1005, 1006, 1086, 1088, 1137, 1138, 1153, 1211, 1212, 1246, 1257, 1262, 1263, 1310, 1311, 1327], "uint4": 1355, "uint64": [137, 220, 260, 305, 328, 358, 359, 474, 496, 523, 524, 620, 628, 631, 633, 635, 637, 639, 642, 644, 646, 818, 881, 906, 932, 938, 962, 963, 1088, 1108, 1137, 1138, 1205, 1311, 1327], "uint8": [144, 190, 284, 285, 286, 296, 328, 415, 416, 623, 719, 733, 818, 836, 932, 937, 938, 1023, 1024, 1208, 1298, 1311, 1327, 1358], "uint8_pair": 1358, "uit": [692, 1271], "uk": [674, 1253], "unabl": [105, 147], "unalias": 573, "unari": [604, 818], "unbias": [475, 476, 818, 1089, 1090, 1327], "unchang": [205, 328, 622, 723, 818, 868, 915, 932, 1086, 1207, 1310, 1327], "uncompress": [41, 47, 48, 51, 55, 148, 159, 328, 932], "undefin": [726, 818], "under": [5, 6, 7, 43, 47, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 96, 97, 152, 154, 156, 159, 160, 161, 253, 275, 328, 810, 811, 813, 814, 819, 820, 823, 825, 826, 827, 891, 932, 1319, 1321, 1323, 1328, 1333, 1334, 1335], "underli": [1, 56, 71, 72, 74, 89, 97, 102, 112, 129, 131, 132, 133, 135, 144, 145, 147, 151, 152, 153, 154, 160, 169, 172, 176, 206, 207, 231, 232, 262, 280, 286, 328, 382, 427, 428, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 451, 453, 457, 466, 467, 468, 469, 620, 647, 665, 668, 677, 818, 851, 932, 938, 985, 1008, 1034, 1035, 1036, 1040, 1043, 1044, 1045, 1049, 1050, 1051, 1053, 1054, 1057, 1059, 1060, 1062, 1064, 1068, 1077, 1078, 1079, 1080, 1093, 1205, 1223, 1233, 1244, 1247, 1256, 1302, 1308, 1327, 1355], "understood": 780, "undo": [584, 591, 592, 594, 596, 598, 599], "unexpect": [112, 121, 144, 566, 567, 818, 1180, 1327], "unhelpfulli": [165, 167], "unicod": [26, 403, 679, 684, 685, 692, 703, 938, 1006, 1258, 1263, 1264, 1271, 1282, 1350], "unicodeform": [685, 1264], "unifi": [46, 285, 290, 328, 938], "uniform": [46, 328, 615, 818, 1201, 1327], "unimod": [658, 818, 1238, 1327], "unintend": [210, 328, 854, 932], "union": [63, 64, 65, 550, 839, 840, 850, 877, 888, 932, 938, 1164, 1354, 1355], "uniqu": [51, 55, 57, 75, 147, 169, 170, 171, 174, 176, 188, 228, 233, 249, 253, 263, 319, 328, 344, 355, 370, 418, 515, 544, 590, 615, 702, 704, 705, 709, 728, 730, 738, 788, 818, 833, 862, 920, 932, 936, 948, 959, 974, 1026, 1128, 1158, 1187, 1201, 1281, 1283, 1284, 1288, 1314, 1316, 1327, 1343, 1345], "unique_column_valu": [253, 328], "unique_count": [818, 1327], "uniquekeepstrategi": [293, 328, 896, 932], "unit": [46, 72, 74, 165, 166, 167, 168, 172, 176, 205, 328, 386, 427, 429, 435, 450, 456, 468, 474, 480, 564, 579, 702, 705, 729, 746, 760, 761, 762, 763, 769, 818, 877, 932, 936, 938, 989, 1034, 1036, 1042, 1061, 1067, 1079, 1086, 1088, 1094, 1178, 1281, 1284, 1315, 1327, 1358], "uniti": [2, 830], "univers": [184, 940], "unix": [71, 72, 435, 769, 1042], "unknown": [558, 673, 778, 1252], "unless": [46, 57, 131, 285, 290, 328, 697, 698, 793, 932, 1276, 1350], "unlik": [139, 219, 328, 858, 932], "unnam": [675, 1254], "unnest": [139, 328, 418, 615, 626, 674, 675, 694, 695, 715, 717, 730, 818, 932, 981, 1026, 1172, 1201, 1211, 1273, 1274, 1327, 1348, 1354], "unpivot": [244, 328, 872, 932], "unregist": [1338, 1339, 1340, 1355, 1357], "unsaf": [818, 936], "unset": [44, 154, 159, 171, 313, 328, 390, 391, 392, 394, 395, 451, 558, 818, 914, 993, 994, 995, 997, 998, 1062, 1327, 1336], "unsign": [90, 91, 92, 93, 620, 818, 938, 1205, 1327], "unsigned_integ": 938, "unstabl": [2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 63, 64, 73, 75, 79, 127, 139, 144, 146, 152, 154, 156, 157, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 275, 285, 290, 297, 328, 331, 332, 417, 418, 498, 567, 615, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 746, 818, 839, 840, 850, 891, 899, 932, 1009, 1025, 1026, 1110, 1201, 1213, 1216, 1218, 1219, 1306, 1311, 1327, 1332], "unstack": 328, "unstackdirect": [296, 328], "unsuit": 128, "unsupport": [45, 328], "until": [96, 219, 236, 328, 686, 687, 712, 858, 932, 1265, 1266, 1291], "up": [16, 46, 88, 145, 231, 234, 253, 262, 263, 269, 282, 328, 406, 407, 567, 679, 688, 689, 703, 818, 862, 863, 868, 886, 932, 938, 1011, 1258, 1267, 1268, 1282, 1327], "upcast": [343, 818], "upcast_integer_typ": [1, 60], "updat": [45, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 182, 197, 328, 844, 932], "upgrad": 108, "upheld": [868, 932], "upon": 143, "upper": [142, 143, 144, 205, 219, 328, 407, 498, 504, 558, 593, 729, 739, 758, 759, 761, 762, 777, 805, 806, 818, 858, 932, 1014, 1086, 1110, 1115, 1178, 1315, 1327, 1345, 1348], "upper_bound": [219, 328, 407, 504, 558, 818, 858, 932, 1014, 1115, 1178, 1327], "uppercas": [599, 711, 1290, 1350], "upsampl": [219, 328, 858, 932], "urandom": [386, 989], "uri": [44, 45, 144, 145, 146, 157, 158, 328], "url": [2, 144, 145, 154, 159, 161, 673, 675, 1252, 1254], "urllib": 145, "us": [1, 2, 13, 15, 17, 18, 20, 26, 31, 33, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 51, 52, 55, 56, 57, 63, 64, 65, 72, 88, 96, 97, 100, 104, 127, 130, 132, 133, 135, 137, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 188, 189, 190, 193, 197, 199, 201, 202, 208, 209, 210, 212, 218, 219, 226, 228, 230, 231, 232, 234, 238, 244, 248, 249, 251, 252, 253, 260, 261, 262, 263, 264, 266, 267, 269, 274, 275, 276, 280, 282, 283, 284, 285, 286, 287, 290, 291, 292, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 307, 314, 328, 331, 338, 340, 342, 344, 353, 354, 377, 382, 383, 385, 398, 400, 402, 403, 404, 407, 417, 420, 423, 424, 432, 450, 451, 452, 454, 457, 465, 468, 470, 473, 474, 475, 476, 477, 481, 482, 483, 487, 498, 502, 503, 504, 516, 530, 546, 554, 558, 560, 566, 567, 570, 591, 594, 596, 598, 599, 608, 615, 618, 620, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 649, 651, 653, 654, 658, 660, 661, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 688, 689, 690, 692, 694, 696, 698, 699, 700, 701, 702, 704, 705, 709, 712, 713, 717, 725, 731, 732, 734, 735, 736, 737, 738, 741, 742, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 767, 769, 773, 774, 776, 777, 778, 780, 781, 782, 784, 786, 787, 790, 793, 794, 795, 796, 797, 799, 800, 801, 802, 805, 806, 807, 808, 809, 814, 817, 818, 829, 830, 833, 834, 835, 836, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 857, 858, 863, 866, 872, 881, 882, 883, 884, 886, 890, 891, 892, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 915, 932, 937, 938, 945, 946, 948, 977, 981, 985, 986, 988, 1005, 1006, 1009, 1025, 1027, 1030, 1031, 1039, 1047, 1048, 1061, 1062, 1063, 1065, 1068, 1076, 1079, 1082, 1087, 1088, 1089, 1090, 1095, 1096, 1101, 1107, 1110, 1113, 1114, 1115, 1130, 1144, 1160, 1167, 1172, 1180, 1201, 1203, 1205, 1207, 1209, 1211, 1212, 1213, 1225, 1226, 1228, 1229, 1232, 1238, 1240, 1242, 1243, 1244, 1245, 1247, 1248, 1251, 1252, 1253, 1255, 1256, 1257, 1262, 1263, 1264, 1267, 1268, 1269, 1271, 1273, 1281, 1283, 1284, 1288, 1291, 1302, 1303, 1305, 1308, 1309, 1317, 1327, 1336, 1337, 1338, 1339, 1340, 1342, 1343, 1350, 1351, 1355, 1358], "usag": [172, 176, 272, 328, 938, 1233, 1327], "usd": [217, 328, 1358], "use_pyarrow": [51, 55, 142, 146, 148, 150, 154, 157, 286, 328, 932, 1308, 1327], "use_pyarrow_extension_arrai": [287, 328, 1309, 1327], "use_pyarrow_write_to_dataset": [51, 328], "use_statist": [154, 161], "user": [44, 144, 145, 184, 238, 252, 314, 328, 566, 567, 612, 651, 780, 818, 876, 915, 932, 936, 940, 1180, 1229, 1327], "user_conn": 144, "usernam": [142, 145, 148, 150], "userwarn": 1, "usr": 144, "usual": [104, 145, 182, 290, 328, 426, 1033], "utc": [146, 157, 426, 430, 432, 434, 451, 702, 705, 937, 938, 1033, 1037, 1041, 1062, 1281, 1284], "utc_tz": 938, "utf": [43, 52, 87, 328, 932], "utf8": [26, 142, 143, 156, 679, 692, 703, 1258, 1271, 1282], "utf8_borders_onli": 26, "utf8_ful": [26, 57, 136], "utf8_full_condens": [13, 26, 136], "utf8_horizontal_onli": 26, "utf8_no_bord": 26, "util": [290, 328, 769, 932, 936], "uvloop": 144, "uvw": [674, 1253], "v": [14, 15, 51, 205, 328, 650, 735, 737, 818, 1227, 1327, 1339, 1340], "v1": 38, "v2": [14, 148, 159], "val": [46, 259, 328, 567, 612, 723, 808, 818, 880, 932], "valid": [43, 46, 52, 72, 142, 144, 148, 150, 154, 156, 176, 182, 199, 205, 233, 234, 257, 328, 417, 665, 667, 673, 674, 675, 677, 682, 688, 689, 808, 818, 846, 862, 863, 879, 907, 932, 938, 1025, 1086, 1244, 1246, 1252, 1253, 1254, 1256, 1261, 1267, 1268, 1327, 1336, 1337], "validate_output_schema": [868, 932], "vals_phys": [723, 818], "valu": [10, 11, 16, 17, 18, 19, 23, 26, 34, 36, 42, 43, 46, 51, 52, 55, 56, 57, 65, 66, 69, 75, 76, 84, 85, 94, 97, 106, 131, 132, 134, 135, 142, 143, 144, 145, 154, 156, 159, 161, 162, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 182, 186, 188, 189, 190, 197, 201, 202, 204, 207, 208, 209, 210, 214, 217, 219, 220, 221, 225, 229, 231, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 249, 251, 253, 254, 255, 257, 260, 261, 262, 263, 264, 271, 274, 276, 277, 278, 279, 281, 282, 286, 287, 291, 292, 295, 296, 297, 298, 299, 306, 309, 310, 312, 315, 316, 318, 319, 328, 331, 332, 336, 337, 338, 340, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 387, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 416, 417, 418, 421, 423, 424, 429, 433, 443, 448, 457, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 521, 522, 523, 524, 527, 528, 529, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 551, 553, 554, 555, 556, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 575, 586, 587, 588, 589, 590, 600, 601, 602, 603, 606, 608, 609, 612, 613, 615, 616, 618, 621, 622, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 655, 656, 657, 658, 660, 661, 662, 664, 665, 667, 668, 669, 670, 671, 673, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 703, 712, 714, 718, 719, 721, 722, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 742, 745, 747, 748, 750, 752, 753, 754, 755, 756, 766, 767, 772, 773, 774, 775, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 792, 793, 794, 795, 801, 802, 808, 818, 833, 834, 844, 847, 848, 852, 853, 854, 858, 860, 861, 862, 863, 869, 870, 871, 872, 874, 875, 878, 879, 881, 887, 890, 892, 893, 895, 898, 899, 900, 910, 911, 913, 916, 917, 919, 920, 932, 938, 943, 945, 946, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 965, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 982, 983, 985, 986, 987, 988, 989, 990, 1001, 1002, 1005, 1006, 1007, 1011, 1014, 1016, 1017, 1018, 1020, 1025, 1026, 1027, 1028, 1030, 1031, 1036, 1040, 1054, 1059, 1068, 1077, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1100, 1101, 1102, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142, 1143, 1146, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1165, 1167, 1168, 1169, 1170, 1173, 1174, 1180, 1181, 1182, 1184, 1185, 1187, 1189, 1190, 1192, 1193, 1195, 1196, 1200, 1201, 1202, 1203, 1207, 1208, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1225, 1226, 1227, 1228, 1231, 1235, 1236, 1237, 1238, 1240, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1282, 1291, 1294, 1298, 1299, 1300, 1301, 1308, 1309, 1310, 1314, 1316, 1318, 1327, 1336, 1341, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1353, 1355, 1357, 1358], "value1": [661, 818], "value2": [661, 818], "value_a": 1355, "value_b": 1355, "value_count": [728, 818, 1327], "value_cum_sum": [416, 818], "value_cum_sum_all_fil": [416, 818], "value_nam": [244, 295, 328, 872, 898, 932], "value_var": [244, 295, 328, 872, 898, 932], "valueerror": [21, 26], "valueexcept": 778, "var": [46, 177, 328, 645, 646, 818, 932, 1327, 1344], "var_samp": 1344, "vari": [147, 153, 426, 1033, 1358], "variabl": [7, 36, 43, 47, 51, 52, 53, 54, 55, 84, 152, 154, 156, 159, 160, 161, 175, 178, 244, 283, 295, 328, 872, 898, 932, 1303, 1327, 1337, 1339, 1355], "variable_nam": [244, 295, 328, 872, 898, 932], "variad": 144, "varianc": [299, 328, 476, 516, 645, 646, 731, 807, 818, 900, 932, 1090, 1130, 1222, 1317, 1327, 1348], "variou": [144, 187, 193, 328, 818, 841, 932, 937, 938, 1327], "vector": [630, 632, 634, 636, 638, 641, 643, 645, 818, 1214, 1215, 1217, 1220, 1221, 1222, 1327], "vectoris": [444, 445, 1055, 1056], "vein": 182, "verbos": [35, 165, 167, 182, 674, 1253], "veri": [144, 231, 292, 328, 567, 818, 915, 1349], "verifi": [234, 328, 863, 932], "versicolor": [328, 331], "version": [7, 44, 45, 62, 142, 143, 146, 147, 157, 164, 169, 170, 171, 172, 176, 179, 186, 188, 198, 220, 233, 244, 268, 275, 285, 286, 290, 304, 309, 328, 331, 420, 432, 444, 445, 457, 468, 489, 496, 574, 575, 581, 585, 622, 664, 672, 717, 732, 741, 749, 792, 797, 818, 833, 845, 850, 862, 872, 885, 891, 904, 905, 910, 932, 938, 1039, 1047, 1048, 1055, 1056, 1068, 1079, 1107, 1108, 1207, 1243, 1251, 1306, 1308, 1311, 1327, 1332], "versu": [197, 328, 844, 932], "vertic": [65, 207, 296, 300, 328, 664, 680, 1243, 1259], "vertical_relax": 65, "via": [36, 142, 143, 144, 154, 156, 159, 160, 161, 185, 187, 198, 231, 262, 328, 420, 567, 675, 818, 845, 932, 941, 1254], "view": [567, 818], "visibl": [23, 205, 328, 1086, 1327], "visit": [417, 818, 1025, 1327], "visual": [226, 228, 328, 582, 888, 932], "volk": 139, "vote": [673, 675, 1252, 1254], "vowel": [688, 689, 1267, 1268], "vstack": [65, 207, 328], "w": [46, 144, 219, 263, 328, 667, 671, 673, 675, 735, 737, 858, 932, 938, 1246, 1250, 1252, 1254, 1277, 1339, 1340, 1343], "w_i": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "wa": [44, 62, 104, 147, 198, 285, 286, 328, 331, 420, 623, 690, 763, 818, 845, 932, 938, 1208, 1269, 1308, 1327, 1332], "wai": [96, 97, 129, 131, 132, 133, 135, 151, 152, 160, 218, 232, 252, 274, 307, 328, 452, 612, 661, 673, 750, 814, 818, 842, 849, 857, 876, 882, 890, 901, 908, 915, 932, 1063, 1252], "walk": 748, "want": [64, 132, 134, 142, 147, 156, 182, 207, 238, 249, 260, 275, 328, 402, 425, 483, 566, 567, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 654, 666, 683, 688, 689, 690, 744, 753, 758, 761, 767, 790, 793, 809, 818, 840, 891, 907, 932, 938, 1005, 1032, 1093, 1180, 1245, 1262, 1267, 1268, 1269, 1327, 1342], "warehous": 145, "warn": [99, 100, 103, 104, 107, 114, 116, 117, 127, 234, 328, 608, 777, 818, 863, 932, 1327], "watermark": [51, 328], "wb": [46, 328], "we": [51, 140, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 187, 197, 198, 219, 234, 253, 260, 298, 328, 331, 420, 447, 452, 465, 498, 530, 558, 566, 567, 628, 631, 633, 635, 637, 639, 642, 644, 646, 675, 688, 689, 707, 757, 758, 759, 760, 761, 762, 778, 805, 806, 808, 818, 844, 845, 858, 863, 868, 881, 932, 1058, 1063, 1076, 1110, 1144, 1180, 1254, 1268, 1286, 1327, 1332, 1339], "weather": [688, 689, 1267, 1268], "wed": [328, 331], "wednesdai": [219, 328, 454, 457, 858, 932, 1065, 1068], "week": [219, 234, 260, 298, 328, 425, 447, 452, 465, 467, 474, 628, 631, 633, 635, 637, 639, 642, 644, 646, 744, 758, 759, 761, 762, 763, 805, 806, 818, 858, 863, 881, 932, 938, 1032, 1058, 1063, 1076, 1078, 1088, 1327, 1351], "week_mask": [425, 744, 1032], "weekdai": [433, 448], "weekend": [425, 744, 1032], "weekli": [219, 328, 465, 858, 932, 1076], "weghorst": [675, 1254], "weight": [139, 473, 474, 475, 476, 629, 630, 632, 634, 636, 638, 641, 643, 645, 658, 818, 1087, 1088, 1089, 1090, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1238, 1327], "wei\u00df": 1350, "well": [46, 142, 143, 144, 156, 328, 504, 797, 818, 1115, 1327, 1355], "were": [182, 622, 623, 814, 818, 1207, 1208, 1327], "west": [75, 235, 328, 864, 932], "what": [187, 249, 328, 425, 566, 666, 690, 818, 1032, 1245, 1269], "whatev": 182, "when": [16, 20, 23, 25, 29, 43, 44, 45, 46, 47, 48, 51, 52, 55, 56, 72, 88, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 139, 142, 143, 144, 145, 147, 148, 150, 152, 153, 154, 156, 157, 159, 160, 161, 162, 165, 166, 167, 168, 172, 176, 182, 189, 197, 203, 205, 207, 209, 212, 219, 233, 235, 238, 252, 257, 261, 263, 266, 267, 271, 274, 280, 283, 285, 286, 290, 291, 293, 297, 303, 328, 372, 385, 402, 403, 407, 425, 473, 475, 476, 482, 551, 558, 579, 612, 622, 623, 652, 660, 661, 666, 672, 676, 678, 679, 683, 684, 690, 692, 697, 698, 699, 702, 703, 742, 744, 753, 767, 777, 818, 834, 844, 853, 858, 862, 864, 868, 879, 883, 884, 887, 890, 895, 896, 899, 903, 929, 932, 976, 988, 1005, 1006, 1014, 1027, 1032, 1086, 1087, 1089, 1090, 1093, 1096, 1165, 1207, 1208, 1226, 1228, 1231, 1245, 1251, 1255, 1257, 1258, 1262, 1263, 1269, 1271, 1276, 1277, 1278, 1281, 1282, 1302, 1303, 1308, 1327, 1342, 1355], "when_matched_update_al": [45, 328], "when_not_matched_insert_al": [45, 328], "where": [46, 57, 104, 144, 145, 147, 201, 202, 207, 210, 219, 231, 235, 244, 253, 262, 275, 276, 285, 290, 295, 297, 299, 328, 354, 457, 467, 470, 472, 474, 483, 554, 560, 566, 603, 621, 650, 658, 661, 663, 690, 710, 731, 743, 749, 751, 794, 795, 797, 799, 807, 808, 818, 847, 848, 854, 858, 864, 872, 891, 892, 898, 899, 900, 932, 958, 1068, 1078, 1082, 1084, 1088, 1093, 1097, 1192, 1227, 1238, 1242, 1269, 1289, 1317, 1318, 1327, 1336, 1344, 1354, 1355, 1357], "wherea": [142, 156, 260, 328, 400, 404, 452, 465, 600, 601, 628, 818, 881, 932, 1063, 1076, 1189, 1190, 1327], "wherev": [46, 238, 314, 328, 567, 818, 1180, 1327], "whether": [43, 52, 133, 135, 139, 147, 153, 154, 159, 161, 176, 180, 204, 230, 234, 269, 274, 328, 340, 342, 356, 357, 437, 453, 495, 521, 522, 608, 651, 661, 676, 678, 742, 818, 863, 868, 886, 890, 932, 938, 945, 946, 960, 961, 1004, 1009, 1044, 1064, 1085, 1106, 1107, 1135, 1136, 1255, 1257, 1327, 1339, 1355], "which": [1, 12, 16, 26, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 132, 134, 142, 143, 144, 145, 146, 147, 152, 153, 154, 156, 157, 158, 159, 160, 161, 172, 175, 177, 182, 189, 190, 197, 198, 201, 202, 207, 208, 218, 219, 224, 233, 234, 253, 260, 268, 285, 286, 291, 293, 298, 328, 340, 377, 385, 420, 425, 447, 452, 454, 465, 474, 480, 504, 506, 509, 511, 512, 513, 514, 558, 566, 567, 579, 581, 628, 631, 633, 635, 637, 639, 642, 644, 646, 689, 707, 744, 758, 759, 761, 762, 763, 777, 805, 806, 808, 818, 834, 836, 839, 842, 844, 845, 847, 848, 849, 850, 858, 862, 863, 881, 885, 895, 896, 901, 932, 938, 981, 988, 1032, 1058, 1063, 1065, 1076, 1088, 1093, 1094, 1115, 1118, 1121, 1123, 1124, 1125, 1126, 1172, 1228, 1286, 1306, 1308, 1327, 1337, 1343, 1355, 1358], "while": [7, 45, 64, 143, 146, 147, 157, 161, 172, 176, 182, 231, 244, 292, 295, 297, 328, 403, 622, 684, 818, 840, 872, 898, 899, 932, 1006, 1207, 1263, 1327], "white": [46, 328], "whitespac": [136, 697, 698, 699, 1276, 1277, 1278, 1350], "whole": [566, 660, 661, 673, 818, 915, 932, 1252], "whose": [57, 234, 253, 328, 477, 765, 818, 863, 932, 938], "why": [839, 932], "wide": [144, 217, 244, 253, 295, 296, 328, 872, 898, 932], "width": [32, 46, 66, 142, 143, 156, 328, 331, 557, 746, 932, 1171, 1327, 1332], "wiki": 26, "wikipedia": 26, "wildcard": [477, 713, 753, 754, 767, 792, 814, 818, 936], "win_loss": [46, 328], "window": [142, 143, 156, 219, 260, 328, 417, 473, 475, 476, 567, 608, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 747, 794, 795, 818, 858, 881, 932, 1025, 1087, 1089, 1090, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1327], "window_s": [629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 794, 795, 818, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1327], "windowmappingstrategi": [608, 818], "winter": [676, 678, 688, 689, 1255, 1257], "wise": [46, 57, 144, 212, 328, 345, 346, 347, 348, 349, 350, 408, 409, 410, 478, 562, 655, 656, 657, 721, 722, 767, 792, 818, 949, 950, 951, 952, 953, 954, 1016, 1017, 1018, 1091, 1176, 1177, 1235, 1236, 1237, 1300, 1301, 1327], "wish": [189, 291, 328, 397, 398, 724, 725, 818, 834, 895, 932, 1000, 1312, 1327], "with_column": [1, 18, 60, 63, 64, 219, 252, 260, 290, 296, 303, 328, 337, 339, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 370, 371, 372, 373, 377, 382, 383, 385, 386, 399, 400, 402, 403, 404, 407, 412, 413, 414, 415, 416, 418, 421, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 466, 467, 469, 471, 472, 474, 481, 482, 487, 492, 494, 496, 502, 503, 504, 507, 508, 510, 511, 512, 513, 514, 518, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 565, 566, 567, 587, 589, 591, 592, 594, 596, 598, 599, 602, 603, 604, 608, 609, 612, 613, 615, 618, 622, 623, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 648, 652, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 708, 710, 711, 712, 714, 717, 718, 723, 726, 733, 735, 737, 740, 744, 745, 746, 747, 748, 753, 754, 756, 757, 759, 760, 764, 774, 777, 779, 782, 784, 787, 798, 802, 804, 806, 808, 814, 818, 839, 840, 850, 858, 860, 876, 877, 881, 888, 903, 932, 938, 1026, 1062, 1201, 1257, 1327, 1355], "with_column_nam": 156, "with_columns_seq": [328, 932], "with_context": 932, "with_field": [567, 818], "with_replac": [264, 328, 546, 649, 818, 1160, 1225, 1327], "with_row_count": [328, 932], "with_row_index": [1, 260, 304, 328, 631, 633, 635, 637, 639, 642, 644, 646, 818, 905, 932, 1226, 1327, 1332], "within": [51, 66, 76, 84, 165, 166, 167, 168, 218, 219, 220, 234, 260, 298, 328, 496, 618, 661, 818, 858, 863, 881, 932, 1108, 1327, 1355], "without": [1, 2, 3, 4, 5, 6, 7, 37, 38, 39, 40, 43, 45, 47, 51, 52, 53, 54, 55, 62, 63, 64, 73, 75, 79, 104, 107, 136, 139, 146, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 233, 235, 275, 285, 286, 290, 296, 297, 328, 331, 332, 417, 418, 498, 567, 615, 629, 631, 633, 635, 637, 639, 640, 642, 644, 646, 666, 676, 678, 690, 746, 750, 777, 796, 818, 839, 840, 850, 862, 864, 891, 899, 932, 1004, 1009, 1025, 1026, 1110, 1201, 1213, 1216, 1218, 1219, 1245, 1255, 1257, 1269, 1306, 1308, 1311, 1327, 1332, 1357], "without_fil": [146, 157, 158], "wod": [699, 1278], "womp": [294, 328, 897, 932], "word": [145, 688, 689, 698, 699, 710, 1289], "work": [46, 73, 75, 79, 143, 162, 267, 303, 328, 340, 342, 378, 402, 403, 406, 407, 477, 486, 530, 559, 566, 567, 591, 592, 594, 596, 598, 599, 608, 679, 683, 684, 692, 703, 727, 777, 818, 884, 903, 932, 938, 945, 946, 982, 1005, 1006, 1011, 1014, 1100, 1144, 1173, 1258, 1262, 1263, 1271, 1282, 1313, 1327], "workaround": 328, "workbook": [46, 147, 153, 328], "working_with_conditional_format": [46, 328], "working_with_sparklin": [46, 328], "worksheet": [46, 147, 153, 328], "workspac": 2, "workspace_url": 2, "world": [1, 26, 666, 690, 697, 698, 699, 938, 1151, 1245, 1269, 1276, 1277, 1278, 1338, 1341], "wors": [890, 932], "worth": [530, 1144], "worthwhil": [165, 167], "would": [103, 142, 143, 156, 187, 286, 290, 328, 331, 353, 364, 425, 535, 566, 567, 578, 608, 618, 742, 744, 818, 957, 968, 1032, 1149, 1203, 1308, 1327, 1332, 1353], "wrap": [86, 136, 399, 504, 566, 818, 1001, 1327], "wrap_numer": [399, 818, 1001, 1327], "wrapper": [64, 840, 932], "writabl": [41, 43, 47, 48, 49, 50, 51, 268, 286, 328, 1308, 1327], "write": [41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 141, 143, 148, 182, 193, 328, 407, 582, 585, 818, 866, 888, 932, 938, 1014, 1327], "write_avro": 328, "write_clipboard": [141, 328], "write_csv": [42, 143, 156, 328], "write_databas": 328, "write_delta": 328, "write_excel": 328, "write_ipc": [148, 328], "write_ipc_stream": 328, "write_json": 328, "write_markdown_frame_to_stdout": 182, "write_ndjson": [49, 328], "write_parquet": 328, "write_t": [51, 328], "write_to_dataset": [51, 328], "writeabl": [286, 328, 1308, 1327], "written": [12, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 268, 328, 581, 885, 932], "ww": [1350, 1357], "www": [685, 715, 1264], "x": [33, 57, 65, 88, 106, 130, 136, 142, 143, 145, 147, 153, 156, 169, 170, 172, 186, 205, 223, 226, 228, 233, 253, 262, 263, 292, 295, 296, 328, 331, 337, 339, 341, 360, 365, 386, 412, 419, 471, 472, 487, 492, 494, 496, 518, 525, 537, 563, 565, 566, 567, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 602, 603, 607, 613, 621, 622, 623, 627, 655, 658, 694, 717, 718, 723, 726, 733, 735, 737, 740, 741, 747, 753, 754, 756, 767, 778, 779, 782, 784, 787, 792, 797, 802, 808, 818, 862, 868, 889, 891, 898, 932, 937, 938, 969, 1008, 1020, 1096, 1180, 1207, 1208, 1235, 1238, 1273, 1306, 1310, 1311, 1327, 1332, 1339, 1340, 1343, 1349, 1355, 1357], "x00": [381, 382, 383, 384, 385, 387, 668, 984, 985, 986, 987, 988, 990, 1247], "x01": [385, 988], "x05": [385, 988], "x07": 386, "x1": 386, "x10": [385, 988], "x80": 386, "x83": 386, "x88": 386, "x8e": 386, "x99": 386, "x_": [474, 818, 1088, 1327], "x_0": [296, 328, 473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327], "x_1": [296, 328, 474, 818, 1088, 1327], "x_2": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "x_i": [474, 818, 1088, 1327], "x_invers": [613, 818], "x_pow_8": 1349, "x_round": 1349, "x_round_1": 1349, "x_squar": [613, 818], "x_t": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "x_uniqu": [590, 818], "x_y": [365, 537], "xb": 386, "xb9neq": 386, "xbd": 386, "xc14": 386, "xd3": 386, "xdist": 1358, "xee": 386, "xf4v": 386, "xf9": 386, "xfb": 386, "xff": [381, 382, 383, 384, 387, 668, 984, 985, 986, 987, 990, 1247], "xi": [674, 1253], "xl": 147, "xlog2": [589, 613, 818], "xlsb": 147, "xlsx": [46, 147, 328], "xlsx2csv": [147, 164], "xlsxwriter": [46, 164, 328], "xor": [396, 818, 999, 1327, 1346], "xor_xi": [733, 818], "xx": [16, 58, 60, 176, 197, 275, 328, 844, 932, 938, 1343, 1350, 1357], "xxx": [201, 328, 715, 847, 932], "xy": [58, 60], "xyz": [13, 22, 24, 25, 26, 27, 28, 29, 30, 31, 337, 667, 674, 818, 1246, 1253, 1304, 1327], "y": [33, 57, 65, 88, 106, 130, 136, 169, 170, 172, 186, 205, 226, 228, 233, 253, 262, 263, 292, 295, 296, 328, 331, 337, 339, 341, 360, 365, 386, 454, 457, 471, 472, 492, 494, 518, 525, 537, 565, 567, 590, 592, 594, 596, 598, 599, 602, 603, 607, 621, 622, 623, 627, 702, 704, 705, 717, 726, 733, 735, 737, 740, 741, 756, 763, 778, 782, 784, 787, 797, 802, 818, 862, 889, 891, 898, 932, 937, 938, 969, 1008, 1065, 1068, 1207, 1208, 1281, 1283, 1284, 1327, 1332, 1343, 1350, 1351, 1357], "y_": [473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327], "y_0": [296, 328, 473, 474, 475, 476, 818, 1087, 1088, 1089, 1090, 1327], "y_1": [296, 328], "y_i": [474, 818, 1088, 1327], "y_mul": 717, "y_t": [473, 475, 476, 818, 1087, 1089, 1090, 1327], "y_uniqu": [590, 818], "ya": [692, 1271], "ya29": 158, "year": [219, 234, 260, 275, 298, 328, 425, 437, 438, 447, 448, 450, 452, 465, 466, 628, 631, 633, 635, 637, 639, 642, 644, 646, 744, 757, 758, 759, 760, 761, 762, 805, 806, 818, 858, 863, 881, 932, 938, 1032, 1044, 1045, 1058, 1059, 1061, 1063, 1076, 1077, 1351], "yellow": [328, 332, 381, 382, 383, 384, 387], "yield": [133, 135, 142, 143, 144, 156, 205, 207, 230, 292, 328, 487, 566, 608, 818, 932, 1086, 1093, 1327], "you": [1, 16, 20, 46, 51, 55, 57, 64, 65, 129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 147, 148, 151, 152, 156, 160, 162, 182, 189, 207, 210, 219, 230, 231, 234, 238, 249, 253, 260, 261, 262, 263, 275, 282, 285, 291, 292, 293, 295, 314, 328, 331, 397, 398, 402, 425, 444, 445, 447, 451, 454, 457, 477, 483, 504, 530, 558, 566, 567, 582, 608, 613, 620, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 654, 666, 683, 688, 689, 690, 710, 713, 724, 725, 744, 753, 758, 761, 763, 767, 777, 780, 790, 793, 797, 809, 818, 834, 840, 854, 858, 863, 881, 888, 891, 895, 896, 898, 907, 915, 932, 936, 938, 1000, 1005, 1032, 1055, 1056, 1062, 1065, 1068, 1093, 1115, 1144, 1180, 1199, 1205, 1245, 1262, 1267, 1268, 1269, 1289, 1306, 1312, 1327, 1332, 1337, 1342, 1358], "your": [44, 46, 56, 57, 97, 142, 143, 144, 145, 147, 162, 182, 231, 233, 238, 262, 263, 266, 282, 302, 307, 314, 328, 331, 430, 474, 489, 567, 675, 702, 704, 705, 712, 780, 818, 862, 868, 883, 902, 908, 915, 932, 1037, 1088, 1180, 1254, 1281, 1283, 1284, 1291, 1327, 1332, 1358], "yy": [16, 58, 60, 176, 197, 275, 328, 844, 932, 938, 1343, 1350, 1357], "yyi": [201, 328, 715, 847, 932], "yyyi": [46, 328], "yz": [58, 60], "z": [46, 65, 88, 136, 170, 205, 226, 228, 233, 262, 263, 292, 295, 296, 328, 337, 339, 341, 496, 525, 567, 592, 594, 596, 598, 599, 607, 621, 622, 623, 666, 674, 676, 678, 690, 702, 705, 735, 737, 756, 782, 784, 787, 793, 797, 802, 818, 862, 889, 891, 898, 932, 937, 938, 1096, 1207, 1208, 1245, 1253, 1255, 1257, 1269, 1281, 1284, 1327, 1339, 1343, 1355, 1357], "z_0": [296, 328], "z_1": [296, 328], "zap": 938, "zero": [34, 46, 129, 130, 140, 142, 143, 148, 150, 154, 171, 174, 186, 209, 219, 231, 261, 275, 280, 286, 287, 328, 482, 558, 563, 650, 658, 712, 726, 818, 837, 853, 858, 932, 1013, 1096, 1172, 1238, 1291, 1302, 1308, 1309, 1327, 1349, 1355], "zero_copy_onli": [1308, 1327], "zfill": [687, 733, 818, 1266], "zip": 1358, "zip_with": [212, 328, 1327], "zone": [72, 172, 173, 176, 426, 430, 451, 474, 705, 760, 761, 762, 818, 938, 1033, 1037, 1062, 1088, 1284, 1327], "zoneinfo": [72, 938], "zoom": [46, 328], "zstd": [47, 48, 51, 53, 55, 328, 932], "zz": [176, 197, 275, 328, 844, 932, 1343, 1350, 1357], "zzz": 715, "\u03bc": [136, 190, 219, 231, 260, 262, 263, 282, 298, 328, 426, 427, 429, 430, 431, 432, 434, 436, 439, 441, 442, 444, 445, 446, 447, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 628, 631, 633, 635, 637, 639, 642, 644, 646, 702, 705, 760, 761, 762, 763, 769, 818, 836, 858, 881, 932, 938, 1033, 1034, 1036, 1037, 1038, 1039, 1041, 1042, 1043, 1048, 1049, 1053, 1055, 1056, 1057, 1058, 1062, 1063, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1079, 1281, 1284, 1350], "\u0441\u0438\u043d\u0438\u0439": 1350, "\u0967\u096f\u096f\u096f": 938, "\u0968\u0966\u096d\u096d": 938, "\u4eac\u90fd": 938, "\u5927\u962a": 938, "\u6771\u4eac": [402, 403, 683, 684, 938, 1005, 1006, 1262, 1263], "\u90fd\u5e02": 938, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [685, 1264], "\uff54\uff45\uff53\uff54": 1350, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1350, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1350, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1350, "\ud835\udf0b": 1349}, "titles": ["Index", "Extending the API", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_schemas", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1343, 1356], "IF": 1347, "__array__": [184, 940], "__arrow_c_stream__": [185, 941], "__dataframe__": 186, "__getitem__": [187, 942], "__iter__": 306, "ab": [336, 943, 1349], "aco": 1352, "acosd": 1352, "add": 337, "add_business_dai": [425, 1032], "agg": [307, 908], "agg_group": 338, "aggreg": [183, 335, 832, 939, 1344], "alia": [339, 944], "alias": [1344, 1349, 1350], "align_fram": 57, "all": [308, 340, 356, 521, 734, 909, 945, 960, 1135, 1356], "all_horizont": 735, "and_": 341, "ani": [342, 357, 522, 736, 946, 961, 1136], "any_horizont": 737, "api": [1, 58, 59, 60, 61, 830, 1355], "append": [343, 947], "approx_n_uniqu": [188, 344, 738, 833, 948], "arang": 739, "arcco": [345, 949], "arccosh": [346, 950], "arcsin": [347, 951], "arcsinh": [348, 952], "arctan": [349, 953], "arctan2": 740, "arctan2d": 741, "arctanh": [350, 954], "arg_max": [351, 358, 523, 955, 962, 1137], "arg_min": [352, 359, 524, 956, 963, 1138], "arg_sort": [353, 957], "arg_sort_bi": 742, "arg_tru": [354, 958], "arg_uniqu": [355, 959], "arg_wher": 743, "arr": [356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983], "arrai": [66, 810, 1319, 1345], "array_agg": 1345, "array_contain": 1345, "array_get": 1345, "array_length": 1345, "array_low": 1345, "array_mean": 1345, "array_revers": 1345, "array_sum": 1345, "array_to_str": 1345, "array_uniqu": 1345, "array_upp": 1345, "asin": 1352, "asind": 1352, "assert": 1358, "assert_frame_equ": 165, "assert_frame_not_equ": 166, "assert_series_equ": 167, "assert_series_not_equ": 168, "atan": 1352, "atan2": 1352, "atan2d": 1352, "atand": 1352, "attribut": [323, 927, 1320], "avail": 1, "avg": 1344, "avro": 831, "backward_fil": 380, "base_utc_offset": [426, 1033], "batched_read": 138, "batchedcsvread": 138, "bin": [381, 382, 383, 384, 385, 386, 387, 984, 985, 986, 987, 988, 989, 990], "binari": [67, 811, 824, 1321], "bit_and": 1346, "bit_count": 1346, "bit_length": 1350, "bit_or": 1346, "bit_xor": 1346, "bitwise_and": [388, 991], "bitwise_count_on": [389, 992], "bitwise_count_zero": [390, 993], "bitwise_leading_on": [391, 994], "bitwise_leading_zero": [392, 995], "bitwise_or": [393, 996], "bitwise_trailing_on": [394, 997], "bitwise_trailing_zero": [395, 998], "bitwise_xor": [396, 999], "boolean": [68, 812, 1322], "bottom_k": [189, 397, 834, 1000], "bottom_k_bi": 398, "build_info": 62, "business_day_count": 744, "cach": 835, "cancel": 924, "cast": [190, 399, 836, 1001, 1353], "cast_time_unit": [427, 1034], "cat": [400, 401, 402, 403, 404, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009], "catalog": [2, 3, 4, 5, 6, 7, 181], "categor": 69, "categori": [813, 1323], "categoricalremappingwarn": 99, "cbrt": [405, 1010, 1349], "ceil": [406, 1011, 1349], "centuri": [428, 1035], "chronoformatwarn": 100, "chunk_length": 1012, "claus": 1343, "clear": [191, 837, 1013], "clip": [407, 1014], "clipboard": 831, "clone": [192, 838, 1015], "cloud": 831, "co": [408, 1016, 1352], "coalesc": [745, 1347], "col": 814, "collect": 839, "collect_al": 63, "collect_all_async": 64, "collect_async": 840, "collect_schema": [193, 841], "column": [169, 170, 194, 815, 842], "columnnotfounderror": 101, "combin": [429, 1036], "comparison": [824, 1331], "comput": [324, 816, 1324], "computeerror": 102, "concat": [65, 525, 664, 1139, 1243, 1350], "concat_arr": 746, "concat_list": 747, "concat_str": 748, "concat_w": 1350, "condit": 1347, "config": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 182], "conjunct": 824, "contain": [360, 381, 526, 665, 964, 984, 1140, 1244], "contains_ani": [666, 1245], "context": 182, "convers": 829, "convert_time_zon": [430, 1037], "corr": [195, 749], "cosd": 1352, "cosh": [409, 1017], "cot": [410, 1018, 1352], "cotd": 1352, "count": [196, 309, 411, 750, 843, 910, 1019, 1344], "count_match": [361, 527, 667, 965, 1141, 1246], "cov": 751, "creat": 1357, "create_list_strategi": 171, "credenti": 831, "credentialprovid": 37, "credentialprovideraw": 38, "credentialproviderazur": 39, "credentialprovidergcp": 40, "csv": [138, 831], "cum_count": [412, 752, 1020], "cum_fold": 753, "cum_max": [413, 1021], "cum_min": [414, 1022], "cum_prod": [415, 1023], "cum_reduc": 754, "cum_sum": [416, 755, 1024], "cum_sum_horizont": 756, "cumulative_ev": [417, 1025], "customufuncwarn": 103, "cut": [418, 1026], "dai": [433, 1040], "data": 333, "databas": 831, "datafram": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 172, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328], "dataorientationwarn": 104, "dataset": 831, "datatyp": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 333], "date": [71, 431, 757, 1038, 1350], "date_part": 1351, "date_rang": [758, 759], "datetim": [72, 432, 760, 1039], "datetime_rang": [761, 762], "decim": 73, "decod": [382, 668, 985, 1247], "decor": 182, "degre": [419, 1352], "delta": 831, "describ": [197, 844, 1027], "descript": [325, 928, 1325], "deseri": [198, 420, 845], "diff": [421, 528, 1028, 1142], "disable_string_cach": 96, "distinct": 1343, "div": 1349, "document": 1355, "dot": [422, 1029], "drop": [199, 846, 1357], "drop_in_plac": 200, "drop_nan": [201, 423, 847, 1030], "drop_nul": [202, 424, 529, 848, 1031, 1143], "dst_offset": [434, 1041], "dt": [425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080], "dtype": [173, 203, 849, 1081], "duplicateerror": 105, "durat": [74, 763], "element": 764, "enable_string_cach": 97, "encod": [383, 669, 986, 1248], "ends_with": [384, 400, 670, 987, 1002, 1249, 1350], "engine_config": 907, "entropi": [470, 1082], "enum": 75, "epoch": [435, 1042], "eq": [471, 571, 1083], "eq_miss": [472, 1084], "equal": [204, 1085], "error": 334, "escape_regex": [98, 671, 1250], "estimated_s": [205, 1086], "eval": [530, 1144], "ewm_mean": [473, 1087], "ewm_mean_bi": [474, 1088], "ewm_std": [475, 1089], "ewm_var": [476, 1090], "exampl": [1, 938, 1358], "excel": 831, "except": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 334, 1356], "exclud": [477, 765], "execut": 1336, "execute_glob": 1337, "exp": [478, 1091, 1349], "explain": [850, 1357], "explod": [206, 362, 479, 531, 672, 851, 966, 1092, 1145, 1251], "export": [326, 1326], "expr": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733], "express": [818, 1355], "extend": [1, 207, 1093], "extend_const": [480, 1094], "extract": [673, 1252, 1351], "extract_al": [674, 1253], "extract_group": [675, 1254], "extract_mani": [676, 1255], "feather": 831, "fetch": 925, "fetch_block": 926, "field": [76, 713, 1292, 1293], "fill_nan": [208, 481, 852, 1095], "fill_nul": [209, 482, 853, 1096], "filter": [210, 483, 854, 1097], "find": [677, 1256], "find_mani": [678, 1257], "first": [310, 363, 484, 532, 766, 855, 911, 967, 1098, 1146, 1344], "flag": [211, 1099], "flatten": 485, "float32": 77, "float64": 78, "floor": [486, 1100, 1349], "floordiv": 487, "fold": [212, 767], "format": 768, "forward_fil": 488, "frame": 1355, "from": 1343, "from_arrow": 129, "from_datafram": 130, "from_dict": [131, 132], "from_epoch": 769, "from_json": 489, "from_numpi": 133, "from_panda": 134, "from_record": 135, "from_repr": 136, "function": [1, 817, 829, 938, 1348], "gather": [490, 533, 1101, 1147], "gather_everi": [213, 491, 534, 856, 1102, 1148], "ge": [492, 1103], "get": [364, 493, 535, 968, 1149], "get_categori": [401, 1003], "get_chunk": 1104, "get_column": [214, 216], "get_column_index": 215, "get_index_typ": 137, "get_table_info": 3, "glimps": 217, "global": 1355, "gpuengin": [907, 929], "greatest": 1347, "group": [770, 1343], "group_bi": [218, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 857, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "group_by_dynam": [219, 858], "groupbi": [306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 327, 930], "gt": [494, 1105], "has_multiple_output": 572, "has_nul": [495, 1106], "has_valid": 1107, "hash": [496, 1108], "hash_row": 220, "have": 1343, "head": [221, 311, 497, 536, 679, 771, 859, 912, 1109, 1150, 1258], "height": 222, "helper": 1358, "hist": [498, 1110], "hour": [436, 1043], "hstack": 223, "iceberg": 831, "ifnul": 1347, "implod": [499, 772, 1111], "import": 938, "in_process": [924, 925, 926], "index": 0, "index_of": [500, 1112], "initcap": 1350, "inprocessqueri": [924, 925, 926, 931], "input": 831, "insert_column": 224, "inspect": [501, 860], "instanc": 182, "int128": 79, "int16": 80, "int32": 81, "int64": 82, "int8": 83, "int_rang": [773, 774], "interfac": 1354, "interpol": [225, 502, 861, 1113], "interpolate_bi": [503, 1114], "intersect": 1356, "introduct": 1355, "invalidoperationerror": 106, "io": 138, "ipc": 831, "is_between": [504, 1115], "is_column": 573, "is_column_select": 574, "is_dupl": [226, 505, 1116], "is_empti": [227, 1117], "is_finit": [506, 1118], "is_first_distinct": [507, 1119], "is_in": [508, 1120], "is_infinit": [509, 1121], "is_last_distinct": [510, 1122], "is_leap_year": [437, 1044], "is_liter": 575, "is_loc": 1004, "is_nan": [511, 1123], "is_not_nan": [512, 1124], "is_not_nul": [513, 1125], "is_nul": [514, 1126], "is_regex_project": 576, "is_sort": 1127, "is_uniqu": [228, 515, 1128], "iso_year": [438, 1045], "item": [229, 1129], "iter_column": 230, "iter_row": 231, "iter_slic": 232, "join": [233, 365, 537, 680, 862, 969, 1151, 1259, 1343], "join_asof": [234, 863], "join_wher": [235, 864], "json": 831, "json_decod": [681, 1260], "json_encod": [714, 1294], "json_norm": 139, "json_path_match": [682, 1261], "keep": 591, "kurtosi": [516, 1130], "lake": 831, "last": [312, 366, 517, 538, 775, 865, 913, 970, 1131, 1152, 1344], "lazi": [236, 866], "lazyfram": [52, 53, 54, 55, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 932], "lazygroupbi": [908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923], "le": [518, 1132], "least": 1347, "left": 1350, "len": [313, 519, 539, 776, 914, 1133, 1153], "len_byt": [402, 683, 1005, 1262], "len_char": [403, 684, 1006, 1263], "length": 1350, "limit": [237, 520, 867, 1134, 1343], "linear_spac": 777, "list": [84, 174, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 819, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1328], "list_catalog": 4, "list_schema": 5, "list_tabl": 6, "lit": 778, "ln": 1349, "load": [8, 182], "load_from_fil": 9, "load_profil": 175, "log": [561, 1175, 1349], "log10": [562, 1176, 1349], "log1p": [563, 1177, 1349], "log2": 1349, "lower": 1350, "lower_bound": [564, 1178], "lt": [565, 1179], "ltrim": 1350, "manag": 182, "manipul": [330, 822, 934, 1330], "map": 592, "map_batch": [566, 779, 868], "map_el": [567, 1180], "map_field": 593, "map_group": [314, 780, 915], "map_row": 238, "mapwithoutreturndtypewarn": 107, "math": 1349, "max": [239, 315, 367, 540, 568, 781, 869, 916, 971, 1046, 1154, 1181, 1344], "max_horizont": [240, 782], "mean": [241, 316, 541, 569, 783, 870, 917, 1047, 1155, 1182], "mean_horizont": [242, 784], "median": [243, 317, 368, 542, 570, 785, 871, 918, 972, 1048, 1156, 1183, 1344], "melt": [244, 872], "merge_sort": [245, 873], "meta": [571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 820], "metadata": 935, "method": 1355, "microsecond": [439, 1049], "millennium": [440, 1050], "millisecond": [441, 1051], "min": [246, 318, 369, 543, 586, 786, 874, 919, 973, 1052, 1157, 1184, 1344], "min_horizont": [247, 787], "minut": [442, 1053], "miscellan": [329, 821, 829, 933, 1329], "mod": [587, 1349], "mode": [588, 1185], "moduleupgraderequirederror": 108, "month": [443, 1054], "month_end": [444, 1055], "month_start": [445, 1056], "mul": 589, "multipl": 182, "n_chunk": [248, 1186], "n_uniqu": [249, 319, 370, 544, 590, 788, 920, 974, 1158, 1187], "name": [591, 592, 593, 594, 595, 596, 597, 598, 599, 815, 823, 1188, 1356], "nan_max": [600, 1189], "nan_min": [601, 1190], "nanosecond": [446, 1057], "ne": [577, 602, 1191], "ne_miss": [603, 1192], "neg": 604, "nest": 333, "new": 1, "new_from_index": 1193, "next_batch": 138, "nodataerror": 109, "normal": [685, 1264, 1350], "norowsreturnederror": 110, "not_": [605, 1194], "nth": 789, "null": 85, "null_count": [250, 606, 875, 1195], "nullif": 1347, "numer": [333, 824, 1331], "object": 86, "octet_length": 1350, "od": 831, "offset": 1343, "offset_bi": [447, 1058], "ones": 790, "oper": [824, 938, 1331, 1356, 1357], "option": 182, "or_": 607, "order": 1343, "ordinal_dai": [448, 1059], "other": 333, "outofboundserror": 111, "output": 831, "output_nam": 578, "over": 608, "pad_end": [686, 1265], "pad_start": [687, 1266], "panic": 334, "panicexcept": 112, "parallel": 829, "parametercollisionerror": 113, "parametr": [169, 170, 171, 172, 173, 174, 175, 176, 177, 1358], "parquet": 831, "partition_bi": 251, "pct_chang": [609, 1196], "peak_max": [610, 1197], "peak_min": [611, 1198], "performancewarn": 114, "pi": 1349, "pipe": [252, 612, 876], "pivot": 253, "plot": [331, 1332], "plugin": 936, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 814, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1358], "polarserror": 115, "polarsinefficientmapwarn": 116, "polarswarn": 117, "pop": 579, "pow": [613, 1199, 1349], "prefix": 594, "prefix_field": 595, "product": [254, 614, 1200], "profil": [877, 1358], "provid": 1, "pyarrow": 831, "python": [830, 1355], "qcut": [615, 1201], "quantil": [255, 320, 616, 791, 878, 921, 1202], "quantile_cont": 1344, "quantile_disc": 1344, "quarter": [449, 1060], "queri": 1355, "radian": [617, 1352], "random": 829, "rank": [618, 1203], "read_avro": 140, "read_clipboard": 141, "read_csv": 142, "read_csv_batch": 143, "read_databas": 144, "read_database_uri": 145, "read_delta": 146, "read_excel": 147, "read_ipc": 148, "read_ipc_schema": 149, "read_ipc_stream": 150, "read_json": 151, "read_ndjson": 152, "read_od": 153, "read_parquet": 154, "read_parquet_schema": 155, "rechunk": [256, 619, 1204], "reduc": 792, "refer": 830, "regexp_lik": 1350, "regist": 1338, "register_dataframe_namespac": 58, "register_expr_namespac": 59, "register_glob": 1339, "register_lazyframe_namespac": 60, "register_mani": 1340, "register_series_namespac": 61, "registr": 1, "reinterpret": [385, 620, 988, 1205], "renam": [257, 879, 1206], "rename_field": [715, 1295], "repeat": 793, "repeat_bi": 621, "replac": [450, 622, 688, 1061, 1207, 1267, 1350], "replace_al": [689, 1268], "replace_column": 258, "replace_mani": [690, 1269], "replace_strict": [623, 1208], "replace_time_zon": [451, 1062], "reshap": [624, 1209], "restore_default": 10, "revers": [259, 371, 545, 625, 691, 880, 975, 1159, 1210, 1270, 1350], "right": 1350, "rle": [626, 1211], "rle_id": [627, 1212], "roll": [260, 628, 881], "rolling_corr": 794, "rolling_cov": 795, "rolling_map": [629, 1213], "rolling_max": [630, 1214], "rolling_max_bi": 631, "rolling_mean": [632, 1215], "rolling_mean_bi": 633, "rolling_median": [634, 1216], "rolling_median_bi": 635, "rolling_min": [636, 1217], "rolling_min_bi": 637, "rolling_quantil": [638, 1218], "rolling_quantile_bi": 639, "rolling_skew": [640, 1219], "rolling_std": [641, 1220], "rolling_std_bi": 642, "rolling_sum": [643, 1221], "rolling_sum_bi": 644, "rolling_var": [645, 1222], "rolling_var_bi": 646, "root_nam": 580, "round": [452, 647, 1063, 1223, 1349], "round_sig_fig": [648, 1224], "row": [261, 262], "rows_by_kei": 263, "rowserror": 118, "rtrim": 1350, "sampl": [264, 546, 649, 1160, 1225], "save": [11, 182], "save_to_fil": 12, "scan_csv": 156, "scan_delta": 157, "scan_iceberg": 158, "scan_ipc": 159, "scan_ndjson": 160, "scan_parquet": 161, "scan_pyarrow_dataset": 162, "scan_tabl": 7, "scatter": 1226, "schema": [265, 882, 937, 1296], "schemaerror": 121, "schemafieldnotfounderror": 122, "search_sort": [650, 1227], "second": [453, 1064], "select": [266, 330, 796, 822, 883, 934, 1330, 1343], "select_seq": [267, 884], "selector": 938, "seri": [176, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1327], "serial": [268, 329, 581, 885, 933], "set": [938, 1228, 1356], "set_ascii_t": 13, "set_auto_structifi": 14, "set_decimal_separ": 15, "set_differ": [547, 1161], "set_float_precis": 16, "set_fmt_float": 17, "set_fmt_str_length": 18, "set_fmt_table_cell_list_len": 19, "set_intersect": [548, 1162], "set_profil": 177, "set_random_se": 163, "set_sort": [269, 651, 886, 1229], "set_streaming_chunk_s": 20, "set_symmetric_differ": [549, 1163], "set_tbl_cell_align": 21, "set_tbl_cell_numeric_align": 22, "set_tbl_col": 23, "set_tbl_column_data_type_inlin": 24, "set_tbl_dataframe_shape_below": 25, "set_tbl_format": 26, "set_tbl_hide_column_data_typ": 27, "set_tbl_hide_column_nam": 28, "set_tbl_hide_dataframe_shap": 29, "set_tbl_hide_dtype_separ": 30, "set_tbl_row": 31, "set_tbl_width_char": 32, "set_thousands_separ": 33, "set_trim_decimal_zero": 34, "set_union": [550, 1164], "set_verbos": 35, "shape": [270, 1230], "shapeerror": 123, "shift": [271, 372, 551, 652, 887, 976, 1165, 1231], "show": 1357, "show_graph": [582, 888], "show_vers": 164, "shrink_dtyp": [653, 1232], "shrink_to_fit": [272, 1233], "shuffl": [654, 1234], "sign": [655, 1235, 1349], "sin": [656, 1236, 1352], "sind": 1352, "sinh": [657, 1237], "sink_csv": 52, "sink_ipc": 53, "sink_ndjson": 54, "sink_parquet": 55, "size": [386, 989], "skew": [658, 1238], "slice": [273, 552, 659, 692, 889, 1166, 1239, 1271], "sort": [274, 373, 553, 660, 890, 977, 1167, 1240], "sort_bi": 661, "split": [693, 1272], "split_exact": [694, 1273], "splitn": [695, 1274], "sql": [275, 797, 891, 1343, 1348, 1354, 1355], "sql_expr": 798, "sqlcontext": [1336, 1337, 1338, 1339, 1340, 1341, 1342, 1355], "sqlinterfaceerror": 119, "sqlsyntaxerror": 120, "sqrt": [662, 1241, 1349], "starts_with": [387, 404, 696, 990, 1007, 1275, 1350], "state": [36, 182], "std": [276, 374, 554, 663, 799, 892, 978, 1168, 1242], "stddev": 1344, "str": [664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291], "strategi": 1358, "strftime": [454, 1065, 1351], "string": [87, 333, 825, 1333, 1350], "stringcach": [56, 829], "stringcachemismatcherror": 124, "strip_char": [697, 1276], "strip_chars_end": [698, 1277], "strip_chars_start": [699, 1278], "strip_prefix": [700, 1279], "strip_suffix": [701, 1280], "strpo": 1350, "strptime": [702, 1281, 1350], "struct": [88, 713, 714, 715, 716, 717, 800, 826, 1292, 1293, 1294, 1295, 1296, 1297, 1334], "structfieldnotfounderror": 125, "style": 332, "sub": 718, "substr": 1350, "suffix": 596, "suffix_field": 597, "sum": [277, 321, 375, 555, 719, 801, 893, 922, 979, 1169, 1298, 1344], "sum_horizont": [278, 802], "tabl": [1341, 1357], "tail": [279, 322, 556, 703, 720, 803, 894, 923, 1170, 1282, 1299], "tan": [721, 1300, 1352], "tand": 1352, "tanh": [722, 1301], "tempor": [333, 827, 1335, 1346, 1351], "test": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 1358], "thread_pool_s": 178, "threadpool_s": 179, "time": [89, 455, 804, 1066], "time_rang": [805, 806], "timestamp": [456, 1067, 1350], "to_arrai": [557, 1171], "to_arrow": [280, 1302], "to_dat": [704, 1283], "to_datetim": [705, 1284], "to_decim": [706, 1285], "to_dict": [281, 282], "to_dummi": [283, 1303], "to_fram": 1304, "to_init_repr": [284, 1305], "to_integ": [707, 1286], "to_jax": [285, 1306], "to_list": [376, 980, 1307], "to_loc": 1008, "to_lowercas": [598, 708, 1287], "to_numpi": [286, 1308], "to_panda": [287, 1309], "to_phys": [723, 1310], "to_seri": 288, "to_str": [457, 1068], "to_struct": [289, 377, 558, 981, 1172], "to_tim": [709, 1288], "to_titlecas": [710, 1289], "to_torch": [290, 1311], "to_uppercas": [599, 711, 1290], "toomanyrowsreturnederror": 126, "top_k": [291, 724, 895, 1312], "top_k_bi": 725, "total_dai": [458, 1069], "total_hour": [459, 1070], "total_microsecond": [460, 1071], "total_millisecond": [461, 1072], "total_minut": [462, 1073], "total_nanosecond": [463, 1074], "total_second": [464, 1075], "transpos": 292, "tree_format": 583, "trigonometri": 1352, "truediv": 726, "truncat": [465, 1076, 1357], "try_cast": 1353, "type": [333, 1353], "uint16": 90, "uint32": 91, "uint64": 92, "uint8": 93, "undo_alias": 584, "union": 1356, "uniqu": [293, 378, 559, 727, 896, 982, 1173, 1313], "unique_count": [728, 1314], "uniti": 181, "unknown": 94, "unnest": [294, 716, 897, 1297, 1345, 1357], "unpivot": [295, 898], "unregist": 1342, "unstablewarn": 127, "unstack": 296, "unsuitablesqlerror": 128, "updat": [297, 899], "upper": 1350, "upper_bound": [729, 1315], "upsampl": 298, "us": 182, "uses_lexical_ord": 1009, "using_string_cach": 180, "utf8": 95, "value_count": [730, 1316], "var": [299, 379, 560, 731, 807, 900, 983, 1174, 1317], "varianc": 1344, "vstack": 300, "warn": 334, "week": [466, 1077], "weekdai": [467, 1078], "when": 808, "where": [732, 1343], "width": [301, 901], "window": 828, "with_column": [302, 902], "with_columns_seq": [303, 903], "with_context": 904, "with_field": 717, "with_row_count": [304, 905], "with_row_index": [305, 906], "with_time_unit": [468, 1079], "write_avro": 41, "write_clipboard": 42, "write_csv": 43, "write_databas": 44, "write_delta": 45, "write_excel": 46, "write_ipc": 47, "write_ipc_stream": 48, "write_json": [49, 585], "write_ndjson": 50, "write_parquet": 51, "xor": 733, "year": [469, 1080], "zero": 809, "zfill": [712, 1291], "zip_with": 1318}})